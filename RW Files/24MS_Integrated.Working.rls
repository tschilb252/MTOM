# RiverWare_Ruleset 8.0.5
# Created 11:52 August 7, 2020
# 
RULESET
NAME "24month";
AGENDA_ORDER ASCENDING;
DESCRIPTION "";
PRECISION   8;
NOTES "";
BEGIN

  POLICY_GROUP   "Calculate Final State Use and Overruns";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "INT - Final SNWP Diversion";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      $ "ForecastUse.SNWPAnnualFC" [@"24:00:00 December Max DayOfMonth, Current Year"] := "Annual Volume"( $ "PumpingFromLakeMead:SNWP.Diversion Requested" );

    END
    UUID "{3dc76f04-3f8c-4978-a7f6-052d27e74730}";;

    RULE                 "INT  - Final CAP Diversion";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      $ "ForecastUse.CAPAnnualFC" [@"24:00:00 December Max DayOfMonth, Current Year"] := "Annual Volume"( $ "CAPDiversion.Total Diversion Requested" );

    END
    UUID "{b3560b33-15ee-4b5a-ac77-345cafeb175b}";;

    RULE                 "INT - Final MWD Diversion";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      $ "ForecastUse.MWDDiversionAnnualFC" [@"24:00:00 December Max DayOfMonth, Current Year"] := "Annual Volume"( $ "MWDDiversion:MWD.Diversion Requested" );

      $ "ForecastUse.MWDAnnualFC" [@"24:00:00 December Max DayOfMonth, Current Year"] := IF ( "GetYear"( @"t" ) == "GetYear"( @"Start Timestep" ) AND "GetMonth"( @"Start Timestep" ) > 1.00000000 )
 THEN
  "SumSlot"( $ "California_CU_Actual.MWD", @"24:00:00 January Max DayOfMonth, Current Year", @"Start Timestep - 1" ) + ( "SumFlowsToVolume"( $ "MWDDiversion:MWD.Diversion Requested", @"Start Timestep", @"24:00:00 December Max DayOfMonth, Current Year" ) - "SumSlot"( $ "California_CU_Schedules.MWDReturns", @"Start Timestep", @"24:00:00 December Max DayOfMonth, Current Year" ) )
 ELSE
  "Annual Volume"( $ "MWDDiversion:MWD.Diversion Requested" ) - "AnnualVolumeSlot"( $ "California_CU_Schedules.MWDReturns" )
 ENDIF;

    END
    UUID "{28298619-0307-453e-8e65-458b6e30ead0}";;

    RULE                 "INT - Final CA Overrun - Div Req";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      $ "AnnualWaterUse.CaOverrun" [@"24:00:00 December 31, Current Year"] := $ "AnnualWaterUse.CaTotalAnnual" [@"24:00:00 December 31, Current Year"] - $ "AnnualWaterUse.California_Apportionment" [@"24:00:00 December 31, Current Year"];

    END
    UUID "{b2514f26-1960-4a56-b0eb-ea00f98218a2}";;

    RULE                 "INT - Final CA Annual Use - Div Req";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>GCAA,11/13/17: Non MWD user diversion requests now added to the MWD diversion request to calculate the total California Diversion Requested.";
    BEGIN

    DESCRIPTION          "The assignment now calculates the total diversion by CA by adding non MWD user diversion <br>requests to the MWD diversion request. <br><br>AP 11/7/2017 <br>";
      $ "AnnualWaterUse.CaTotalAnnual" [@"24:00:00 December 31, Current Year"] := FOR ( DATETIME date IN @"24:00:00 January Max DayOfMonth, Current Year" TO @"24:00:00 December Max DayOfMonth, Current Year" ) STAT_SUM
  FOR ( OBJECT diversionSite IN "ListSubbasin"( "California nonMWD WaterUsers" ) ) STAT_SUM
   IF ( diversionSite == % "PaloVerde" )
   THEN
    "FlowToVolume"( diversionSite & "Total Diversion Requested" [date], date )
   ELSE
    "FlowToVolume"( diversionSite & "Diversion Requested" [date], date )
   ENDIF
  ENDFOR + "FlowToVolume"( $ "MWDDiversion:MWD.Diversion Requested" [date], date ) - IF ( date < @"Start Timestep" )
  THEN
   $ "California_CU_Actual.MWDReturns" [date]
  ELSE
   $ "California_CU_Schedules.MWDReturns" [date]
  ENDIF
 ENDFOR;

    END
    UUID "{b32ea899-a1d0-438d-bc43-66f192a6ea60}";;

    RULE                 "INT - Final AZ Overrun - Div Req";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      $ "AnnualWaterUse.AzOverrun" [@"24:00:00 December 31, Current Year"] := $ "AnnualWaterUse.AzTotalAnnual" [@"24:00:00 December 31, Current Year"] - $ "AnnualWaterUse.Arizona_Apportionment" [@"24:00:00 December 31, Current Year"];

    END
    UUID "{9d9f8fe6-fa7e-46de-9d05-b97f2cfeec59}";;

    RULE                 "INT - Final AZ Annual Use - Div Req";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      $ "AnnualWaterUse.AzTotalAnnual" [@"24:00:00 December 31, Current Year"] := $ "ForecastUse.CAPAnnualFC" [@"24:00:00 December 31, Current Year"] + $ "AnnualWaterUse.AzNoCAPTotalAnnual" [@"24:00:00 December 31, Current Year"];

    END
    UUID "{328c2e27-0f07-488c-bba7-f5b5785413b6}";;

    RULE                 "INT - Final NV Overrun - Div Req";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      $ "AnnualWaterUse.NVOverrun" [@"24:00:00 December 31, Current Year"] := $ "AnnualWaterUse.NvTotalAnnual" [@"24:00:00 December 31, Current Year"] - $ "AnnualWaterUse.Nevada_Apportionment" [@"24:00:00 December 31, Current Year"];

    END
    UUID "{ff6bcdf2-7d5a-429f-9afc-c72295907261}";;

    RULE                 "INT - Compute Lower Basin Energy";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      $ "Lower Basin Energy.Computed Davis Energy Using Input Eff" [] := $ "Lower Basin Energy.Input Davis Efficiency" [] * "FlowToVolume"( $ "Mohave.Turbine Release" [], @"t" ) * "Compute Head as a Function of Turbine Release"( $ "Mohave.Turbine Release" [] ) * 9789.00000000 "newton" / ( ( 1.00000000 "m" * 1.00000000 "m" ) * 1.00000000 "m" );

      $ "Lower Basin Energy.Computed Davis Head using Turbine Release" [] := "Compute Head as a Function of Turbine Release"( $ "Mohave.Turbine Release" [] );

      $ "Lower Basin Energy.Davis KWH per AF" [] := $ "Lower Basin Energy.Input Davis Efficiency" [] * "FlowToVolume"( $ "Mohave.Turbine Release" [], @"t" ) * "Compute Head as a Function of Turbine Release"( $ "Mohave.Turbine Release" [] ) * 9789.00000000 "newton" / ( ( 1.00000000 "m" * 1.00000000 "m" ) * 1.00000000 "m" ) / "FlowToVolume"( $ "Mohave.Turbine Release" [], @"t" ) * 1.00000000 "ft" * 1.00000000 "ft";

      $ "Lower Basin Energy.Computed Parker Energy Using Input Eff" [] := $ "Lower Basin Energy.Input Parker Efficiency" [] * "FlowToVolume"( $ "Havasu.Turbine Release" [], @"t" ) * $ "Havasu.Operating Head" [] * 9789.00000000 "newton" / ( ( 1.00000000 "m" * 1.00000000 "m" ) * 1.00000000 "m" );

      $ "Lower Basin Energy.Computed PD Project Energy Using Peak Base Power Calc" [] := $ "Mohave.Energy" [] + $ "Havasu.Energy" [] / 2.00000000;

      $ "Lower Basin Energy.Computed PD Project Energy Using Input Eff" [] := $ "Lower Basin Energy.Input Davis Efficiency" [] * "FlowToVolume"( $ "Mohave.Turbine Release" [], @"t" ) * $ "Mohave.Operating Head" [] * 9789.00000000 "newton" / ( ( 1.00000000 "m" * 1.00000000 "m" ) * 1.00000000 "m" ) + $ "Lower Basin Energy.Input Parker Efficiency" [] * "FlowToVolume"( $ "Havasu.Turbine Release" [], @"t" ) * $ "Havasu.Operating Head" [] * 9789.00000000 "newton" / ( ( 1.00000000 "m" * 1.00000000 "m" ) * 1.00000000 "m" ) / 2.00000000;

    END
    UUID "{15c06a09-4178-4fd1-b0c2-013b28f461aa}";;

    RULE                 "INT - Compute LC Dam Capacity";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "AP 4/9/19: Updated Mohave equation to use the Lower Basin Energy Cap Fraction instead of the Mohave maintenace fraction";
    BEGIN

      $ "Mead.Power" [] := $ "EnergyInfo.EffectiveHooverCapacity" [] * $ "Mead.Power Plant Cap Fraction" [];

      $ "Mohave.Power" [] := $ "Lower Basin Energy.Davis_Power_Capacity" [] * $ "Lower Basin Energy.Davis Plant Cap Fraction" [];

      $ "Havasu.Power" [] := $ "Lower Basin Energy.Parker_Power_Capacity" [] * $ "Havasu.Power Plant Cap Fraction" [];

    END
    UUID "{76bd7fcc-63d5-4976-bf8d-b1037905589c}";;

  END
  UUID "{1ea7f681-4ebd-46fd-90f2-0f5cd140dc48}";;

  POLICY_GROUP   "AugEOYProjections";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "INT - AugEOYPEProjections";
    DESCRIPTION          "DEVELOPMENT NOTES<br>AUTHOR: ST<br>DESCRIPTION: In the August 24-month study, this rule saves the projected end of calendar year elevations for Powell and Mead. These  values are then transfered to MTOM so MTOM knows how to operate Powell and Mead for the year even if the actual January 1 elevation is not where the August study projected it.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetMonth"( "RunStartDate"(  ) ) == 8.00000000;
    NOTES                "";
    BEGIN

      $ "PowellToMeadData.AugEOYMeadPEProjection" [@"24:00:00 December 31, Current Year"] := $ "Mead.Pool Elevation" [@"24:00:00 December 31, Current Year"];

      $ "PowellToMeadData.AugEOYPowellPEProjection" [@"24:00:00 December 31, Current Year"] := $ "Powell.Pool Elevation" [@"24:00:00 December 31, Current Year"];

    END
    UUID "{8a6779fc-a1b5-492e-b165-eef0da57e67f}";;

  END
  UUID "{1041353e-56e8-470d-b324-68a12b9286ca}";;

  POLICY_GROUP   "FloodControl";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "INT - FC Surplus Schedules Data Volume to Simulation Flow";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( $ "FloodControlOutput.Flood Control Flag" [] > 0.00000000 OR $ "FloodControlOutput.Exclusive Space Flag" [] > 0.00000000 ) AND IsNaN $ "Surplus.Flood Control Surplus Flag" [];
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>CH, 9/13/17: Moved from prioroty 26 to priority 16, changed date range from Jan 31, Current Year TO Dec 31, Current Year to @t TO Dec 31, Current Year<br>AP, 202005: Added slot assignment for MWD depletion and CAP Depletion<br>GCAA, 202006: Added SNWA Depletion slot assignment to help model solve for correct return flow to system";
    BEGIN

      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            $ "Surplus.Surplus Flag" [date] := 3.00000000;

            $ "Surplus.Flood Control Surplus Flag" [date] := 1.00000000;

            $ "OthersBlwImp:AzPumpersBlwImp.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule- FC"( date, "AzPumpersBlwImp" ), date );

            $ "AzPkrToImp:CibolaValleyIID.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule- FC"( date, "CibolaValleyIID" ), date );

            $ "AzPkrToImp:Parker.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule- FC"( date, "City of Parker" ), date );

            $ "GilaAndYumaUsers:GilaMonsterFarms.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule- FC"( date, "Gila Monster Farms" ), date );

            $ "CAPDiversion.Total Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule- FC"( date, "CAP" ), date );

            $ "CAPDiversion.Total Depletion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule- FC"( date, "CAP" ), date );

            $ "MWDDiversion:MWD.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule- FC"( date, "MWD" ), date );

            $ "MWDDiversion:MWD.Depletion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule- FC"( date, "MWD" ), date ) - "VolumeToFlow"( $ "California_CU_Schedules.MWDReturns" [date], date ) - "VolumeToFlow"( $ "Mexico_CU_Schedules.MexicoTJ" [date], date );

            $ "AAC:Coachella.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule- FC"( date, "Coachella" ), date );

            $ "AAC:IID.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule- FC"( date, "IID" ), date );

            $ "CaPkrToImp:CaPumpersAbvImp.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule- FC"( date, "CaPumpersAbvImp" ), date );

            $ "CaDvsToPkr:Needles.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule- FC"( date, "Needles" ), date );

            $ "MexicanTreatyDelivery:MexicoSched.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule- FC"( date, "Mexico" ), date );

            $ "PumpingFromLakeMead:SNWP.Diversion Requested" [date] := IF ( $ "Surplus Total Annual Schedules.SNWA" [@"24:00:00 December 31, Current Year"] > $ "Nevada_CU_Forecast1.SNWP" [@"24:00:00 December 31, Current Year"] )
 THEN
  "VolumeToFlow"( "Set Monthly Surplus Schedule- FC"( date, "SNWA" ), date )
 ENDIF;

            $ "PumpingFromLakeMead:SNWP.Depletion Requested" [date] := IF ( $ "Surplus Total Annual Schedules.SNWA" [@"24:00:00 December 31, Current Year"] > $ "Nevada_CU_Forecast1.SNWP" [@"24:00:00 December 31, Current Year"] )
 THEN
  "VolumeToFlow"( "Set Monthly Surplus Schedule- FC"( date, "SNWA" ), date )
 ENDIF;

      ENDFOREACH;

    END
    UUID "{f1e20e98-7478-4a70-9c55-0c72424d8819}";;

    RULE                 "INT - Compute Effective Hoover Capacity Regression";
    DESCRIPTION          "This Rule is used to set the EnergyInfo.EffectiveHooverCapacity so that it can go out to 60 weeks.  The regression equation provided is from the LC BoR office and can be adjusted using this rule.  ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      IF_STATEMENT (( $ "Mead.Pool Elevation" [@"t"] ) < 1170.00000000 "feet" AND ( IsNaN $ "EnergyInfo.EffectiveHooverCapacity" [@"t"] OR NOT "IsInput"( $ "EnergyInfo.EffectiveHooverCapacity", @"t" ) )) THEN
            WITH_STATEMENT (NUMERIC elevMead = NaNToZero ( $ "Mead.Pool Elevation" [@"t"] )) DO
            $ "EnergyInfo.EffectiveHooverCapacity" [@"t"] := ( elevMead * ( 5.64540000 "MW" / 1.00000000 "foot" ) - 4530.50000000 "MW" ) COMMENTED_BY "Regression values provided by BOR LC on 3/8/2013 <br>";

      END_WITH_STATEMENT;

      ELSE
            $ "EnergyInfo.EffectiveHooverCapacity" [@"t"] := 2074.00000000 "MW";

      END_IF_STATEMENT;

      IF_STATEMENT (NOT "IsInput"( $ "Mead.Power Plant Cap Fraction", @"t" )) THEN
            $ "Mead.Power Plant Cap Fraction" [@"t"] := $ "Mead.Power Plant Cap Fraction" [@"t - 12"];

      END_IF_STATEMENT;

    END
    UUID "{f3b533ce-f4d8-4169-a273-c1daa991eca1}";;

    RULE                 "INT - Mead Space Building";
    DESCRIPTION          "DESCRIPTION: If the storage in Mead is greater than the target storage (based on the minimum system space that must be available), this rule resets the outflow to achieve the target storage during space building months (August1-December31); if the Flood Control Flag is not already set, this rule also sets it based on whether the outflow was reset by the rule<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" > @"24:00:00 July Max DayOfMonth, Current Year" AND NOT IsNaN $ "Mead.Storage" [];
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>CH, 8/29/17: Description added and If statment changed to result in max of ComputeOutflowAtGivenStorage function and Mead.Outflow (was previously only the result of ComputeOutflowAtGivenStorage function";
    BEGIN

      $ "FloodControlOutput.Flood Control Flag" [] := IF ( IsNaN $ "FloodControlOutput.Flood Control Flag" [] )
 THEN
  IF ( $ "Mead.Storage" [] > "ComputeTargetStorage"(  ) )
  THEN
   1.00000000
  ELSE
   0.00000000
  ENDIF
 ENDIF;

      IF_STATEMENT ($ "Mead.Storage" [] > "ComputeTargetStorage"(  )) THEN
            $ "Mead.Outflow" [] := "Max"( "ComputeOutflowAtGivenStorage"( % "Mead", "ComputeTargetStorage"(  ) ), $ "Mead.Outflow" [] );

      END_IF_STATEMENT;

    END
    UUID "{de019cd9-323c-488e-95d9-21f413b49201}";;

    RULE                 "INT - Mead Flood Control Release";
    DESCRIPTION          "DESCRIPTION: This rule checks that the release from Mead computed for downstream demands is large enough to satisfy flood control during the runoff season. If not, Mead Outflow is reset to the required flood control release which was previously calculated in the <Set Flood Control Release> rule and stored as FloodControlOutput.FCrelease. The flood control flag is also set to 1, which will cause the system to solve downstream and eventually force more water out of Havasu and Mohave. <br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" <= @"24:00:00 July Max DayOfMonth, Current Year" AND NOT IsNaN $ "Mead.Outflow" [];
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>CH, 8/29/17: Updated description to include Mohave, modified rule to only use 1 IF statement ";
    BEGIN

      IF_STATEMENT ($ "Mead.Outflow" [] < $ "FloodControlOutput.FCrelease" []) THEN
            $ "Mead.Outflow" [] := $ "FloodControlOutput.FCrelease" [];

            $ "FloodControlOutput.Flood Control Flag" [] := 1.00000000;

      ELSE
            $ "FloodControlOutput.Flood Control Flag" [] := 0.00000000;

      END_IF_STATEMENT;

    END
    UUID "{d0444628-f05a-444c-9749-206a63b2e667}";;

    RULE                 "INT - Mead Exclusive Flood Control Space";
    DESCRIPTION          "DESCRIPTION: This rule ensures that Mead does not violate the 1.5 maf space requirement (on MeadFloodControlData.MinSpace slot) at any time of the year. Although this is the highest priority rule, we don't want it to fire until the other flood control procedures have potentially executed. The rule checks the storage in Mead, and if it does not provide the minimum space, the outflow is recalculated so that the minimum space is achieved. If the outflow is recalculated, the FloodControlOutput.Exclusive Space Flag is set to 1; otherwise it is set to 0.<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT IsNaN $ "FloodControlOutput.Flood Control Flag" [] AND NOT IsNaN $ "Mead.Storage" [];
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>CH, 8/29/17: Description added, modified rule to use only 1 IF statement instead of 2 and only print statement in the case the IF statement is TRUE<br>GCAA, 20200617: Deleted Or statment in Mead storage statement to prevent rule from firing when outflow should be solved by the downstream demand";
    BEGIN

    DESCRIPTION          "If Mead storage exceeds what provides the minimum space requirement, <br>recalculate outflow so the storage provides the minimum space.";
      IF_STATEMENT ($ "Mead.Storage" [] >= "ComputeMinimumSpace"( % "Mead" ) COMMENTED_BY "Storage with min space requirement") THEN
            $ "Mead.Outflow" [] := "Max"( "ComputeOutflowAtGivenStorage"( % "Mead", "ComputeMinimumSpace"( % "Mead" ) ), "VolumeToFlow"( $ "Lower Basin Output.DownstreamReq" [], @"t" ) ) COMMENTED_BY "Calculate outflow to reach storage with min space requirement or meet <br>downstream requirement, whichever volume is larger<br>(This will be constrained to MaxSpaceBuildingRelease outflow) <br>";

      END_IF_STATEMENT;

      IF_STATEMENT (IsNaN $ "FloodControlOutput.Exclusive Space Flag" []) THEN
            $ "FloodControlOutput.Exclusive Space Flag" [] := IF ( $ "Mead.Storage" [] >= "ComputeMinimumSpace"( % "Mead" ) )
 THEN
  1.00000000
 ELSE
  0.00000000
 ENDIF;

      END_IF_STATEMENT;

      PRINT "Flood Control due to violating Exclusive Flood Control Space: Mead Storage reset";

    END
    UUID "{e7252bdb-715c-4f11-956a-d550d5c01a3f}";;

    RULE                 "INT - Set Flood Control Release";
    DESCRIPTION          "DESCRIPTION: This rule sets the Mead flood control release according to table 1 in Exhibit A of the Flood Control Manual, which dictates release steps given inflow and available storage, during flood control months (January 1-July 31) or as the minimum of either releases needed to achieve target storage or the maximum space building release (28,000 cfs) during space building months (August 1-December 31). <br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT IsNaN $ "FloodControlOutput.FCrelease" [];
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>CH, 8/29/17: Description added";
    BEGIN

      $ "FloodControlOutput.FCrelease" [] := IF ( @"t" <= @"24:00:00 July Max DayOfMonth, Current Year" )
 THEN
  GET @INDEX 0.00000000 FROM "ForecastRunoffSeason "(  )
 ELSE
  "ComputeTargetStorageRelease"(  )
 ENDIF;

      PRINT IF ( @"t" <= @"24:00:00 July Max DayOfMonth, Current Year" )
 THEN
  "entering Runoff Forecast Season routine for" CONCAT "GetMonthAsString"( @"t" )
 ELSE
  "Mead Flood Control Release is not computed in" CONCAT "GetMonthAsString"( @"t" )
 ENDIF;

    END
    UUID "{b6bd7f85-0df9-4a24-937f-741dc8ac1d92}";;

    RULE                 "INT - Set Without Release";
    DESCRIPTION          "DESCRIPTION: This rule calculates the forecasted Mead inflow and the Mead inflow volume in excess of the available space in Mead and Powell<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" <= @"24:00:00 July Max DayOfMonth, Current Year" AND IsNaN $ "FloodControlOutput.Withoutrel" [];
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>CH, 8/29/17: Description added";
    BEGIN

      $ "FloodControlOutput.Forecas" [] := "ForecastMeadInflow"(  );

    DESCRIPTION          "Calculate the Mead inflow volume in excess of available space";
      $ "FloodControlOutput.Withoutrel" [] := "ForecastMeadInflow"(  ) - "AvailableSpace"( % "Mead" ) - "AvailableSpace"( % "Powell" ) + $ "MeadFloodControlData.MinSpace" [0.00000000, 0.00000000] - "DeltaBankStorage"(  ) - "FloodControlEvap"( % "Mead" ) - "FloodControlEvap"( % "Powell" ) - $ "FloodControlOutput.Consnev" [];

    END
    UUID "{50a3b30e-155d-484d-b998-b0cbc1607cfb}";;

    RULE                 "INT - Set Effective Space";
    DESCRIPTION          "DESCRIPTION: This rule calculates the total effective space available in Flaming Gorge (incl. Fontenelle), Blue Mesa, and Navajo until the end of July of the current year by choosing, for each individual reservoir, the minimum of the total available space remaining (*use) or the difference between the Inflow and Outflow (*pred) for the period and summing those values. Used in ForecastMeadInflow function to calculate Mead inflow forecast for calculationof flood control releases according to the Flood Control Algorithm in Exhibit One of the Flood Control Manual. <br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT IsNaN $ "FloodControlOutput.UBEffective" [];
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>CH, 8/29/17: Description added";
    BEGIN

      $ "FloodControlOutput.UBEffective" [] := IF ( @"t" <= @"24:00:00 July Max DayOfMonth, Current Year" )
 THEN
  "Min"( $ "FloodControlOutput.FGuse" [], $ "FloodControlOutput.FGpred" [] ) + "Min"( $ "FloodControlOutput.BMuse" [], $ "FloodControlOutput.BMpred" [] ) + "Min"( $ "FloodControlOutput.NAVuse" [], $ "FloodControlOutput.NAVpred" [] )
 ELSE
  0.00000000 "acre-feet"
 ENDIF;

    END
    UUID "{62c8240e-4d7a-4f4e-b50e-371c09dfe9f7}";;

    RULE                 "INT - Set Consnev";
    DESCRIPTION          "DESCRIPTION: This rule calculates the total diversion volume requested by SNWP from the current timestep to the end of July of the current year.<br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" <= @"24:00:00 July Max DayOfMonth, Current Year" AND IsNaN $ "FloodControlOutput.Withoutrel" [];
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>CH, 8/25/17: The SouthernNevConsumed function call in this rule was replaced by a call to the predefined function SumFlowsToVolume.";
    BEGIN

      $ "FloodControlOutput.Consnev" [] := "SumFlowsToVolume"( $ "PumpingFromLakeMead:SNWP.Diversion Requested", @"t", @"24:00:00 July Max DayOfMonth, Current Year" );

    END
    UUID "{dd3c6890-fae8-460a-b3d1-684cfa9303ce}";;

    RULE                 "INT - Set Forecast Data";
    DESCRIPTION          "DESCRIPTION: This rule calculates and stores the current available storage and expected net change in storage between the current timestep and the end of July of the current year for Flaming Gorge, Blue Mesa, Navajo, Powell and Mead. The change in bank storage and the evaporation are also calculated and stored. These storage calculations are used to determine effective upstream reservoir storage in the Mead Space Building rule. Effective UB storage is used to calculate Mead inflow forecast in the ForecastMeadInflow function for determination of flood control releases using the Flood Control Algorithm in Exhibit One of the Flood Control Manual. <br><br><br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT IsNaN $ "FloodControlOutput.Withoutrel" [];
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>CH, 8/29/17: Description added, replaced the GetLiveCapacity(reservoir) - reservoir.Storage[@&quot;t-1&quot;] calculation with the AvailableSpace function, and used while statement to calculate MonthlyDatelist instead of using GetMonthlyDatelist function in each calculation";
    BEGIN

      WITH_STATEMENT (LIST MonthlyDatelist = "GetMonthlyDatelist"( @"t", @"24:00:00 July Max DayOfMonth, Current Year" )) DO
          DESCRIPTION          "(Inflow - Outflow) between current timestep and end of July of current year";
      $ "FloodControlOutput.FGuse" [] := IF ( @"t" <= @"24:00:00 July Max DayOfMonth, Current Year" )
 THEN
  "SumSlotVolume"( $ "FlamingGorgeInflow.Unregulated", MonthlyDatelist ) - "SumSlotVolume"( $ "FlamingGorge.Outflow", MonthlyDatelist )
 ELSE
  0.00000000 "acre-feet"
 ENDIF;

          DESCRIPTION          "Calculate additional available storage in Flaming Gorge";
      $ "FloodControlOutput.FGpred" [] := "AvailableSpace"( % "FlamingGorge" ) + "AvailableSpace"( % "Fontenelle" );

          DESCRIPTION          "(Inflow - Outflow) between current timestep and end of July of current year";
      $ "FloodControlOutput.BMuse" [] := IF ( @"t" <= @"24:00:00 July Max DayOfMonth, Current Year" )
 THEN
  "SumSlotVolume"( $ "BlueMesaInflow.Unregulated", MonthlyDatelist ) - "SumSlotVolume"( $ "BlueMesa.Outflow", MonthlyDatelist )
 ELSE
  0.00000000 "acre-feet"
 ENDIF;

          DESCRIPTION          "Calculate additional available storage in Blue Mesa";
      $ "FloodControlOutput.BMpred" [] := "AvailableSpace"( % "BlueMesa" );

          DESCRIPTION          "(Inflow - Outflow) between current timestep and end of July of current year";
      $ "FloodControlOutput.NAVuse" [] := IF ( @"t" <= @"24:00:00 July Max DayOfMonth, Current Year" )
 THEN
  "SumSlotVolume"( $ "Navajo.Inflow", MonthlyDatelist ) - "SumSlotVolume"( $ "Navajo.Outflow", MonthlyDatelist )
 ELSE
  0.00000000 "acre-feet"
 ENDIF;

          DESCRIPTION          "Calculate additional available storage in Navajo";
      $ "FloodControlOutput.NAVpred" [] := "AvailableSpace"( % "Navajo" );

          DESCRIPTION          "Calculate additional available storage in Mead";
      $ "FloodControlOutput.MeadPred" [] := "AvailableSpace"( % "Mead" );

            $ "FloodControlOutput.MeadCredEff" [] := "AvailableSpace"( % "Mead" );

          DESCRIPTION          "Calculate additional available storage in Powell";
      $ "FloodControlOutput.PowellPred" [] := "AvailableSpace"( % "Powell" );

            $ "FloodControlOutput.PowellCredEff" [] := "AvailableSpace"( % "Powell" );

          DESCRIPTION          "Calculate change in bank storage with available space";
      $ "FloodControlOutput.Deltabs" [] := "DeltaBankStorage"(  );

          DESCRIPTION          "Calculate evaporation between current timestep and end of July of current year";
      $ "FloodControlOutput.Evapmd" [] := "FloodControlEvap"( % "Mead" );

            $ "FloodControlOutput.Evapow" [] := "FloodControlEvap"( % "Powell" );

      END_WITH_STATEMENT;

    END
    UUID "{73aa1bf1-a964-407a-8986-dfe6abfa47c3}";;

    RULE                 "INT - Set Schedule Release";
    DESCRIPTION          "DESCRIPTION:  This rule copies the initial Mead release needed to meet downstream demands<br>to the FloodControlOutput data object in slot MeadSchedRel. <br>The value should only be reported the first time Mead calculates its outflow <br>based on downstream demands. It should never be overwritten by another rule. <br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT IsNaN $ "Lower Basin Output.MeadSchedRel" [] AND NOT IsNaN $ "Mead.Outflow" [];
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown";
    BEGIN

      $ "Lower Basin Output.MeadSchedRel" [] := $ "Mead.Outflow" [];

    END
    UUID "{e0646d8d-d2ef-442b-9d7f-62d897c34a0c}";;

  END
  UUID "{e680fe88-ed3c-46ce-89be-aecb72cb9f4d}";;

  POLICY_GROUP   "DCP  and BWSCP Reductions";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "INT - MX BNWSCP";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND @"t" != @"Start Timestep";
    NOTES                "APivarnik, 202005: Changed rule to use month percent calculation based off schedule distribution and not the shortage monthly percents table. Changed rule to apply distribution to the annual diversion, instead of a monthly adjustment<br>";
    BEGIN

      WITH_STATEMENT (NUMERIC MXAnnualDiversion = "SumFlowsToVolume"( $ "MexicanTreatyDelivery:MexicoSched.Diversion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) - $ "Mexico Shortage and Surplus.Mexico Recoverable Water Savings_AnnualContribution" [@"24:00:00 December Max DayOfMonth, Current Year"]) DO
            FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            WITH_STATEMENT (NUMERIC MonthPercent = "FlowToVolume"( $ "MexicanTreatyDelivery:MexicoSched.Diversion Requested" [date], date ) / "SumFlowsToVolume"( $ "MexicanTreatyDelivery:MexicoSched.Diversion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" )) DO
            $ "MexicanTreatyDelivery:MexicoSched.Diversion Requested" [date] := "VolumeToFlow"( MXAnnualDiversion * MonthPercent, date );

      END_WITH_STATEMENT;

      ENDFOREACH;

      END_WITH_STATEMENT;

    END
    UUID "{c90c505a-55e7-429e-9875-5930ee7cb428}";;

    RULE                 "INT - Arizona DCP Sched Reductions";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND @"t" != @"Start Timestep" ) AND $ "ICS Credits.AnnualDCPContribution_AZ" [@"24:00:00 December Max DayOfMonth, Current Year"] > 0.00000000 "acre-feet";
    NOTES                "GAllan/APivarnik, 202005: Added assignment of CAP depletion to prevent model from solving a negative return flow<br>APivarnik, 202005: Changed rule to use month percent calculation based off schedule distribution and not the shortage monthly percents table. Changed rule to apply distribution to the annual diversion, instead of a monthly adjustment<br><br>GCAA, 202006: Added SystemTaxAssesment funtion to replace reference to the scalar slot<br>";
    BEGIN

      WITH_STATEMENT (NUMERIC CAPAnnualDiverson = "SumFlowsToVolume"( $ "CAPDiversion.Total Diversion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) - ( $ "ICS Credits.AnnualSysWaterforDCP_CAWCD" [@"24:00:00 December Max DayOfMonth, Current Year"] + $ "ICS Credits.AnnualCreationDCP_CAWCD" [@"24:00:00 December Max DayOfMonth, Current Year"] / "SystemTaxAdjustment_DCP"(  ) )) DO
            FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            WITH_STATEMENT (NUMERIC MonthPercent = "FlowToVolume"( $ "CAPDiversion.Total Diversion Requested" [date], date ) / "SumFlowsToVolume"( $ "CAPDiversion.Total Diversion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" )) DO
            $ "CAPDiversion.Total Diversion Requested" [date] := "VolumeToFlow"( CAPAnnualDiverson * MonthPercent, date );

            $ "CAPDiversion.Total Depletion Requested" [date] := "VolumeToFlow"( CAPAnnualDiverson * MonthPercent, date );

      END_WITH_STATEMENT;

      ENDFOREACH;

      END_WITH_STATEMENT;

    END
    UUID "{74cc82a6-37a3-4f05-ac56-c6a4740d1c95}";;

    RULE                 "INT - California DCP Sched Reductions";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND @"t" != @"Start Timestep" ) AND $ "ICS Credits.AnnualDCPContribution_CA" [@"24:00:00 December Max DayOfMonth, Current Year"] > 0.00000000 "acre-feet";
    NOTES                "APivarnik, 202005: Added depletion requested slot assignment to help correctly solve for return flows. Changed rule to use month percent calculation based off schedule distribution and not the shortage monthly percents table for MWD. Changed rule to apply distribution to the annual diversion, instead of a monthly adjustment (for MWD)<br><br>GCAA, 202006: Added SystemTaxAssesment funtion to replace reference to the scalar slot<br>";
    BEGIN

    DESCRIPTION          "Coachella water left in system that will by taken by MWD as additional diversion. Calculated in the <br>CA Accounting rule.  <br>";
      WITH_STATEMENT (NUMERIC AvailableCoachellaWater = $ "ICS Credits.AnnualDCPWater_Coachella_Diverted" ["Dec31ofYear"( @"t" )]) DO
            WITH_STATEMENT (NUMERIC schedReductionMWD = ( $ "ICS Credits.AnnualSimultaneousCreationDCPICS_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] / "SystemTaxAdjustment_DCP"(  ) + $ "ICS Credits.AnnualSysWaterforDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] )) DO
            WITH_STATEMENT (NUMERIC MWDAnnualDiversion = "SumFlowsToVolume"( $ "MWDDiversion:MWD.Diversion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) - ( schedReductionMWD - AvailableCoachellaWater )) DO
            WITH_STATEMENT (NUMERIC MWDAnnualDepletion = "SumFlowsToVolume"( $ "MWDDiversion:MWD.Depletion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) - ( schedReductionMWD - AvailableCoachellaWater )) DO
            FOREACH (DATETIME date IN @"t" TO @"24:00:00 December Max DayOfMonth, Current Year") DO
            WITH_STATEMENT (NUMERIC MonthPercent = "FlowToVolume"( $ "MWDDiversion:MWD.Diversion Requested" [date], date ) / "SumFlowsToVolume"( $ "MWDDiversion:MWD.Diversion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" )) DO
            $ "MWDDiversion:MWD.Diversion Requested" [date] := "VolumeToFlow"( MWDAnnualDiversion * MonthPercent, date );

            $ "MWDDiversion:MWD.Depletion Requested" [date] := "VolumeToFlow"( MWDAnnualDepletion * MonthPercent, date );

      END_WITH_STATEMENT;

      ENDFOREACH;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      WITH_STATEMENT (NUMERIC dcpContributionCVWD = $ "ICS Credits.AnnualDCPContribution_Coachella" [@"24:00:00 December Max DayOfMonth, Current Year"]) DO
            FOREACH (DATETIME date IN @"t" TO @"24:00:00 December Max DayOfMonth, Current Year") DO
            $ "AAC:Coachella.Diversion Requested" [date] := $ "AAC:Coachella.Diversion Requested" [date] - "VolumeToFlow"( dcpContributionCVWD * $ "Shortage.MonthlyPercents" ["GetMonthAsString"( date ), "Equal"], date );

      ENDFOREACH;

      END_WITH_STATEMENT;

    END
    UUID "{6a167f02-a4e3-4a9d-afbc-dbb176cc9988}";;

    RULE                 "INT - Nevada DCP Sched Reductions";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND @"t" != @"Start Timestep" AND ( $ "ICS Credits.AnnualSimultaneousCreationDCPICS_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] > 0.00000000 "acre-feet" OR $ "ICS Credits.AnnualSysWaterforDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] > 0.00000000 "acre-feet" );
    NOTES                "APivarnik, 202005: Changed rule to use month percent calculation based off schedule distribution and not the shortage monthly percents table. Changed rule to apply distribution to the annual diversion, instead of a monthly adjustment<br><br>GCAA, 202006: Added SNWA Depletion slot assignment to help model solve for correct return flow to system<br>";
    BEGIN

      WITH_STATEMENT (NUMERIC SNWPAnnualDiversion = "SumFlowsToVolume"( $ "PumpingFromLakeMead:SNWP.Diversion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) - ( ( $ "ICS Credits.AnnualSimultaneousCreationDCPICS_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] / "SystemTaxAdjustment_DCP"(  ) ) COMMENTED_BY "Since this water is being converted to EC ICS then DCP ICS it has to have the 10% system <br>assessment. So total delivery reduction to make the conversion is 110% of the needed DCP <br>contribution volume remaining.      <br>" + $ "ICS Credits.AnnualSysWaterforDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] )) DO
            FOREACH (DATETIME date IN @"t" TO @"24:00:00 December Max DayOfMonth, Current Year") DO
            WITH_STATEMENT (NUMERIC MonthPercent = "FlowToVolume"( $ "PumpingFromLakeMead:SNWP.Diversion Requested" [date], date ) / "SumFlowsToVolume"( $ "PumpingFromLakeMead:SNWP.Diversion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" )) DO
            $ "PumpingFromLakeMead:SNWP.Diversion Requested" [date] := "VolumeToFlow"( SNWPAnnualDiversion * MonthPercent, date );

            $ "PumpingFromLakeMead:SNWP.Depletion Requested" [date] := "VolumeToFlow"( SNWPAnnualDiversion * MonthPercent, date );

      END_WITH_STATEMENT;

      ENDFOREACH;

      END_WITH_STATEMENT;

    END
    UUID "{0a613786-d956-4b69-a76a-7b7f2117b66c}";;

  END
  UUID "{834d58a3-7451-4cb1-8f71-82084275008e}";;

  POLICY_GROUP   "ICS Accounting and Delivery";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "INT - MX Accounting";
    DESCRIPTION          "Calculates the end of year balance of Mexico Water Reserve per Minute 323 (previously called ICMA in Minute 319)";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" OR @"t" == @"Start Timestep";
    NOTES                "DEVELOPMENT NOTES<br>Fixed calculation of balance to omit the annual evaporation reduction if the Mead elevation is below 1025 feet per Minute 323 Section V.E.5. -ST 5/14/18<br><br>GCAA, 20181030: Mexico Shortage and Surplus.AnnualCreationMexicoWaterReserve slot added to replace refernce to ICMA, per Minute 323.<br><br>GCAA, 202006: Added SystemTaxAssesment function to replace reference to the scalar slot";
    BEGIN

      WITH_STATEMENT (NUMERIC WaterReserveBal = $ "Mexico Shortage and Surplus.Mexico Water Reserve Balance" [@"24:00:00 December 31, Previous Year"] - $ "Mexico Shortage and Surplus.AnnualDeliveryMexicoWaterReserve" [@"24:00:00 December 31, Current Year"] - $ "ICS Credits.AnnualCreationBiNat_AZ" [@"24:00:00 December 31, Current Year"] - $ "ICS Credits.AnnualCreationBiNat_CA" [@"24:00:00 December 31, Current Year"] - $ "ICS Credits.AnnualCreationBiNat_NV" [@"24:00:00 December 31, Current Year"] + $ "Mexico Shortage and Surplus.AnnualCreationMexicoWaterReserve" [@"24:00:00 December 31, Current Year"] * "SystemTaxAdjustment_DCP"(  )) DO
            $ "Mexico Shortage and Surplus.Mexico Water Reserve Balance" [@"24:00:00 December 31, Current Year"] := WaterReserveBal;

            WITH_STATEMENT (NUMERIC BWSCPcontribution = IF ( $ "ICS Credits.AnnualDCPContribution_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] > 0.00000000 "acre-feet" AND $ "Mead.Pool Elevation" [@"24:00:00 December Max DayOfMonth, Previous Year"] < $ "DCP.DCP_StartElevation" [] )
 THEN
  $ "Mexico Shortage and Surplus.Mexico Recoverable Water Savings_AnnualContribution" [@"24:00:00 December 31, Current Year"]
 ELSE
  0.00000000 "acre-ft"
 ENDIF) DO
            WITH_STATEMENT (NUMERIC RecoverableWaterPostTax = $ "Mexico Shortage and Surplus.Mexico Recoverable Water Savings Balance" [@"24:00:00 December 31, Previous Year"] + BWSCPcontribution * "SystemTaxAdjustment_DCP"(  ) - $ "Mexico Shortage and Surplus.AnnualDeliveryMXRecoverableWaterSavings" [@"24:00:00 December 31, Current Year"]) DO
            WITH_STATEMENT (NUMERIC RecoverableWaterPreTax = $ "Mexico Shortage and Surplus.Mexico Recoverable Water Savings Balance" [@"24:00:00 December 31, Previous Year"] + BWSCPcontribution - $ "Mexico Shortage and Surplus.AnnualDeliveryMXRecoverableWaterSavings" [@"24:00:00 December 31, Current Year"]) DO
            WITH_STATEMENT (NUMERIC CombinedMX = RecoverableWaterPostTax + WaterReserveBal) DO
            IF_STATEMENT (CombinedMX > $ "ICS Credits.Parameters" ["Mexico", "Max Capacity"]) THEN
            WITH_STATEMENT (NUMERIC Reduction = WaterReserveBal + RecoverableWaterPreTax - $ "ICS Credits.Parameters" ["Mexico", "Max Capacity"]) DO
            WITH_STATEMENT (NUMERIC CreationRecoverable = "Max"( BWSCPcontribution - Reduction, 0.00000000 "acre-ft" ) / "SystemTaxAdjustment_DCP"(  )) DO
            $ "Mexico Shortage and Surplus.AnnualBWSCP_SysWater" [@"24:00:00 December 31, Current Year"] := BWSCPcontribution - CreationRecoverable;

            $ "Mexico Shortage and Surplus.AnnualCreationMXRecoverableWaterSavings" [@"24:00:00 December 31, Current Year"] := CreationRecoverable;

            WITH_STATEMENT (NUMERIC RecoverableBalance = $ "Mexico Shortage and Surplus.Mexico Recoverable Water Savings Balance" [@"24:00:00 December 31, Previous Year"] + CreationRecoverable * "SystemTaxAdjustment_DCP"(  ) - $ "Mexico Shortage and Surplus.AnnualDeliveryMXRecoverableWaterSavings" [@"24:00:00 December 31, Current Year"]) DO
            $ "Mexico Shortage and Surplus.Mexico Recoverable Water Savings Balance" [@"24:00:00 December 31, Current Year"] := RecoverableBalance;

            $ "Mexico Shortage and Surplus.Total Combined MX Savings and Reserve" [@"24:00:00 December 31, Current Year"] := RecoverableBalance + WaterReserveBal;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      ELSE
            $ "Mexico Shortage and Surplus.AnnualBWSCP_SysWater" [@"24:00:00 December 31, Current Year"] := 0.00000000 "acre-feet";

            $ "Mexico Shortage and Surplus.AnnualCreationMXRecoverableWaterSavings" [@"24:00:00 December 31, Current Year"] := BWSCPcontribution;

            $ "Mexico Shortage and Surplus.Mexico Recoverable Water Savings Balance" [@"24:00:00 December 31, Current Year"] := RecoverableWaterPostTax;

            $ "Mexico Shortage and Surplus.Total Combined MX Savings and Reserve" [@"24:00:00 December 31, Current Year"] := CombinedMX;

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{f6c07d9a-4725-4e27-b55f-65e2bb33ad57}";;

    RULE                 "INT - CA Accounting";
    DESCRIPTION          "11/28/18, AJP: Rule changed from previous 24 MS. CA ICS slots now set via list from function ICSAccountingforCA. All slots are solved in the function.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" OR @"t" == @"Start Timestep";
    NOTES                "DEVELOPMETN NOTES<br>Fixed calculation of Extraordinary Conservation ICS to omit the annual evaporation reduction if the current year is a Shortage -ST 5/14/18 <br><br>GCAA, 202006: Added SystemTaxAssesment funtion to replace reference to the scalar slot";
    BEGIN

      WITH_STATEMENT (LIST caICSvalues = "ICSAccountingForCA"(  )) DO
            $ "DCP Flags.CA Accounting Check" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000;

            $ "ICS Credits.AnnualCreationBiNat_CA" ["Dec31ofYear"( @"t" )] := GET @INDEX 0.00000000 FROM caICSvalues;

            $ "ICS Credits.AnnualDeliveryBiNat_CA" ["Dec31ofYear"( @"t" )] := GET @INDEX 1.00000000 FROM caICSvalues;

            $ "ICS Credits.BiNationalICS_MWD" ["Dec31ofYear"( @"t" )] := GET @INDEX 2.00000000 FROM caICSvalues;

            $ "ICS Credits.BiNationalICS_IID" ["Dec31ofYear"( @"t" )] := GET @INDEX 3.00000000 FROM caICSvalues;

            $ "ICS Credits.BiNationalICS_CA" ["Dec31ofYear"( @"t" )] := GET @INDEX 4.00000000 FROM caICSvalues;

            $ "ICS Credits.AnnualCreationEC_IID" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 5.00000000 FROM caICSvalues;

            $ "ICS Credits.AnnualDeliveryEC_CA" ["Dec31ofYear"( @"t" )] := GET @INDEX 7.00000000 FROM caICSvalues;

            $ "ICS Credits.ExtraordinaryConservationICS_IID" ["Dec31ofYear"( @"t" )] := GET @INDEX 9.00000000 FROM caICSvalues;

            $ "ICS Credits.AnnualCreationSysEff_CA" ["Dec31ofYear"( @"t" )] := GET @INDEX 11.00000000 FROM caICSvalues;

            $ "ICS Credits.AnnualDeliverySysEff_CA" ["Dec31ofYear"( @"t" )] := GET @INDEX 12.00000000 FROM caICSvalues;

            $ "ICS Credits.SystemEfficiencyICS_MWD" ["Dec31ofYear"( @"t" )] := GET @INDEX 13.00000000 FROM caICSvalues;

            $ "ICS Credits.SystemEfficiencyICS_CA" ["Dec31ofYear"( @"t" )] := GET @INDEX 14.00000000 FROM caICSvalues;

            $ "ICS Credits.AnnualDeliveryDCP_CA" ["Dec31ofYear"( @"t" )] := GET @INDEX 16.00000000 FROM caICSvalues;

            $ "ICS Credits.TotalICS_IID" ["Dec31ofYear"( @"t" )] := GET @INDEX 19.00000000 FROM caICSvalues;

            WITH_STATEMENT (NUMERIC Bank = GET @INDEX 22.00000000 FROM caICSvalues) DO
          DESCRIPTION          "Adjust DCP ICS balances to below bank. If there is still excess ICS, SysEff, BiNat and ECICS <br>creation/deliveries need to be adjusted manually.   <br>";
      IF_STATEMENT ("RoundToFactor"( Bank, 1.00000000 "acre-ft" ) > $ "ICS Credits.Parameters" ["California", "Max Capacity"]) THEN
            WITH_STATEMENT (NUMERIC TotalReduction = Bank - $ "ICS Credits.Parameters" ["California", "Max Capacity"]) DO
            WITH_STATEMENT (LIST ReductionAmount = FOR ( NUMERIC CategoryBalance IN { $ "ICS Credits.AnnualSimultaneousCreationDCPICS_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] , $ "ICS Credits.AnnualConversionCurrentECtoDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] } ) WITH LIST result = {  } DO
  WITH NUMERIC RemainingBalance = IF ( ( LENGTH result ) == 0.00000000 )
  THEN
   TotalReduction
  ELSE
   TotalReduction - "Sum"( result )
  ENDIF DO
   WITH NUMERIC Amount = "Min"( RemainingBalance, CategoryBalance ) DO
    APPEND Amount ONTO result
   ENDWITH
  ENDWITH
 ENDFOR) DO
          DESCRIPTION          "Coachella is a sub account under MWD. MWD takes care of the CA DCP contribution. Coachella <br>will leave the 7% contribution on the system for MWD. These slots are used to determine <br>whether MWD will be creating ICS (leaving the water in Mead) or taking additional diversion. <br>Under this scenario, the CA bank is full with MWD meeting the CA DCP contribution, MWD will <br>take all water left on the system as addition diversion.  <br>";
      $ "ICS Credits.AnnualDCPWater_Coachella_Diverted" ["Dec31ofYear"( @"t" )] := $ "ICS Credits.AnnualDCPContribution_Coachella" ["Dec31ofYear"( @"t" )];

            $ "ICS Credits.AnnualICSCreationDCP_Coachella" ["Dec31ofYear"( @"t" )] := 0.00000000 "acre-ft";

            $ "ICS Credits.AnnualCreationEC_CA" ["Dec31ofYear"( @"t" )] := GET @INDEX 6.00000000 FROM caICSvalues;

            $ "ICS Credits.ExtraordinaryConservationICS_MWD" ["Dec31ofYear"( @"t" )] := GET @INDEX 8.00000000 FROM caICSvalues;

            $ "ICS Credits.ExtraordinaryConservationICS_CA" ["Dec31ofYear"( @"t" )] := GET @INDEX 10.00000000 FROM caICSvalues;

            $ "ICS Credits.AnnualCreationDCP_CA" ["Dec31ofYear"( @"t" )] := ( GET @INDEX 15.00000000 FROM caICSvalues ) - "Sum"( ReductionAmount );

            $ "ICS Credits.DCPICS_MWD" ["Dec31ofYear"( @"t" )] := ( GET @INDEX 17.00000000 FROM caICSvalues ) - "Sum"( ReductionAmount );

            $ "ICS Credits.DCPICS_CA" ["Dec31ofYear"( @"t" )] := ( GET @INDEX 18.00000000 FROM caICSvalues ) - "Sum"( ReductionAmount );

            $ "ICS Credits.TotalICS_MWD" ["Dec31ofYear"( @"t" )] := ( GET @INDEX 20.00000000 FROM caICSvalues ) - "Sum"( ReductionAmount );

            $ "ICS Credits.TotalICS_CA" ["Dec31ofYear"( @"t" )] := ( GET @INDEX 21.00000000 FROM caICSvalues ) - "Sum"( ReductionAmount );

            $ "ICS Credits.Bank_CA" ["Dec31ofYear"( @"t" )] := Bank - "Sum"( ReductionAmount );

            $ "ICS Credits.AnnualCreationDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := $ "ICS Credits.AnnualCreationDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] - "Sum"( ReductionAmount );

            $ "ICS Credits.AnnualConversionECtoDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := $ "ICS Credits.AnnualConversionECtoDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] - GET @INDEX 1.00000000 FROM ReductionAmount;

            $ "ICS Credits.AnnualConversionCurrentECtoDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := $ "ICS Credits.AnnualConversionCurrentECtoDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] - GET @INDEX 1.00000000 FROM ReductionAmount;

            $ "ICS Credits.AnnualSimultaneousCreationDCPICS_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := $ "ICS Credits.AnnualSimultaneousCreationDCPICS_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] - GET @INDEX 0.00000000 FROM ReductionAmount;

            $ "ICS Credits.AnnualSysWaterforDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := "Sum"( ReductionAmount );

      END_WITH_STATEMENT;

            IF_STATEMENT (TotalReduction > $ "ICS Credits.AnnualConversionCurrentECtoDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] + $ "ICS Credits.AnnualSimultaneousCreationDCPICS_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"]) THEN
            $ "DCP Flags.CA Accounting Check" [@"24:00:00 December Max DayOfMonth, Current Year"] := 1.00000000;

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

      ELSE
          DESCRIPTION          "This section of logic calculates what to do with the additional water left on the system for MWD <br>by Coachella in a DCP scenario <br>";
      WITH_STATEMENT (NUMERIC AvailableBankSpace = $ "ICS Credits.Parameters" ["California", "Max Capacity"] - Bank) DO
          DESCRIPTION          "MWD will use the water left on the system by Coachella as diversion to replace the water needed <br>to meet DCP for simultaneous creation. This value is prior to the system assessment.    <br>";
      WITH_STATEMENT (NUMERIC ReplaceSchedtoECtoDCP = "Min"( $ "ICS Credits.AnnualSimultaneousCreationDCPICS_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] / "SystemTaxAdjustment_DCP"(  ), $ "ICS Credits.AnnualDCPContribution_Coachella" [@"24:00:00 December Max DayOfMonth, Current Year"] )) DO
          DESCRIPTION          "Amount of water left on the system by Coachella for MWD to take as additional diversion which is <br>over the bank. This value is prior to the system assessment.<br>";
      WITH_STATEMENT (NUMERIC CoachellaWaterOverBank = "Max"( $ "ICS Credits.AnnualDCPContribution_Coachella" [@"24:00:00 December Max DayOfMonth, Current Year"] - ReplaceSchedtoECtoDCP - AvailableBankSpace / "SystemTaxAdjustment_DCP"(  ), 0.00000000 "acre-ft" )) DO
          DESCRIPTION          "Amount of water left on the system that MWD will leave in Mead as additional EC ICS creation. <br>This value is post system assessment.  <br>";
      WITH_STATEMENT (NUMERIC CoachellaICSforMWD = "Min"( AvailableBankSpace, ( $ "ICS Credits.AnnualDCPContribution_Coachella" [@"24:00:00 December Max DayOfMonth, Current Year"] - ReplaceSchedtoECtoDCP - CoachellaWaterOverBank ) * "SystemTaxAdjustment_DCP"(  ) )) DO
            $ "ICS Credits.AnnualDCPWater_Coachella_Diverted" ["Dec31ofYear"( @"t" )] := ReplaceSchedtoECtoDCP + CoachellaWaterOverBank;

            $ "ICS Credits.AnnualICSCreationDCP_Coachella" ["Dec31ofYear"( @"t" )] := CoachellaICSforMWD;

            $ "ICS Credits.AnnualCreationEC_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := $ "ICS Credits.AnnualCreationEC_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] + CoachellaICSforMWD / "SystemTaxAdjustment_DCP"(  );

            $ "ICS Credits.AnnualCreationEC_CA" ["Dec31ofYear"( @"t" )] := ( GET @INDEX 6.00000000 FROM caICSvalues ) + CoachellaICSforMWD / "SystemTaxAdjustment_DCP"(  );

            $ "ICS Credits.ExtraordinaryConservationICS_MWD" ["Dec31ofYear"( @"t" )] := ( GET @INDEX 8.00000000 FROM caICSvalues ) + CoachellaICSforMWD;

            $ "ICS Credits.ExtraordinaryConservationICS_CA" ["Dec31ofYear"( @"t" )] := ( GET @INDEX 10.00000000 FROM caICSvalues ) + CoachellaICSforMWD;

            $ "ICS Credits.AnnualCreationDCP_CA" ["Dec31ofYear"( @"t" )] := GET @INDEX 15.00000000 FROM caICSvalues;

            $ "ICS Credits.DCPICS_MWD" ["Dec31ofYear"( @"t" )] := GET @INDEX 17.00000000 FROM caICSvalues;

            $ "ICS Credits.DCPICS_CA" ["Dec31ofYear"( @"t" )] := GET @INDEX 18.00000000 FROM caICSvalues;

            $ "ICS Credits.TotalICS_MWD" ["Dec31ofYear"( @"t" )] := ( GET @INDEX 20.00000000 FROM caICSvalues ) + CoachellaICSforMWD;

            $ "ICS Credits.TotalICS_CA" ["Dec31ofYear"( @"t" )] := ( GET @INDEX 21.00000000 FROM caICSvalues ) + CoachellaICSforMWD;

            $ "ICS Credits.Bank_CA" ["Dec31ofYear"( @"t" )] := Bank + CoachellaICSforMWD;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{4e7c0221-e21e-40a4-8cec-d597b5695a6e}";;

    RULE                 "INT - CA ICS Delivery";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( @"t" == @"24:00:00 January Max DayOfMonth, Current Year" OR @"t" == @"Start Timestep" );
    NOTES                "";
    BEGIN

      WITH_STATEMENT (NUMERIC AnnualDelivery = "ICSDeliveryReduction"( $ "ICS Credits.AnnualICSDelivery_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"], "California", "Max Delivery", $ "ICS Credits.AnnualConversionECtoDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] )) DO
            WITH_STATEMENT (LIST DeliveryChargedList = FOR ( NUMERIC CategoryBalance IN { $ "ICS Credits.DCPICS_MWD" [@"24:00:00 December Max DayOfMonth, Previous Year"] , "Min"( $ "ICS Credits.ExtraordinaryConservationICS_MWD" [@"24:00:00 December Max DayOfMonth, Previous Year"] - $ "ICS Credits.AnnualConversionECtoDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] + "Current Year EC ICS Creation"( $ "ICS Credits.AnnualCreationEC_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"], $ "ICS Credits.AnnualDeliveryEC_MWD" [@"24:00:00 December Max DayOfMonth, Previous Year"], "California" ), $ "ICS Credits.Parameters" ["California", "Max Delivery"] ) , $ "ICS Credits.SystemEfficiencyICS_MWD" [@"24:00:00 December Max DayOfMonth, Previous Year"] , $ "ICS Credits.BiNationalICS_MWD" [@"24:00:00 December Max DayOfMonth, Previous Year"] } ) WITH LIST result = {  } DO
  WITH NUMERIC RemainingBalance = IF ( ( LENGTH result ) == 0.00000000 )
  THEN
   AnnualDelivery
  ELSE
   AnnualDelivery - "Sum"( result )
  ENDIF DO
   WITH NUMERIC DeliveryAmount = IF ( ( LENGTH result ) == 0.00000000 AND $ "Mead.Pool Elevation" [@"24:00:00 December Max DayOfMonth, Previous Year"] < $ "DCP.RecoveryElevation" [] )
   THEN
    0.00000000 "acre-ft"
   ELSE
    "Min"( RemainingBalance, CategoryBalance )
   ENDIF DO
    APPEND DeliveryAmount ONTO result
   ENDWITH
  ENDWITH
 ENDFOR) DO
            $ "ICS Credits.AnnualDeliveryDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 0.00000000 FROM DeliveryChargedList;

            $ "ICS Credits.AnnualDeliveryEC_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 1.00000000 FROM DeliveryChargedList;

            $ "ICS Credits.AnnualDeliverySysEff_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 2.00000000 FROM DeliveryChargedList;

            $ "ICS Credits.AnnualDeliveryBiNat_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 3.00000000 FROM DeliveryChargedList;

            $ "ICS Credits.RequestedNotDelivered_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := $ "ICS Credits.AnnualICSDelivery_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] - "Sum"( DeliveryChargedList );

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{69e1effe-a025-434e-96f6-9c1ed93f63ca}";;

    RULE                 "INT - AZ Sched Adjust for ICS (non DCP)";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND @"t" != @"Start Timestep" );
    NOTES                "";
    BEGIN

    DESCRIPTION          "This rule is merged into the AZ Delivery adjustment rule in MTOM <br>";
      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            $ "CAPDiversion.Total Diversion Requested" [date] := $ "CAPDiversion.Total Diversion Requested" [date] + "VolumeToFlow"( $ "ICS Credits.AnnualICSDelivery_CAWCD" [@"24:00:00 December Max DayOfMonth, Current Year"] + $ "ICS Credits.AnnualDeliveryDCP_CAWCD" [@"24:00:00 December Max DayOfMonth, Current Year"] - $ "ICS Credits.RequestedNotDelivered_CAWCD" [@"24:00:00 December Max DayOfMonth, Current Year"] - $ "ICS Credits.AnnualCreationEC_CAWCD" [@"24:00:00 December Max DayOfMonth, Current Year"], date ) * ( $ "CAPDiversion.Total Diversion Requested" [date] / "SumSlot"( $ "CAPDiversion.Total Diversion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) );

      ENDFOREACH;

    END
    UUID "{7f2fc4db-9a2a-44c9-99cf-caccd2445627}";;

    RULE                 "INT - AZ Accounting";
    DESCRIPTION          "Computes CAP's end of year ICS balances per the 2007 Interim Guidelines";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" OR @"t" == @"Start Timestep";
    NOTES                "DEVELOPMENT NOTES<br>Fixed calculation of Extraordinary Conservation ICS to omit the annual evaporation reduction if the current year is a Shortage -ST 5/14/18 <br>";
    BEGIN

    DESCRIPTION          "The AZ ICS/Accounting logic was completely rewritten during integration to be similar in logic to <br>the other users from the MTOM ruleset <br>";
      WITH_STATEMENT (LIST azICSvalues = "ICSAccountingForAZ"(  )) DO
            $ "DCP Flags.AZ Accounting Check" [@"24:00:00 December 31, Current Year"] := 0.00000000;

            $ "ICS Credits.AnnualCreationSysEff_AZ" [@"24:00:00 December 31, Current Year"] := GET @INDEX 0.00000000 FROM azICSvalues;

            $ "ICS Credits.AnnualCreationEC_AZ" [@"24:00:00 December 31, Current Year"] := GET @INDEX 1.00000000 FROM azICSvalues;

            $ "ICS Credits.AnnualCreationBiNat_AZ" [@"24:00:00 December 31, Current Year"] := GET @INDEX 2.00000000 FROM azICSvalues;

            $ "ICS Credits.AnnualCreationDCP_AZ" [@"24:00:00 December 31, Current Year"] := GET @INDEX 3.00000000 FROM azICSvalues;

            $ "ICS Credits.AnnualDeliverySysEff_AZ" [@"24:00:00 December 31, Current Year"] := GET @INDEX 4.00000000 FROM azICSvalues;

            $ "ICS Credits.AnnualDeliveryEC_AZ" [@"24:00:00 December 31, Current Year"] := GET @INDEX 5.00000000 FROM azICSvalues;

            $ "ICS Credits.AnnualDeliveryBiNat_AZ" [@"24:00:00 December 31, Current Year"] := GET @INDEX 6.00000000 FROM azICSvalues;

            $ "ICS Credits.AnnualDeliveryDCP_AZ" [@"24:00:00 December 31, Current Year"] := GET @INDEX 7.00000000 FROM azICSvalues;

            $ "ICS Credits.ExtraordinaryConservationICS_CRIT" [@"24:00:00 December 31, Current Year"] := GET @INDEX 8.00000000 FROM azICSvalues;

            $ "ICS Credits.ExtraordinaryConservationICS_GRIC" [@"24:00:00 December 31, Current Year"] := GET @INDEX 9.00000000 FROM azICSvalues;

            $ "ICS Credits.ExtraordinaryConservationICS_CAWCD" [@"24:00:00 December 31, Current Year"] := GET @INDEX 10.00000000 FROM azICSvalues;

            $ "ICS Credits.ExtraordinaryConservationICS_MVIDD" [@"24:00:00 December 31, Current Year"] := GET @INDEX 11.00000000 FROM azICSvalues;

            $ "ICS Credits.ExtraordinaryConservationICS_WM" [@"24:00:00 December 31, Current Year"] := GET @INDEX 12.00000000 FROM azICSvalues;

            $ "ICS Credits.BiNationalICS_CAWCD" [@"24:00:00 December 31, Current Year"] := GET @INDEX 13.00000000 FROM azICSvalues;

            $ "ICS Credits.SystemEfficiencyICS_CAWCD" [@"24:00:00 December 31, Current Year"] := GET @INDEX 14.00000000 FROM azICSvalues;

            $ "ICS Credits.DCPICS_CAWCD" [@"24:00:00 December 31, Current Year"] := GET @INDEX 15.00000000 FROM azICSvalues;

            $ "ICS Credits.TotalICS_CAWCD" [@"24:00:00 December 31, Current Year"] := GET @INDEX 16.00000000 FROM azICSvalues;

            $ "ICS Credits.SystemEfficiencyICS_AZ" [@"24:00:00 December 31, Current Year"] := GET @INDEX 17.00000000 FROM azICSvalues;

            $ "ICS Credits.ExtraordinaryConservationICS_AZ" [@"24:00:00 December 31, Current Year"] := GET @INDEX 18.00000000 FROM azICSvalues;

            $ "ICS Credits.BiNationalICS_AZ" [@"24:00:00 December 31, Current Year"] := GET @INDEX 19.00000000 FROM azICSvalues;

            $ "ICS Credits.DCPICS_AZ" [@"24:00:00 December 31, Current Year"] := GET @INDEX 20.00000000 FROM azICSvalues;

            $ "ICS Credits.Bank_AZ" [@"24:00:00 December 31, Current Year"] := GET @INDEX 21.00000000 FROM azICSvalues;

            $ "ICS Credits.TotalICS_AZ" [@"24:00:00 December 31, Current Year"] := GET @INDEX 22.00000000 FROM azICSvalues;

          DESCRIPTION          "Balance Check<br><br>Since AZ does not create DCP ICS, all ICS creation values are manually entered. If the bank is <br>above the maximum, print an error message to adjust the ICS creation/delivery values for AZ   <br>";
      IF_STATEMENT ("RoundToFactor"( GET @INDEX 21.00000000 FROM azICSvalues, 1.00000000 "acre-ft" ) > $ "ICS Credits.Parameters" ["Arizona", "Max Capacity"]) THEN
            $ "DCP Flags.AZ Accounting Check" [@"24:00:00 December 31, Current Year"] := 1.00000000;

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{a3e63167-70bb-4d03-b4c7-ddd060215f18}";;

    RULE                 "INT - AZ ICS Delivery";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( @"t" == @"24:00:00 January Max DayOfMonth, Current Year" OR @"t" == @"Start Timestep" );
    NOTES                "";
    BEGIN

      WITH_STATEMENT (NUMERIC AnnualDelivery = "ICSDeliveryReduction"( "Min"( "Min"( "CAWCD Requested ICS"(  ), "CAWCD Available Canal Space"(  ) ), $ "ICS Credits.TotalICS_CAWCD" [@"24:00:00 December Max DayOfMonth, Previous Year"] ), "Arizona", "Max Delivery", NaNToZero ( $ "ICS Credits.AnnualCreationDCP_CAWCD" [@"24:00:00 December Max DayOfMonth, Current Year"] ) )) DO
            WITH_STATEMENT (LIST DeliveryChargedList = FOR ( NUMERIC CategoryBalance IN { $ "ICS Credits.DCPICS_CAWCD" [@"24:00:00 December Max DayOfMonth, Previous Year"] , "Min"( ( $ "ICS Credits.ExtraordinaryConservationICS_CAWCD" [@"24:00:00 December Max DayOfMonth, Previous Year"] + "Current Year EC ICS Creation"( $ "ICS Credits.AnnualCreationEC_CAWCD" [@"24:00:00 December 31, Current Year"], $ "ICS Credits.AnnualDeliveryEC_CAWCD" [@"24:00:00 December 31, Previous Year"], "Arizona" ) ), $ "ICS Credits.Parameters" ["Arizona", "Max Delivery"] ) COMMENTED_BY "LC CHECK<br><br>IS this needed? Under what scenario will they need to try to take delivery of any Current Year EC <br>ICS creation? <br>" , $ "ICS Credits.BiNationalICS_CAWCD" [@"24:00:00 December Max DayOfMonth, Previous Year"] , $ "ICS Credits.SystemEfficiencyICS_CAWCD" [@"24:00:00 December Max DayOfMonth, Previous Year"] } ) WITH LIST result = {  } DO
  WITH NUMERIC RemainingBalance = IF ( ( LENGTH result ) == 0.00000000 )
  THEN
   AnnualDelivery
  ELSE
   AnnualDelivery - "Sum"( result )
  ENDIF DO
   WITH NUMERIC DeliveryAmount = IF ( ( ( LENGTH result ) == 0.00000000 AND $ "Mead.Pool Elevation" [@"24:00:00 December Max DayOfMonth, Previous Year"] < $ "DCP.RecoveryElevation" [] ) COMMENTED_BY "Don't take DCP ICS if the Mead elevation is below the recovery elevation of 1110 <br>" )
   THEN
    0.00000000 "acre-ft"
   ELSE
    "Min"( RemainingBalance, CategoryBalance )
   ENDIF DO
    APPEND DeliveryAmount ONTO result
   ENDWITH
  ENDWITH
 ENDFOR) DO
            $ "ICS Credits.AnnualDeliveryDCP_CAWCD" [@"24:00:00 December 31, Current Year"] := GET @INDEX 0.00000000 FROM DeliveryChargedList;

            $ "ICS Credits.AnnualDeliveryEC_CAWCD" [@"24:00:00 December 31, Current Year"] := GET @INDEX 1.00000000 FROM DeliveryChargedList;

            $ "ICS Credits.AnnualDeliveryBiNat_CAWCD" [@"24:00:00 December 31, Current Year"] := GET @INDEX 2.00000000 FROM DeliveryChargedList;

            $ "ICS Credits.AnnualDeliverySysEff_CAWCD" [@"24:00:00 December 31, Current Year"] := GET @INDEX 3.00000000 FROM DeliveryChargedList;

            $ "ICS Credits.RequestedNotDelivered_CAWCD" [@"24:00:00 December 31, Current Year"] := "CAWCD Requested ICS"(  ) - "Sum"( DeliveryChargedList );

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{ac7b414f-3c0e-492c-aad9-0f181d4ef8dc}";;

    RULE                 "INT - NV Accounting";
    DESCRIPTION          "Computes SNWA's end of year ICS balances per the 2007 Interim Guidelines";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" OR @"t" == @"Start Timestep";
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>ST, 5/14/18:  Fixed calculation of Extraordinary Conservation ICS as follows: (1)  omit annual evaporation reduction if the current year is a Shortage; and (2) include the transfer of Tributary and Imported ICS in the evaporation reduction when in non-shortage<br><br>AP, 7/10/19: Incorporation of DCP into 24 MS logic<br>";
    BEGIN

      WITH_STATEMENT (LIST ICSAccounting = "ICSAccountingForNV"(  )) DO
            $ "DCP Flags.NV Accounting Check" [@"24:00:00 December 31, Current Year"] := 0.00000000;

            $ "ICS Credits.SystemEfficiencyICS_NV" [@"24:00:00 December 31, Current Year"] := GET @INDEX 0.00000000 FROM ICSAccounting;

            $ "ICS Credits.ExtraordinaryConservationICS_NV" [@"24:00:00 December 31, Current Year"] := GET @INDEX 1.00000000 FROM ICSAccounting;

            $ "ICS Credits.BiNationalICS_NV" [@"24:00:00 December 31, Current Year"] := GET @INDEX 2.00000000 FROM ICSAccounting;

            $ "ICS Credits.ImportedICS_NV" [@"24:00:00 December 31, Current Year"] := GET @INDEX 3.00000000 FROM ICSAccounting;

            $ "ICS Credits.TributaryICS_NV" [@"24:00:00 December 31, Current Year"] := GET @INDEX 4.00000000 FROM ICSAccounting;

            IF_STATEMENT ("RoundToFactor"( ( GET @INDEX 6.00000000 FROM ICSAccounting ), 1.00000000 "acre-ft" ) COMMENTED_BY "<6> = NV Bank = EC + BiNat + DCP ICS  <br>" > $ "ICS Credits.Parameters" ["Nevada", "Max Capacity"]) THEN
          DESCRIPTION          "If the bank is full, this rule will reduce the DCP ICS created for that year and convert the correct <br>amount to system water. This rule only reduces DCP ICS balance to produce system water since <br>all other ICS creation is manually input. If there is still more ICS in the bank than allowed and <br>error notice will be printed.   <br>";
      WITH_STATEMENT (NUMERIC TotalReduction = ( GET @INDEX 6.00000000 FROM ICSAccounting ) - $ "ICS Credits.Parameters" ["Nevada", "Max Capacity"]) DO
            WITH_STATEMENT (LIST CreationReduction = FOR ( NUMERIC CreationBalance IN { $ "ICS Credits.AnnualSimultaneousCreationDCPICS_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] , $ "ICS Credits.AnnualConversionCurrentECtoDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] } ) WITH LIST result = {  } DO
  WITH NUMERIC RemainingBalance = IF ( ( LENGTH result ) == 0.00000000 )
  THEN
   TotalReduction
  ELSE
   TotalReduction - "Sum"( result )
  ENDIF DO
   WITH NUMERIC ReductionAmount = "Min"( RemainingBalance, CreationBalance ) DO
    APPEND ReductionAmount ONTO result
   ENDWITH
  ENDWITH
 ENDFOR) DO
            $ "ICS Credits.AnnualSimultaneousCreationDCPICS_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := $ "ICS Credits.AnnualSimultaneousCreationDCPICS_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] - GET @INDEX 0.00000000 FROM CreationReduction;

            $ "ICS Credits.AnnualConversionCurrentECtoDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := $ "ICS Credits.AnnualConversionCurrentECtoDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] - GET @INDEX 1.00000000 FROM CreationReduction;

            $ "ICS Credits.AnnualSysWaterforDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := "Sum"( CreationReduction );

            $ "ICS Credits.AnnualCreationDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := $ "ICS Credits.AnnualCreationDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] - "Sum"( CreationReduction );

            $ "ICS Credits.TotalICS_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := ( ( GET @INDEX 7.00000000 FROM ICSAccounting ) - "Sum"( CreationReduction ) );

          DESCRIPTION          "Set DCP ICS Balance if the bank is full<br>";
      $ "ICS Credits.DCPICS_NV" [@"24:00:00 December 31, Current Year"] := "Max"( ( GET @INDEX 5.00000000 FROM ICSAccounting ) - "Sum"( CreationReduction ), 0.00000000 "acre-feet" );

            $ "ICS Credits.Bank_NV" [@"24:00:00 December 31, Current Year"] := ( GET @INDEX 6.00000000 FROM ICSAccounting ) - "Sum"( CreationReduction );

            $ "ICS Credits.TotalICS_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := ( GET @INDEX 7.00000000 FROM ICSAccounting ) - "Sum"( CreationReduction );

      END_WITH_STATEMENT;

            IF_STATEMENT (TotalReduction > $ "ICS Credits.AnnualSimultaneousCreationDCPICS_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] + $ "ICS Credits.AnnualConversionCurrentECtoDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"]) THEN
            $ "DCP Flags.NV Accounting Check" [@"24:00:00 December 31, Current Year"] := 1.00000000;

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

      ELSE
            $ "ICS Credits.DCPICS_NV" [@"24:00:00 December 31, Current Year"] := GET @INDEX 5.00000000 FROM ICSAccounting;

            $ "ICS Credits.Bank_NV" [@"24:00:00 December 31, Current Year"] := GET @INDEX 6.00000000 FROM ICSAccounting;

            $ "ICS Credits.TotalICS_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 7.00000000 FROM ICSAccounting;

            $ "ICS Credits.AnnualSysWaterforDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-feet";

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{92b8ecd8-6582-4860-84b8-1668d07d8096}";;

    RULE                 "INT - NV ICS Delivery";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( @"t" == @"24:00:00 January Max DayOfMonth, Current Year" OR @"t" == @"Start Timestep" );
    NOTES                "GCAA, 202006: Added SystemTaxAssesment funtion to replace reference to the scalar slot";
    BEGIN

      WITH_STATEMENT (NUMERIC AnnualDelivery = "ICSDeliveryReduction"( $ "ICS Credits.AnnualICSDelivery_NV" [@"24:00:00 December 31, Current Year"], "Nevada", "Max Delivery", NaNToZero ( $ "ICS Credits.AnnualConversionECtoDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] ) )) DO
            WITH_STATEMENT (LIST DeliveryChargedList = FOR ( NUMERIC CategoryBalance IN { $ "ICS Credits.DCPICS_NV" [@"24:00:00 December 31, Previous Year"] , "Min"( ( $ "ICS Credits.ExtraordinaryConservationICS_NV" [@"24:00:00 December 31, Previous Year"] - NaNToZero ( $ "ICS Credits.AnnualConversionECtoDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] ) ) + "Current Year EC ICS Creation"( $ "ICS Credits.AnnualCreationEC_NV" [@"24:00:00 December 31, Current Year"], $ "ICS Credits.AnnualDeliveryEC_NV" [@"24:00:00 December 31, Previous Year"], "Nevada" ), $ "ICS Credits.Parameters" ["Nevada", "Max Delivery"] ) , $ "ICS Credits.AnnualCreationTrib_NV" [@"24:00:00 December 31, Current Year"] * "SystemTaxAdjustment_DCP"(  ) , $ "ICS Credits.SystemEfficiencyICS_NV" [@"24:00:00 December 31, Previous Year"] , $ "ICS Credits.BiNationalICS_NV" [@"24:00:00 December 31, Previous Year"] } ) WITH LIST result = {  } DO
  WITH NUMERIC RemainingBalance = IF ( ( LENGTH result ) == 0.00000000 )
  THEN
   AnnualDelivery
  ELSE
   AnnualDelivery - "Sum"( result )
  ENDIF DO
   WITH NUMERIC DeliveryAmount = IF ( ( ( LENGTH result ) == 0.00000000 AND $ "Mead.Pool Elevation" [@"24:00:00 December Max DayOfMonth, Previous Year"] < $ "DCP.RecoveryElevation" [] ) COMMENTED_BY "Don't take DCP ICS if the Mead elevation is below the recovery elevation of 1110 <br>" )
   THEN
    0.00000000 "acre-ft"
   ELSE
    "Min"( RemainingBalance, CategoryBalance )
   ENDIF DO
    APPEND DeliveryAmount ONTO result
   ENDWITH
  ENDWITH
 ENDFOR) DO
            $ "ICS Credits.AnnualDeliveryDCP_NV" [@"24:00:00 December 31, Current Year"] := GET @INDEX 0.00000000 FROM DeliveryChargedList;

            $ "ICS Credits.AnnualDeliveryEC_NV" [@"24:00:00 December 31, Current Year"] := GET @INDEX 1.00000000 FROM DeliveryChargedList;

            $ "ICS Credits.AnnualDeliveryTrib_NV" [@"24:00:00 December 31, Current Year"] := GET @INDEX 2.00000000 FROM DeliveryChargedList;

            $ "ICS Credits.AnnualDeliverySysEff_NV" [@"24:00:00 December 31, Current Year"] := GET @INDEX 3.00000000 FROM DeliveryChargedList;

            $ "ICS Credits.AnnualDeliveryBiNat_NV" [@"24:00:00 December 31, Current Year"] := GET @INDEX 4.00000000 FROM DeliveryChargedList;

            $ "ICS Credits.RequestedNotDelivered_NV" [@"24:00:00 December 31, Current Year"] := $ "ICS Credits.AnnualICSDelivery_NV" [@"24:00:00 December 31, Current Year"] - "Sum"( DeliveryChargedList );

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{6e185a2d-3b72-490c-8537-d01615b42cf0}";;

    RULE                 "INT - NV ICS Creation or Delivery";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( @"t" == @"24:00:00 January Max DayOfMonth, Current Year" OR @"t" == @"Start Timestep" );
    NOTES                "";
    BEGIN

    DESCRIPTION          "This rule determines Nevada ICS creation or delivery based on the annual apportionment <br>";
      WITH_STATEMENT (NUMERIC ICS = 300000.00000000 "acre-ft" - IF ( $ "Shortage.Shortage Flag" [@"24:00:00 December 31, Current Year"] > 0.00000000 )
 THEN
  $ "Shortage.State Shortage Volumes" [( $ "Shortage.Shortage Flag" ["Dec31ofYear"( @"t" )] ) - 1.00000000, "Nevada"]
 ELSE
  0.00000000 "acre-ft"
 ENDIF - $ "AnnualWaterUse.Nevada_Apportionment" [@"24:00:00 December Max DayOfMonth, Current Year"]) DO
            $ "ICS Credits.AnnualICSDelivery_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := "Min"( "Abs"( "Min"( ICS, 0.00000000 "acre-ft" ) ), $ "ICS Credits.Parameters" ["Nevada", "Max Delivery"] );

            $ "ICS Credits.AnnualCreationEC_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := "Min"( "Max"( ICS - $ "ICSProjectionData.NV_LeftinMead" [@"24:00:00 December Max DayOfMonth, Current Year"], 0.00000000 "acre-ft" ), $ "ICS Credits.Parameters" ["Nevada", "Max Creation"] );

      END_WITH_STATEMENT;

    END
    UUID "{6b38c8ec-62c1-4d2e-af66-e5a846c7f256}";;

  END
  UUID "{5213c2db-b671-431e-9d4c-e434fe0982a0}";;

  POLICY_GROUP   "LB Surplus";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "NI - Quantified Surplus Schedules Data Volume to Simulation Flow";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND IsNaN $ "Surplus.Surplus Flag" [] AND $ "Surplus.Quantified Surplus Volume" [@"24:00:00 December 31, Current Year"] > 0.00000000 "acre-feet";
    NOTES                "DEVELOPER NOTES:<br>GCAA, 20181030: ForecastUse.SNWPResetAnnualFC added to replace Nevada_CU_Forecast1.SNWP which was being incorrectly used to calculate the SNWP requested diversion<br>APivarnik, 202005: Added MWD depletion and CAP depletion slot assignments to help model solve for correct return flow to system (no returns for CAP/returns for MWD)<br>GCAA, 202006: Added SNWA Depletion slot assignment to help model solve for correct return flow to system";
    BEGIN

    DESCRIPTION          "No longer in integrated ruleset. this happens in the diversion adjustment rule in the integrated <br>ruleset<br>";
      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            $ "Surplus.Surplus Flag" [date] := 2.00000000;

            $ "Surplus.Quantified Surplus Flag" [date] := 1.00000000;

            $ "PumpingFromLakeMead:SNWP.Diversion Requested" [date] := IF ( $ "Surplus Total Annual Schedules.SNWA" [@"24:00:00 December 31, Current Year"] > $ "ForecastUse.SNWPResetAnnualFC" [@"24:00:00 December 31, Current Year"] )
 THEN
  "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "SNWA" ), date )
 ENDIF;

            $ "PumpingFromLakeMead:SNWP.Depletion Requested" [date] := IF ( $ "Surplus Total Annual Schedules.SNWA" [@"24:00:00 December 31, Current Year"] > $ "ForecastUse.SNWPResetAnnualFC" [@"24:00:00 December 31, Current Year"] )
 THEN
  "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "SNWA" ), date )
 ENDIF;

            $ "MWDDiversion:MWD.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "MWD" ), date );

            $ "MWDDiversion:MWD.Depletion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "MWD" ), date ) - "VolumeToFlow"( $ "California_CU_Schedules.MWDReturns" [date], date ) - "VolumeToFlow"( $ "Mexico_CU_Schedules.MexicoTJ" [date], date );

            $ "AAC:Coachella.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "Coachella" ), date );

            $ "AAC:IID.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "IID" ), date );

            $ "OthersBlwImp:AzPumpersBlwImp.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "AzPumpersBlwImp" ), date );

            $ "GilaAndYumaUsers:GilaMonsterFarms.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "Gila Monster Farms" ), date );

            $ "AzPkrToImp:CibolaValleyIID.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "CibolaValleyIID" ), date );

            $ "AzPkrToImp:Parker.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "City of Parker" ), date );

            $ "CAPDiversion.Total Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "CAP" ), date );

            $ "CAPDiversion.Total Depletion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "CAP" ), date );

      ENDFOREACH;

    END
    UUID "{12c609cb-88c2-4d61-ad76-1565d99f0525}";;

    RULE                 "NI - Domestic Surplus Schedules Data Volume to Simulation Flow";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT $ "Mead.Pool Elevation" [@"24:00:00 December 31, Previous Year"] >= $ "Surplus.Domestic Surplus Trigger Elevation" [] AND IsNaN $ "Surplus.Surplus Flag" [];
    NOTES                "DEVELOPER NOTES<br><br>GCAA, 20181030: ForecastUse.CAPResetAnnualFC and ForecastUse.SNWPResetAnnualFC added to replace Nevada_CU_Forecast1.SNWP and Arizona_CU_Forecasr1.CAP which were incorrectly used to calculate the total diversion requested for CAP and SNWP<br>APivarnik, 202005: Added MWD depletion and CAP depletion slot assignments to help model solve for correct return flow to system (no returns for CAP/returns for MWD)<br>GCAA, 202006: Added SNWA Depletion slot assignment to help model solve for correct return flow to system";
    BEGIN

    DESCRIPTION          "No longer in integrated ruleset. this happens in the diversion adjustment rule in the integrated <br>ruleset<br>";
      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            $ "Surplus.Surplus Flag" [date] := 1.00000000;

            $ "Surplus.Domestic Surplus Flag" [date] := 1.00000000;

            $ "PumpingFromLakeMead:SNWP.Diversion Requested" [date] := IF ( $ "Surplus Total Annual Schedules.SNWA" [@"24:00:00 December 31, Current Year"] > $ "ForecastUse.SNWPResetAnnualFC" [@"24:00:00 December 31, Current Year"] )
 THEN
  "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "SNWA" ), date )
 ENDIF;

            $ "PumpingFromLakeMead:SNWP.Depletion Requested" [date] := IF ( $ "Surplus Total Annual Schedules.SNWA" [@"24:00:00 December 31, Current Year"] > $ "ForecastUse.SNWPResetAnnualFC" [@"24:00:00 December 31, Current Year"] )
 THEN
  "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "SNWA" ), date )
 ENDIF;

            $ "MWDDiversion:MWD.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "MWD" ), date );

            $ "MWDDiversion:MWD.Depletion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "MWD" ), date ) - "VolumeToFlow"( $ "California_CU_Schedules.MWDReturns" [date], date ) - "VolumeToFlow"( $ "Mexico_CU_Schedules.MexicoTJ" [date], date );

            $ "GilaAndYumaUsers:GilaMonsterFarms.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "Gila Monster Farms" ), date );

            $ "OthersBlwImp:AzPumpersBlwImp.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "AzPumpersBlwImp" ), date );

            $ "CAPDiversion.Total Diversion Requested" [date] := IF ( $ "Surplus Total Annual Schedules.CAP" [@"24:00:00 December 31, Current Year"] > $ "ForecastUse.CAPResetAnnualFC" [@"24:00:00 December 31, Current Year"] )
 THEN
  "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "CAP" ), date )
 ENDIF;

            $ "CAPDiversion.Total Depletion Requested" [date] := IF ( $ "Surplus Total Annual Schedules.CAP" [@"24:00:00 December 31, Current Year"] > $ "ForecastUse.CAPResetAnnualFC" [@"24:00:00 December 31, Current Year"] )
 THEN
  "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "CAP" ), date )
 ENDIF;

      ENDFOREACH;

    END
    UUID "{04ad4408-c4e0-4c32-9a63-7adf3d9869e0}";;

    RULE                 "Set Flood Control Surplus Schedules";
    DESCRIPTION          "If a the Flood Control or Exclusive Space Flag is on (greater than 0) this rule will fire and set the Surplus Schedules for all water users impacted by Flood Control Surplus. The computed schedules are the Total Annual Schedules for each water user, meaning Normal and Surplus schedules.  <br><br>Flood Control Surplus is in priority over Quantified Surplus Volumes. -HMG 8/2/11<br>";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT $ "FloodControlOutput.Flood Control Flag" [] > 0.00000000 OR $ "FloodControlOutput.Exclusive Space Flag" [] > 0.00000000;
    NOTES                "DEVELOPER NOTES:<br><br>GCAA, 20181030: AnnualWaterUse.CAPMaximumAnnualDelivery and AnnualWaterUse.MWDMaximumAnnualDelivery slots added to replace hard-coded values and ForecastUse.SNWPResetAnnualFC added to replace Nevada_CU_Forecast1.SNWP which was being incorrectly used to calculated the Surplus Total Annual Schedules for SNWP";
    BEGIN

      $ "Surplus Total Annual Schedules.AzPumpersBlwImp" [@"24:00:00 December 31, Current Year"] := $ "Arizona_CU_Forecast1.AzPumpersBlwImp" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.AzPumpersBlwImp" [@"24:00:00 December 31, Current Year"];

      $ "Surplus Total Annual Schedules.CAP" [@"24:00:00 December 31, Current Year"] := $ "AnnualWaterUse.CAPCanal_AnnualCapacity" [];

      $ "Surplus Total Annual Schedules.CibolaValleyIID" [@"24:00:00 December 31, Current Year"] := $ "Arizona_CU_Forecast1.CibolaValleyIID" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.CibolaValleyIID" [@"24:00:00 December 31, Current Year"];

      $ "Surplus Total Annual Schedules.City of Parker" [@"24:00:00 December 31, Current Year"] := $ "Arizona_CU_Forecast1.City of Parker" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.City of Parker" [@"24:00:00 December 31, Current Year"];

      $ "Surplus Total Annual Schedules.Gila Monster Farms" [@"24:00:00 December 31, Current Year"] := $ "Arizona_CU_Forecast1.Gila Monster Farms" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.Gila Monster Farms" [@"24:00:00 December 31, Current Year"];

      $ "Surplus Total Annual Schedules.SNWA" [@"24:00:00 December 31, Current Year"] := $ "ForecastUse.SNWPResetAnnualFC" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.SNWA FC" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.SNWA Quantified" [@"24:00:00 December 31, Current Year"];

      $ "Surplus Total Annual Schedules.MWD" [@"24:00:00 December 31, Current Year"] := $ "AnnualWaterUse.MWDCanal_AnnualCapacity" [];

      $ "Surplus Total Annual Schedules.Coachella" [@"24:00:00 December 31, Current Year"] := $ "California_CU_Forecast1.Coachella" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.CA Ag" [@"24:00:00 December 31, Current Year"] * $ "Surplus.Share of CA Ag Surplus" [0.00000000, 0.00000000] + 100000.00000000 "acre-ft";

      $ "Surplus Total Annual Schedules.IID" [@"24:00:00 December 31, Current Year"] := $ "California_CU_Forecast1.IID" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.CA Ag" [@"24:00:00 December 31, Current Year"] * $ "Surplus.Share of CA Ag Surplus" [0.00000000, 1.00000000];

      $ "Surplus Total Annual Schedules.Needles" [@"24:00:00 December 31, Current Year"] := $ "California_CU_Forecast1.Needles" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.Needles" [@"24:00:00 December 31, Current Year"];

      $ "Surplus Total Annual Schedules.CaPumpersAbvImp" [@"24:00:00 December 31, Current Year"] := $ "California_CU_Forecast1.CaPumpersAbvImp" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.CaPumpersAbvImp" [@"24:00:00 December 31, Current Year"];

      $ "Surplus Total Annual Schedules.Mexico" [@"24:00:00 December 31, Current Year"] := $ "Mexico Shortage and Surplus.Mexico Flood Control Delivery" [];

    END
    UUID "{089cf323-75ca-4bf2-a98b-8d2b391d5f71}";;

    RULE                 "Set Quantified Surplus Schedules";
    DESCRIPTION          "If there is a positive Quantified Surplus Volume this rule will fire and set the Total Annual Schedules for all water Users Impacted by Quantified Surplus. The Total Annual Schedules include both the Normal and Surplus Schedules. Rule fires only once per year during January. <br><br>Quantified Surplus is higher in priority than Domestic Surplus, but lower in priority than Flood Control Surplus. Therefore, this rule will override any Domestic Surplus Schedules, but may then be overriden by Flood Control Surplus Schedules if a Flood Control Surplus exists. -HMG 8/2/11";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT $ "Surplus.Quantified Surplus Volume" [@"24:00:00 December 31, Current Year"] > 0.00000000 "acre-feet";
    NOTES                "DEVELOPER NOTES<br><br>GCAA, 20181030: ForecastUse.MWDResetAnnualFC and ForecastUse.SNWPResetAnnualFC added to replace California_CU_Forecast1.MWDDiversion and Nevada_CU_Forecast1.SNWP which were incorrectly being used to calculate the Surplus Annual Schedules for SNWP and CAP. AnnualWaterUse.CAPMaximumAnnualDelivery added to replace hard-coded value.";
    BEGIN

      $ "Surplus Total Annual Schedules.MWD" [@"24:00:00 December 31, Current Year"] := $ "ForecastUse.MWDResetAnnualFC" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.MWD Quantified" [@"24:00:00 December 31, Current Year"];

      $ "Surplus Total Annual Schedules.Coachella" [@"24:00:00 December 31, Current Year"] := IF ( $ "Surplus.California Quantified Surplus Volume" [@"24:00:00 December 31, Current Year"] > $ "Surplus Volume Entitlements.MWD Quantified" [@"24:00:00 December 31, Current Year"] )
 THEN
  $ "California_CU_Forecast1.Coachella" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.CA Ag" [@"24:00:00 December 31, Current Year"] * $ "Surplus.Share of CA Ag Surplus" [0.00000000, 0.00000000]
 ELSE
  $ "California_CU_Forecast1.Coachella" [@"24:00:00 December 31, Current Year"]
 ENDIF;

      $ "Surplus Total Annual Schedules.IID" [@"24:00:00 December 31, Current Year"] := IF ( $ "Surplus.California Quantified Surplus Volume" [@"24:00:00 December 31, Current Year"] > $ "Surplus Volume Entitlements.MWD Quantified" [@"24:00:00 December 31, Current Year"] )
 THEN
  $ "California_CU_Forecast1.IID" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.CA Ag" [@"24:00:00 December 31, Current Year"] * $ "Surplus.Share of CA Ag Surplus" [0.00000000, 1.00000000]
 ELSE
  $ "California_CU_Forecast1.IID" [@"24:00:00 December 31, Current Year"]
 ENDIF;

      $ "Surplus Total Annual Schedules.AzPumpersBlwImp" [@"24:00:00 December 31, Current Year"] := $ "Arizona_CU_Forecast1.AzPumpersBlwImp" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.AzPumpersBlwImp" [@"24:00:00 December 31, Current Year"];

      $ "Surplus Total Annual Schedules.Gila Monster Farms" [@"24:00:00 December 31, Current Year"] := $ "Arizona_CU_Forecast1.Gila Monster Farms" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.Gila Monster Farms" [@"24:00:00 December 31, Current Year"];

      $ "Surplus Total Annual Schedules.City of Parker" [@"24:00:00 December 31, Current Year"] := $ "Arizona_CU_Forecast1.City of Parker" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.City of Parker" [@"24:00:00 December 31, Current Year"];

      $ "Surplus Total Annual Schedules.CibolaValleyIID" [@"24:00:00 December 31, Current Year"] := $ "Arizona_CU_Forecast1.CibolaValleyIID" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.CibolaValleyIID" [@"24:00:00 December 31, Current Year"];

      $ "Surplus Total Annual Schedules.CAP" [@"24:00:00 December 31, Current Year"] := $ "AnnualWaterUse.CAPCanal_AnnualCapacity" [] COMMENTED_BY "<assumes CAP will take a full ditch even lacking full surplus volume for interstate banking. Surplus Volume Entitlement contains actual CAP quantified surplus volume>";

      $ "Surplus Total Annual Schedules.SNWA" [@"24:00:00 December 31, Current Year"] := $ "ForecastUse.SNWPResetAnnualFC" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.SNWA FC" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.SNWA Quantified" [@"24:00:00 December 31, Current Year"];

    END
    UUID "{42792af7-c836-45d1-8186-4c72f5b468dd}";;

    RULE                 "Set Domestic Surplus Schedules";
    DESCRIPTION          "If a Domestic Surplus exists, meaning that Mead's Pool Elevation is greater than the Domestic Surplus Trigger, then this rule will fire in January of the Current Year and set the Total Annual Schedules for all water users impacted by Domestic Surplus.<br><br>Domestic Surplus is the lowest priority surplus, meaning that a Quantified or Flood Control Surplus will override these values.  -HMG 8/2/11";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT $ "Mead.Pool Elevation" [@"24:00:00 December 31, Previous Year"] >= $ "Surplus.Domestic Surplus Trigger Elevation" [];
    NOTES                "DEVELOPER NOTES<br><br>GCAA, 20181030: AnnualWaterUse.MWDMaximumAnnualDelivery added to replace hard-coded value and ForecastUse.CAPResetAnnualFC and ForecastUse.SNWPResetAnnualFC added to replace Nevada_CU_Forecast1_SNWP and Arizona_CU_Forecast1_CAP which were being used incorrectly to caluculate the Surplus Annual Schedules";
    BEGIN

      $ "Surplus Total Annual Schedules.SNWA" [@"24:00:00 December 31, Current Year"] := $ "ForecastUse.SNWPResetAnnualFC" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.SNWA Domestic" [@"24:00:00 December 31, Current Year"];

      $ "Surplus Total Annual Schedules.MWD" [@"24:00:00 December 31, Current Year"] := "Min"( $ "ForecastUse.MWDResetAnnualFC" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.MWD Domestic" [@"24:00:00 December 31, Current Year"] + $ "California_CU_Forecast1.MWDReturns" [@"24:00:00 December 31, Current Year"], $ "AnnualWaterUse.MWDCanal_AnnualCapacity" [] - $ "Mexico_CU_Forecast1.MexicoTJ" [@"24:00:00 December 31, Current Year"] );

      $ "Surplus Total Annual Schedules.Gila Monster Farms" [@"24:00:00 December 31, Current Year"] := $ "Arizona_CU_Forecast1.Gila Monster Farms" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.Gila Monster Farms" [@"24:00:00 December 31, Current Year"];

      $ "Surplus Total Annual Schedules.AzPumpersBlwImp" [@"24:00:00 December 31, Current Year"] := $ "Arizona_CU_Forecast1.AzPumpersBlwImp" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.AzPumpersBlwImp" [@"24:00:00 December 31, Current Year"];

      $ "Surplus Total Annual Schedules.CAP" [@"24:00:00 December 31, Current Year"] := $ "ForecastUse.CAPResetAnnualFC" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.CAP Domestic" [@"24:00:00 December 31, Current Year"];

    END
    UUID "{1d3ad784-4734-4186-9d79-fb15e3fd1e19}";;

    RULE                 "INT - Set Quantified Surplus Entitlement Vols CAP and MWD";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT $ "Surplus.Quantified Surplus Volume" [@"24:00:00 December 31, Current Year"] > 0.00000000 "acre-feet";
    NOTES                "DEVELOPER NOTES<br><br>GCAA, 20181030: ForecastUse.MWDResetAnnualFC and ForecastUse.CAPResetAnnualFC added to replace California_CU_Forecast1.MWD and Arizona_CU_Forecast1.CAP and AnnualWaterUse.CAPMaximumAnnualDelivery added to replace hard-coded value";
    BEGIN

      $ "Surplus Volume Entitlements.MWD Quantified" [@"24:00:00 December 31, Current Year"] := IF ( $ "Surplus.California Quantified Surplus Volume" [@"24:00:00 December 31, Current Year"] > $ "Surplus Volume Entitlements.MWD Domestic" [@"24:00:00 December 31, Current Year"] )
 THEN
  $ "AnnualWaterUse.MWDCanal_AnnualCapacity" [] - $ "ForecastUse.MWDResetAnnualFC" [@"24:00:00 December 31, Current Year"]
 ELSE
  $ "Surplus Volume Entitlements.MWD Domestic" [@"24:00:00 December 31, Current Year"]
 ENDIF;

      $ "Surplus Volume Entitlements.CAP Quantified" [@"24:00:00 December 31, Current Year"] := IF ( $ "Surplus.Arizona Quantified Surplus Volume" [@"24:00:00 December 31, Current Year"] > $ "Surplus Volume Entitlements.AzPumpersBlwImp" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.Gila Monster Farms" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.CAP Domestic" [@"24:00:00 December 31, Current Year"] )
 THEN
  $ "AnnualWaterUse.CAPCanal_AnnualCapacity" [] - $ "ForecastUse.CAPResetAnnualFC" [@"24:00:00 December 31, Current Year"]
 ELSE
  $ "Surplus Volume Entitlements.CAP Domestic" [@"24:00:00 December 31, Current Year"]
 ENDIF;

    END
    UUID "{d0226228-f2e3-41bd-b2d2-2818e7df5f57}";;

    RULE                 "INT - Set Domestic and FC Surplus Entitlement Vols for MWD";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "DEVELOPER NOTES<br><br>GCAA, 20181030: AnnualWaterUse.MWDMaximumAnnualDelivery and Surplus.Default Surplus Entitlements slots and ShareofMexicoSurplusbyState function added to replace hard-coded values and ForecastUse.MWDRestAnnualFC added to replace California_CU_Forecast1.MWD which was incorrectly used";
    BEGIN

      IF_STATEMENT (IsNaN $ "Surplus Volume Entitlements.MWD Domestic" [@"24:00:00 December 31, Current Year"]) THEN
            $ "Surplus Volume Entitlements.MWD Domestic" [@"24:00:00 December 31, Current Year"] := IF ( "GetYear"( @"24:00:00 January 31, Current Year" ) < 2017.00000000 )
 THEN
  $ "AnnualWaterUse.MWDCanal_AnnualCapacity" [] - $ "ForecastUse.MWDResetAnnualFC" [@"24:00:00 December 31, Current Year"] - "ShareofMexicoSurplusbyState"(  ) * $ "Mexico Shortage and Surplus.Mexico Annual Surplus" [@"24:00:00 December 31, Current Year"]
 ELSE
  IF ( $ "Surplus Volume Entitlements.CAP Domestic" [@"24:00:00 December 31, Current Year"] > 0.00000000 "acre-ft" OR $ "Surplus Volume Entitlements.SNWA Domestic" [@"24:00:00 December 31, Current Year"] > 0.00000000 "acre-ft" )
  THEN
   $ "Surplus.Default Surplus Entitlements" [0.00000000, "MWD"] - "ShareofMexicoSurplusbyState"(  ) * $ "Mexico Shortage and Surplus.Mexico Annual Surplus" [@"24:00:00 December 31, Current Year"]
  ELSE
   $ "Surplus.Default Surplus Entitlements" [0.00000000, "MWD"]
  ENDIF
 ENDIF;

      END_IF_STATEMENT;

      IF_STATEMENT (IsNaN $ "Surplus Volume Entitlements.MWD FC" [@"24:00:00 December 31, Current Year"]) THEN
            $ "Surplus Volume Entitlements.MWD FC" [@"24:00:00 December 31, Current Year"] := $ "AnnualWaterUse.MWDCanal_AnnualCapacity" [] - $ "ForecastUse.MWDResetAnnualFC" [@"24:00:00 December 31, Current Year"];

      END_IF_STATEMENT;

    END
    UUID "{d397a29b-92f3-41e1-b981-e53eb968b643}";;

    RULE                 "INT - Set Domestic and FC Surplus Entitlement Vols for CAP";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "DEVELOPER NOTES<br><br>GCAA, 20181030: Surplus.Default Surplus Entitlements slot and ShareofMexicoSurplusbyState function added to calculate the CAP domestic entitlement. The AnnualWaterUse.CAPMaximumAnnualDelivery was added to replace the hard-coded value and the ForecastUse.CAPResetAnnualFC slot was added to replace the Nevada_CU_Forecast1.CAP which was incorrectly being used";
    BEGIN

      IF_STATEMENT (IsNaN $ "Surplus Volume Entitlements.CAP Domestic" [@"24:00:00 December 31, Current Year"]) THEN
            $ "Surplus Volume Entitlements.CAP Domestic" [@"24:00:00 December 31, Current Year"] := IF ( "GetYear"( @"24:00:00 January 31, Current Year" ) < 2017.00000000 )
 THEN
  0.00000000 "acre-ft"
 ELSE
  $ "Surplus.Default Surplus Entitlements" [0.00000000, "CAP"] - "ShareofMexicoSurplusbyState"(  ) * $ "Mexico Shortage and Surplus.Mexico Annual Surplus" [@"24:00:00 December 31, Current Year"] - ( $ "Surplus Volume Entitlements.Gila Monster Farms" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.AzPumpersBlwImp" [@"24:00:00 December 31, Current Year"] )
 ENDIF;

      END_IF_STATEMENT;

      IF_STATEMENT (IsNaN $ "Surplus Volume Entitlements.CAP FC" [@"24:00:00 December 31, Current Year"]) THEN
            $ "Surplus Volume Entitlements.CAP FC" [@"24:00:00 December 31, Current Year"] := $ "AnnualWaterUse.CAPCanal_AnnualCapacity" [] - $ "ForecastUse.CAPResetAnnualFC" [@"24:00:00 December 31, Current Year"];

      END_IF_STATEMENT;

    END
    UUID "{eb94f4dc-f100-4e27-8b5d-6a53882d6799}";;

    RULE                 "INT - Set Quantified Volumes by State";
    DESCRIPTION          "If there is a positive Quantified Surplus volume, this rule will distribute it amond the lower basin states of AZ, CA, and NV. The distribution amounts (shares) are stored in a slot on the Surplus object. <br>IF there is not a positive Quantified Surplus, the execution contraints will prevent this rule from firing. -HMG 8/2/11";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT $ "Surplus.Quantified Surplus Volume" [@"24:00:00 December 31, Current Year"] > 0.00000000 "acre-feet";
    NOTES                "";
    BEGIN

      FOREACH (STRING state IN { "California" , "Arizona" , "Nevada" }) DO
            % "Surplus" & ( state CONCAT " Quantified Surplus Volume" ) [@"24:00:00 December 31, Current Year"] := $ "Surplus.Quantified Surplus Volume" [@"24:00:00 December 31, Current Year"] * $ "Surplus.Share of Quantified Surplus by State" [0.00000000, state];

      ENDFOREACH;

    END
    UUID "{d30f089a-fca1-4ff2-8a08-1fcc4cf73e1e}";;

    RULE                 "INT - Compute Quantified Surplus Volume";
    DESCRIPTION          "Computes the total volume of Quantified Surplus water for the year. This slot only computes once per year in January and is NOT recalculted if Lower Basin demands are revised.<br><br>If this value is postitive,  there is a Quantified Surplus determination and water use schedules are revised as appropriate. <br><br>Equation:   Surplus Volume = (Powell Storage + Mead Storage ? maxstorage - previous year ICS credits)*(1+avgBankStorcoef) + runoff ? UBDemand ? LBDemand <br>Variable Definitions:<br>  Powell Storage = Powell storage at beginning of the year (December month-end) <br>  Mead Storage = Mead storage at the beginning of the year (December month-end) <br>  Max Storage = 47.96 maf <br>  Previous year ICS credits ? cumulative ICS credits over entire Lower Basin over all years <br>  avgBankStorcoef = average of Powell and Mead bank storage coefficients <br>  Runoff = 17.4 maf (70th percentile non-exceedence flow) <br>  UBDemand = Upper Basin depletion scheduled for the year + average evaporation loss in the Upper Basin (same as in 602a calculation, 560 kaf) <br>  LBDemand = sum of depletions below Powell + evaporation losses in the Lower Basin (avg 900 kaf) ? avg gains below Powell (Powell to Mead and below Mead) <br><br>-HMG 8/2/11";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT IsNaN $ "Surplus.Quantified Surplus Volume" [@"24:00:00 December 31, Current Year"];
    NOTES                "DEVELOPER NOTES<br><br>CH, 5/9/18: Replaced Surplus.MaxStorage (a hardcoded value) with MaxStorage function that calculates this value as specified by Appendix A of CRSS documentation.<br><br>GCAA, 20180523: Replaced Mexico Shortage and Surplus.ICMA Balance with Mexico Shortage and Surplus.Mexico Water Reserve Balance, per Minute 323 <br>";
    BEGIN

      $ "Surplus.Quantified Surplus Volume" [@"24:00:00 December 31, Current Year"] := "Max"( ( $ "Powell.Storage" [@"t - 1"] + $ "Mead.Storage" [@"t - 1"] - "MaxStorage"(  ) - ( "SumPreviousYearICScredits"(  ) + $ "Mexico Shortage and Surplus.Mexico Water Reserve Balance" [@"24:00:00 December 31, Previous Year"] ) ) * ( 1.00000000 + ( $ "Powell.Bank Storage Coefficient" [0.00000000, 0.00000000] + $ "Mead.Bank Storage Coefficient" [0.00000000, 0.00000000] ) / 2.00000000 ) + $ "Surplus.70RLeesFerryFlow" [] - ( $ "Surplus.UBEvaporation" [] + $ "Surplus.UBDemand" [@"24:00:00 December 31, Current Year"] ) - "SumLBDemands - Include Mexico"(  ), 0.00000000 "acre-ft" );

    END
    UUID "{7c0cbe1d-1d77-44d3-8c65-2987500f9924}";;

    RULE                 "NI - Set Outyear Surplus Schedules for Mexico";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND @"t" != @"Start Timestep" AND $ "Mexico Shortage and Surplus.Mexico Surplus Flag" [@"24:00:00 December 31, Current Year"] > 0.00000000;
    NOTES                "";
    BEGIN

    DESCRIPTION          "The div is adjusted in a different rule in the MTOM ruleset.<br><br>The slot assignment for the surplus volume still exists<br>";
      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            $ "MexicanTreatyDelivery:MexicoSched.Diversion Requested" [date] := "VolumeToFlow"( $ "Mexico_CU_Schedules.MexicoSched" [date] - $ "Mexico_CU_Schedules.MexicoTJ" [date] + $ "Mexico Shortage and Surplus.Mexico Surplus Table" [$ "Mexico Shortage and Surplus.Mexico Surplus Flag" [@"24:00:00 December 31, Current Year"] - 1.00000000, "Volume"] * $ "Shortage.MonthlyPercents" ["GetMonthAsString"( date ), "Mexico"], date );

      ENDFOREACH;

      $ "Mexico Shortage and Surplus.Mexico Annual Surplus" [@"24:00:00 December 31, Current Year"] := $ "Mexico Shortage and Surplus.Mexico Surplus Table" [$ "Mexico Shortage and Surplus.Mexico Surplus Flag" [@"24:00:00 December 31, Current Year"] - 1.00000000, "Volume"];

    END
    UUID "{865594fe-e574-4577-a881-aefe2416f5f9}";;

    RULE                 "INT - Set Mexico Surplus Flag";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND @"t" != @"Start Timestep";
    NOTES                "";
    BEGIN

      $ "Mexico Shortage and Surplus.Mexico Surplus Flag" [@"24:00:00 December 31, Current Year"] := IF ( $ "Mead.Pool Elevation" [@"t - 1"] >= $ "Mexico Shortage and Surplus.Mexico Surplus Table" [2.00000000, "Elevation"] )
 THEN
  3.00000000
 ELSE
  IF ( $ "Mead.Pool Elevation" [@"t - 1"] >= $ "Mexico Shortage and Surplus.Mexico Surplus Table" [1.00000000, "Elevation"] )
  THEN
   2.00000000
  ELSE
   IF ( $ "Mead.Pool Elevation" [@"t - 1"] >= $ "Mexico Shortage and Surplus.Mexico Surplus Table" [0.00000000, "Elevation"] )
   THEN
    1.00000000
   ELSE
    0.00000000
   ENDIF
  ENDIF
 ENDIF;

    END
    UUID "{38d9b16b-b4a8-4b80-b69a-0a51321a7804}";;

  END
  UUID "{09ae4cbc-8191-46c8-b923-99eefac3afa4}";;

  POLICY_GROUP   "DCP and BWSCP";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "INT - California Conversion DCP";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" OR @"t" == @"Start Timestep";
    NOTES                "GCAA, 202006: Added SystemTaxAssesment funtion to replace reference to the scalar slot";
    BEGIN

    DESCRIPTION          "DCP was written slightly different in MTOM. Kept MTOM logic since moving 24 MS into MTOM. Still <br>gets same result  <br>";
      IF_STATEMENT ($ "ICS Credits.AnnualDCPContribution_CA" [@"24:00:00 December Max DayOfMonth, Current Year"] > 0.00000000 "acre-ft" AND $ "Mead.Pool Elevation" [@"24:00:00 December Max DayOfMonth, Previous Year"] < $ "DCP.ReducedTakeElevation" []) THEN
          DESCRIPTION          "This assignment calculates whether MWD's DCP contribution will be made as through a <br>schedule reduction to create EC ICS to DCP ICS or conversion of EC ICS to DCP ICS. <br>Accounting for this will happen in the ICS Accounting policy group.<br><br>If a schedule reduction to meet the DCP contribution is needed, it assumed that the schedule <br>reduction will be converted to DCP ICS through EC ICS.   <br><br>Check EC ICS balance, check current year EC creation, else reduce schedule to create EC ICS<br>which will then be converted to DCP ICS<br><br><br>AP, 7/11/19<br>";
      WITH_STATEMENT (NUMERIC dcpContribution = $ "ICS Credits.AnnualDCPContribution_CA" [@"24:00:00 December Max DayOfMonth, Current Year"]) DO
            WITH_STATEMENT (NUMERIC PreviousECtoDCP = "Min"( dcpContribution, $ "ICS Credits.ExtraordinaryConservationICS_MWD" [@"24:00:00 December Max DayOfMonth, Previous Year"] )) DO
            WITH_STATEMENT (NUMERIC CurrentICStoDCP = IF ( dcpContribution == PreviousECtoDCP )
 THEN
  0.00000000 "acre-ft"
 ELSE
  "Current Year EC ICS Creation"( $ "ICSProjectionData.AnnualCreationEC_MWD_Default" [@"24:00:00 December Max DayOfMonth, Current Year"], $ "ICS Credits.AnnualDeliveryEC_MWD" [@"24:00:00 December Max DayOfMonth, Previous Year"], "California" )
 ENDIF
 ELSEIF_COND ( "Current Year EC ICS Creation"( $ "ICSProjectionData.AnnualCreationEC_MWD_Default" [@"24:00:00 December Max DayOfMonth, Current Year"], $ "ICS Credits.AnnualDeliveryEC_MWD" [@"24:00:00 December Max DayOfMonth, Previous Year"], "California" ) > dcpContribution - PreviousECtoDCP )
 ELSEIF_CLAUSE ( dcpContribution - PreviousECtoDCP )
 END_ELSEIF) DO
            WITH_STATEMENT (NUMERIC dcpSchedReduc = IF ( dcpContribution > PreviousECtoDCP + CurrentICStoDCP )
 THEN
  dcpContribution - ( PreviousECtoDCP + CurrentICStoDCP )
 ELSE
  0.00000000 "acre-ft"
 ENDIF) DO
          DESCRIPTION          "Coachella can not &quot;officially&quot; create DCP ICS. Instead DCP creation for Coachella will be done <br>&quot;unofficially&quot; and held in MWD account. Coachella will reduce diversion by 7% to help CA meet <br>DCP contribution and will be stored store in MWD's system. MWD to pay tax for now. Logic will be <br>disabled for Coachella besides 7% reduction to diversion to create system water for MWD. It is <br>assumed there will be enough space for MWD to create DCP ICS with coachellas system water + <br>their own. Will be adjusted downward in accounting rule if not enough space. CVWD account in <br>MWD system will not be tracked, all DCP ICS will be assumed to be MWD.<br><br>AP 7/31/19        <br>";
      $ "ICS Credits.AnnualCreationDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := PreviousECtoDCP + CurrentICStoDCP + dcpSchedReduc;

            $ "ICS Credits.AnnualConversionECtoDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := PreviousECtoDCP + CurrentICStoDCP;

            $ "ICS Credits.AnnualConversionPreviousECtoDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := PreviousECtoDCP;

            $ "ICS Credits.AnnualConversionCurrentECtoDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := CurrentICStoDCP;

            $ "ICS Credits.AnnualCreationEC_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := $ "ICSProjectionData.AnnualCreationEC_MWD_Default" [@"24:00:00 December Max DayOfMonth, Current Year"] - CurrentICStoDCP / "SystemTaxAdjustment_DCP"(  );

            $ "ICS Credits.AnnualSimultaneousCreationDCPICS_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := dcpSchedReduc;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      ELSE
            $ "ICS Credits.AnnualCreationDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

            $ "ICS Credits.AnnualConversionECtoDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

            $ "ICS Credits.AnnualConversionPreviousECtoDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

            $ "ICS Credits.AnnualConversionCurrentECtoDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

            $ "ICS Credits.AnnualCreationEC_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := $ "ICSProjectionData.AnnualCreationEC_MWD_Default" [@"24:00:00 December Max DayOfMonth, Current Year"];

            $ "ICS Credits.AnnualSimultaneousCreationDCPICS_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

      END_IF_STATEMENT;

    DESCRIPTION          "Initally set to 0. Will get adjusted in CA acounting rule if neccessary<br>";
      $ "ICS Credits.AnnualSysWaterforDCP_MWD" [@"24:00:00 December 31, Current Year"] := 0.00000000 "acre-feet";

    END
    UUID "{28fae62c-8cd4-4b02-bd75-73e96ee3d2a8}";;

    RULE                 "INT - Nevada Conversion DCP";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" OR @"t" == @"Start Timestep";
    NOTES                "";
    BEGIN

    DESCRIPTION          "DCP was written slightly different in MTOM. Kept MTOM logic since moving 24 MS into MTOM. Still <br>gets same result  <br>";
      IF_STATEMENT ($ "ICS Credits.AnnualDCPContribution_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] > 0.00000000 "acre-feet" AND $ "Mead.Pool Elevation" [@"24:00:00 December 31, Previous Year"] < $ "DCP.DCP_StartElevation" []) THEN
          DESCRIPTION          "This assignment calculates whether NV's DCP contribution will be made as through a schedule <br>reduction to create EC ICS then DCP ICS or conversion of EC ICS to DCP ICS. Accounting for <br>this will happen in the ICS Accounting policy group.<br><br>If a schedule reduction to meet the DCP contribution is needed, it assumed that the schedule <br>reduction will be converted to DCP ICS through EC ICS.   <br><br>Check EC ICS balance, check current year EC creation, else reduce schedule to create EC ICS <br>which will then be converted to DCP ICS<br><br>AP, 7/11/19<br>";
      WITH_STATEMENT (NUMERIC dcpContribution = $ "ICS Credits.AnnualDCPContribution_NV" [@"24:00:00 December Max DayOfMonth, Current Year"]) DO
            WITH_STATEMENT (NUMERIC PreviousECtoDCP = "Min"( dcpContribution, $ "ICS Credits.ExtraordinaryConservationICS_NV" [@"24:00:00 December Max DayOfMonth, Previous Year"] )) DO
            WITH_STATEMENT (NUMERIC CurrentICStoDCP = IF ( dcpContribution == PreviousECtoDCP )
 THEN
  0.00000000 "acre-ft"
 ELSE
  "Current Year EC ICS Creation"( $ "ICS Credits.AnnualCreationEC_NV" [@"24:00:00 December 31, Current Year"], $ "ICS Credits.AnnualDeliveryEC_NV" [@"24:00:00 December 31, Previous Year"], "Nevada" )
 ENDIF
 ELSEIF_COND ( "Current Year EC ICS Creation"( $ "ICS Credits.AnnualCreationEC_NV" [@"24:00:00 December 31, Current Year"], $ "ICS Credits.AnnualDeliveryEC_NV" [@"24:00:00 December 31, Previous Year"], "Nevada" ) > dcpContribution - PreviousECtoDCP )
 ELSEIF_CLAUSE ( dcpContribution - PreviousECtoDCP )
 END_ELSEIF) DO
            WITH_STATEMENT (NUMERIC dcpSchedReduc = IF ( dcpContribution > PreviousECtoDCP + CurrentICStoDCP )
 THEN
  dcpContribution - ( PreviousECtoDCP + CurrentICStoDCP )
 ELSE
  0.00000000 "acre-ft"
 ENDIF) DO
            $ "ICS Credits.AnnualCreationDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := PreviousECtoDCP + CurrentICStoDCP + dcpSchedReduc;

            $ "ICS Credits.AnnualConversionECtoDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := PreviousECtoDCP + CurrentICStoDCP;

            $ "ICS Credits.AnnualConversionPreviousECtoDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := PreviousECtoDCP;

            $ "ICS Credits.AnnualConversionCurrentECtoDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := CurrentICStoDCP;

            $ "ICS Credits.AnnualSimultaneousCreationDCPICS_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := dcpSchedReduc;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      ELSE
            $ "ICS Credits.AnnualCreationDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

            $ "ICS Credits.AnnualConversionECtoDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

            $ "ICS Credits.AnnualConversionPreviousECtoDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

            $ "ICS Credits.AnnualConversionCurrentECtoDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

            $ "ICS Credits.AnnualSimultaneousCreationDCPICS_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

            $ "ICS Credits.AnnualSysWaterforDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-feet";

      END_IF_STATEMENT;

    END
    UUID "{b3758270-d1db-4bf4-9eb0-2b5e39b5aecc}";;

    RULE                 "INT - Arizona DCP";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" OR @"t" == @"Start Timestep";
    NOTES                "GCAA, 202006: Added SystemTaxAssesment funtion to replace reference to the scalar slot";
    BEGIN

    DESCRIPTION          "DCP was written slightly different in MTOM. Kept MTOM logic since moving 24 MS into MTOM. Still <br>gets same result  <br>";
      WITH_STATEMENT (NUMERIC DCP_Contribution = $ "ICS Credits.AnnualDCPContribution_AZ" [@"24:00:00 December Max DayOfMonth, Current Year"]) DO
            WITH_STATEMENT (NUMERIC AnnualCreationECICS_CAWCD = $ "ICSProjectionData.AnnualCreationEC_CAWCD_Default" [@"24:00:00 December Max DayOfMonth, Current Year"]) DO
            WITH_STATEMENT (NUMERIC AnnualDCPCreation_CAWCD = $ "ICSProjectionData.AnnualCreationEC_CAWCD_Default" [@"24:00:00 December Max DayOfMonth, Current Year"] * "SystemTaxAdjustment_DCP"(  )) DO
            WITH_STATEMENT (NUMERIC SysWater = "Max"( DCP_Contribution - AnnualDCPCreation_CAWCD, 0.00000000 "acre-ft" )) DO
            WITH_STATEMENT (LIST list = IF ( $ "Mead.Pool Elevation" [@"24:00:00 December Max DayOfMonth, Previous Year"] < $ "DCP.DCP_StartElevation" [] AND DCP_Contribution > 0.00000000 "acre-ft" )
 THEN
  { SysWater , SysWater , AnnualDCPCreation_CAWCD , 0.00000000 "acre-ft" }
 ELSE
  { 0.00000000 "acre-ft" , 0.00000000 "acre-ft" , 0.00000000 "acre-ft" , AnnualCreationECICS_CAWCD }
 ENDIF
 ELSEIF_COND ( $ "Mead.Pool Elevation" [@"24:00:00 December Max DayOfMonth, Previous Year"] > $ "DCP.DCP_StartElevation" [] AND DCP_Contribution > 0.00000000 "acre-ft" )
 ELSEIF_CLAUSE ( { SysWater , SysWater , 0.00000000 "acre-ft" , AnnualCreationECICS_CAWCD } )
 END_ELSEIF) DO
            $ "ICS Credits.AnnualSysWaterforDCP_CAWCD" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 0.00000000 FROM list;

            $ "ICS Credits.AnnualSysWaterforDCP_AZ" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 1.00000000 FROM list;

            $ "ICS Credits.AnnualCreationDCP_CAWCD" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 2.00000000 FROM list;

            $ "ICS Credits.AnnualCreationEC_CAWCD" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 3.00000000 FROM list;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{f4a36b93-5e7b-423f-82b8-ac3108f3d12d}";;

    RULE                 "INT - Determine DCP and BWSCP Contrib";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND @"t" != @"Start Timestep";
    NOTES                "";
    BEGIN

      FOREACH (STRING user IN "DCP Users"(  )) DO
            IF_STATEMENT (user == "MX") THEN
            $ "Mexico Shortage and Surplus.Mexico Recoverable Water Savings_AnnualContribution" [@"24:00:00 December 31, Current Year"] := "TableLookupDefaultTol"( $ "DCP.Contributions", 0.00000000, "GetColumnIndex"( $ "DCP.Contributions", user ), $ "Mead.Pool Elevation" [@"24:00:00 December Max DayOfMonth, Previous Year"], @"t", FALSE );

      ELSE
            % "ICS Credits" & "AnnualDCPContribution_" CONCAT user [@"24:00:00 December 31, Current Year"] := "TableLookupDefaultTol"( $ "DCP.Contributions", 0.00000000, "GetColumnIndex"( $ "DCP.Contributions", user ), $ "Mead.Pool Elevation" [@"24:00:00 December Max DayOfMonth, Previous Year"], @"t", FALSE );

      END_IF_STATEMENT;

      ENDFOREACH;

      $ "DCP Flags.LB DCP" [@"24:00:00 December 31, Current Year"] := IF ( $ "Mead.Pool Elevation" [@"24:00:00 December Max DayOfMonth, Previous Year"] < $ "DCP.DCP_StartElevation" [] )
 THEN
  1.00000000
 ELSE
  0.00000000
 ENDIF;

    END
    UUID "{9c6e1d30-954c-4c09-a4fa-23c7251687c2}";;

  END
  UUID "{8dbab22e-5cf4-4ed7-91e3-48ddc1765614}";;

  POLICY_GROUP   "Shortage";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "NI - Set Mexico Outyear Shortage Schedules";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND @"t" != @"Start Timestep" AND $ "Shortage.Shortage Flag" [@"24:00:00 December 31, Current Year"] > 0.00000000;
    NOTES                "";
    BEGIN

    DESCRIPTION          "This rule was not moved into the integrated ruleset. Mexico's diversion adjustment happens in a <br>single rule due to run cycles and this rule is not needed. The annual shortage volume is set in a <br>rule called (&quot;Set Outyear Shortage Volumes&quot; in the integrated ruleset <br>";
      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            $ "MexicanTreatyDelivery:MexicoSched.Diversion Requested" [date] := "VolumeToFlow"( $ "Mexico_CU_Schedules.MexicoSched" [date] - $ "Mexico_CU_Schedules.MexicoTJ" [date] - $ "Mexico Shortage and Surplus.Mexico Shortage Volumes" [$ "Shortage.Shortage Flag" [@"24:00:00 December 31, Current Year"] - 1.00000000, "Mexico"] * $ "Shortage.MonthlyPercents" ["GetMonthAsString"( date ), "Mexico"], date );

      ENDFOREACH;

      $ "Mexico Shortage and Surplus.Mexico Annual Shortage" [@"24:00:00 December 31, Current Year"] := $ "Mexico Shortage and Surplus.Mexico Shortage Volumes" [$ "Shortage.Shortage Flag" [@"24:00:00 December 31, Current Year"] - 1.00000000, "Mexico"];

    END
    UUID "{f8df3dab-9254-449c-9f4f-e59db3ba463a}";;

    RULE                 "NI - Set Outyear Shortage Schedules";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND @"t" != @"Start Timestep" AND $ "Shortage.Shortage Flag" [@"24:00:00 December 31, Current Year"] > 0.00000000;
    NOTES                "GCAA, 202006: Added SNWA Depletion slot assignment to help model solve for correct return flow to system";
    BEGIN

    DESCRIPTION          "This rule was not moved over to the integrated ruleset. Diversion adjustements happen in a <br>single run in MTOM and those take care of the shortage adjustments for SNWA and CAP <br>";
      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            $ "PumpingFromLakeMead:SNWP.Diversion Requested" [date] := WITH NUMERIC MonthPercent = "FlowToVolume"( $ "PumpingFromLakeMead:SNWP.Diversion Requested" [date], date ) / "SumFlowsToVolume"( $ "PumpingFromLakeMead:SNWP.Diversion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) DO
  WITH NUMERIC snwpDivVol = WITH NUMERIC dssDeliveries = $ "ICS Credits.AnnualDeliveryTribDSS_NV" ["Dec31ofYear"( @"t" )] + $ "ICS Credits.AnnualDeliveryImpDSS_NV" ["Dec31ofYear"( @"t" )] DO
   WITH NUMERIC shortageVolume = $ "Shortage.State Shortage Volumes" [( $ "Shortage.Shortage Flag" ["Dec31ofYear"( @"t" )] ) - 1.00000000, "Nevada"] DO
    WITH NUMERIC NonSNWANevadaDivReqs = FOR ( DATETIME date2 IN @"24:00:00 January 31, Current Year" TO @"24:00:00 December 31, Current Year" ) STAT_SUM
     "FlowToVolume"( $ "FtMohaveIndRes:NV.Diversion Requested" [date2], date2 ) + "FlowToVolume"( $ "NvDvsToPkr:BigBend.Diversion Requested" [date2], date2 ) + "FlowToVolume"( $ "NvDvsToPkr:SCE.Diversion Requested" [date2], date2 ) + "FlowToVolume"( $ "OthersMeadToMohave:LMNRA Nv Mohave.Diversion Requested" [date2], date2 )
    ENDFOR DO
     ( "Min"( $ "AnnualWaterUse.NV_BasicApportionment" [] - shortageVolume, $ "AnnualWaterUse.Nevada_Apportionment" ["Dec31ofYear"( @"t" )] ) - NonSNWANevadaDivReqs )
    ENDWITH
   ENDWITH
  ENDWITH DO
   "VolumeToFlow"( snwpDivVol * MonthPercent, date )
  ENDWITH
 ENDWITH;

            $ "PumpingFromLakeMead:SNWP.Depletion Requested" [date] := WITH NUMERIC MonthPercent = "FlowToVolume"( $ "PumpingFromLakeMead:SNWP.Diversion Requested" [date], date ) / "SumFlowsToVolume"( $ "PumpingFromLakeMead:SNWP.Diversion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) DO
  WITH NUMERIC snwpDivVol = WITH NUMERIC dssDeliveries = $ "ICS Credits.AnnualDeliveryTribDSS_NV" ["Dec31ofYear"( @"t" )] + $ "ICS Credits.AnnualDeliveryImpDSS_NV" ["Dec31ofYear"( @"t" )] DO
   WITH NUMERIC shortageVolume = $ "Shortage.State Shortage Volumes" [( $ "Shortage.Shortage Flag" ["Dec31ofYear"( @"t" )] ) - 1.00000000, "Nevada"] DO
    WITH NUMERIC NonSNWANevadaDivReqs = FOR ( DATETIME date2 IN @"24:00:00 January 31, Current Year" TO @"24:00:00 December 31, Current Year" ) STAT_SUM
     "FlowToVolume"( $ "FtMohaveIndRes:NV.Diversion Requested" [date2], date2 ) + "FlowToVolume"( $ "NvDvsToPkr:BigBend.Diversion Requested" [date2], date2 ) + "FlowToVolume"( $ "NvDvsToPkr:SCE.Diversion Requested" [date2], date2 ) + "FlowToVolume"( $ "OthersMeadToMohave:LMNRA Nv Mohave.Diversion Requested" [date2], date2 )
    ENDFOR DO
     ( "Min"( $ "AnnualWaterUse.NV_BasicApportionment" [] - shortageVolume, $ "AnnualWaterUse.Nevada_Apportionment" ["Dec31ofYear"( @"t" )] ) - NonSNWANevadaDivReqs )
    ENDWITH
   ENDWITH
  ENDWITH DO
   "VolumeToFlow"( snwpDivVol * MonthPercent, date )
  ENDWITH
 ENDWITH;

            $ "CAPDiversion.Total Diversion Requested" [date] := "CAP Shortage Depletion"( $ "Shortage.Shortage Flag" [@"24:00:00 December 31, Current Year"] - 1.00000000, date );

            $ "CAPDiversion.Total Depletion Requested" [date] := "CAP Shortage Depletion"( $ "Shortage.Shortage Flag" [@"24:00:00 December 31, Current Year"] - 1.00000000, date );

      ENDFOREACH;

    END
    UUID "{bf2db773-6e4e-4b28-9ad7-197185f5ef94}";;

    RULE                 "NI - Set CAP Annual Shortage Volume";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND @"t" != @"Start Timestep";
    NOTES                "";
    BEGIN

    DESCRIPTION          "There is a similar rule used in the MTOM ruleset which sets the shortage volume for CAP. This slot <br>is not used anywhere else in the current 24 MS ruleset <br>";
      $ "Shortage.CAP Annual Shortage Volume" [@"24:00:00 December 31, Current Year"] := IF ( $ "Shortage.Shortage Flag" [@"24:00:00 December 31, Current Year"] > 0.00000000 )
 THEN
  "GetAnnualCAPShortage"( $ "Shortage.Shortage Flag" [@"24:00:00 December 31, Current Year"] - 1.00000000 )
 ELSE
  0.00000000 "acre-feet"
 ENDIF;

    END
    UUID "{7fe0c1d1-4699-47c9-a9c1-72bdf12e0bdb}";;

    RULE                 "INT - Set Shortage Flag";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND @"t" != @"Start Timestep";
    NOTES                "";
    BEGIN

      $ "Shortage.Shortage Flag" [@"24:00:00 December 31, Current Year"] := IF ( $ "Mead.Pool Elevation" [@"t - 1"] < $ "Shortage.Mead Shortage Elevations" [2.00000000, 0.00000000] )
 THEN
  3.00000000
 ELSE
  IF ( $ "Mead.Pool Elevation" [@"t - 1"] < $ "Shortage.Mead Shortage Elevations" [1.00000000, 0.00000000] )
  THEN
   2.00000000
  ELSE
   IF ( $ "Mead.Pool Elevation" [@"t - 1"] <= $ "Shortage.Mead Shortage Elevations" [0.00000000, 0.00000000] )
   THEN
    1.00000000
   ELSE
    0.00000000
   ENDIF
  ENDIF
 ENDIF;

    END
    UUID "{6cdea608-7e16-4efb-bccc-17b8a1907965}";;

  END
  UUID "{bcccf7e9-70cd-4d8a-a762-6ffd4df504d6}";;

  POLICY_GROUP   "24 Month";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "INT - Set Flow To Mexico (flow at NIB) exp";
    DESCRIPTION          "This rule just computes the flow to Mexico and stores it on the<br>MexicoExcess data object in the slot NIBFlow for subsequent write to hdb<br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

    DESCRIPTION          "24MS = MTOM <br>";
      $ "Lower Basin Output.NIBFlow" [] := $ "Lower Basin Output.MexicoExcessFlow" [] + $ "MexicanTreatyDelivery:MexicoSched.Diversion Requested" [];

    END
    UUID "{984763cc-a31e-42f9-b362-27d31364044e}";;

    RULE                 "INT - Set Mexico Excess";
    DESCRIPTION          " this rule determines the excess flow to Mexico which is just the<br> actual Mead release minus the release determined to meet downstream requirements <br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

    DESCRIPTION          "MTOM = 24 MS rule <br>";
      $ "Lower Basin Output.MexicoExcessFlow" [] := $ "Mead.Outflow" [] - "VolumeToFlow"( $ "Lower Basin Output.DownstreamReq" [], @"t" );

    END
    UUID "{a519d10f-17f7-4260-8f4d-04d824bf5ba5}";;

    RULE                 "INT - Set DownStream Requirement exp";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "DEVELOPMENT NOTES: <br>CH, 8/25/17: Replaced call to SumGainsBelowVolume with SumAllGainsBelowVolume<br>202005 (AP): Added referecnce to MWD returns in calculation of downstream requirements";
    BEGIN

      $ "Lower Basin Output.DownstreamReq" [] := $ "HavasuOutflow.ParkerRequirement" [] + "SumAllDiversionsBelowVolume"( % "Mead", @"t", @"t" ) - ( "SumAllGainsBelowVolume"( % "Mead", @"t", @"t" ) + $ "California_CU_Schedules.MWDReturns" [@"t"] ) + "ComputeDeltaTargetStorage"( % "Mohave" ) + "ComputeDeltaTargetStorage"( % "Havasu" ) + $ "Mohave.Evaporation" [] + $ "Havasu.Evaporation" [];

    END
    UUID "{b3f50db7-53f5-40b6-9670-fc54b394595a}";;

    RULE                 "INT - Set Parker Final Requirement";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

    DESCRIPTION          "This rule is almost the same. Small change in MTOM that shouldnt effect the results of the run<br>";
      $ "HavasuOutflow.ParkerRequirement" [] := "SumAllDiversionsBelowVolume"( % "Havasu", @"t", @"t" ) - "SumAllGainsBelowVolume"( % "Havasu", @"t", @"t" );

    END
    UUID "{f30fd1f8-e11a-47af-979f-c371adf99691}";;

    RULE                 "NI - Set Below Imp Outflow";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT IsNaN $ "FloodControlOutput.Flood Control Flag" [];
    NOTES                "";
    BEGIN

    DESCRIPTION          "This rule is turned off in the 24 MS and not in MTOM. Not integrated <br>";
      $ "BelowImperialDam.Outflow" [] := 0.00000000 "acre-ft/month";

    END
    UUID "{9aaf185a-73c2-4d43-a07c-0ea69f0050b0}";;

  END
  UUID "{cef8b78a-fd3a-407e-b9bd-4bdd9f55aeee}";;

  POLICY_GROUP   "Set Future Uses - SNWP, CAP, MWD";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "INT - Havasu Rule Curve";
    DESCRIPTION          "This rule could just as easily use a target elevation rather than a storage.<br>It would probably be safer to do so.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" > @"Start Timestep + 1";
    NOTES                "";
    BEGIN

      $ "Havasu.Outflow" [] := "SolveOutflow"( % "Havasu", $ "Havasu.Inflow" [], "GetTargetStorage"( % "Havasu", @"t" ), $ "Havasu.Storage" [@"t - 1"], @"t" );

    END
    UUID "{432ac534-ce9a-4aaf-b042-4720f5c146c7}";;

    RULE                 "INT - Set Havasu Outflow Exp";
    DESCRIPTION          "This rule sets Havasu's outflow to the the scheduled release from the <br>data object, HavasuOutflow.Outflow we only do this if the outflow is currently not set.  this allows<br>for setting Hoover's outflow manually";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT IsNaN $ "Havasu.Outflow" [] AND @"t" <= @"Start Timestep + 1";
    NOTES                "";
    BEGIN

      $ "Havasu.Outflow" [] := $ "HavasuOutflow.BHOPSParkerOutflow" [];

    END
    UUID "{9a9f245e-3b6d-44f0-9554-e40f427f44bc}";;

    RULE                 "INT -  Mohave Rule Curve";
    DESCRIPTION          "This rule could just as easily use a target elevation rather than a storage.<br>It would probably be safer to do so.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      $ "Mohave.Outflow" [] := "SolveOutflow"( % "Mohave", $ "Mohave.Inflow" [], "GetTargetStorage"( % "Mohave", @"t" ), $ "Mohave.Storage" [@"t - 1"], @"t" );

    END
    UUID "{c795cd00-417c-4415-a144-50cb9c8e7e22}";;

    RULE                 "INT - Set Mead Outflow To Demands";
    DESCRIPTION          "202005 (AP): Added refernce to gMWD reurns in calculation (was not being taken into account as a gain below Mead)";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "DEVELOPMENT NOTES: <br>CH, 8/25/17: Replaced call to SumGainsBelowVolume with SumAllGainsBelowVolume";
    BEGIN

    DESCRIPTION          "Using updated logic in the MTOM ruleset <br>";
      $ "Mead.Outflow" [] := IF ( @"t" <= @"Start Timestep + 1" )
 THEN
  "VolumeToFlow"( "FlowToVolume"( $ "HavasuOutflow.BHOPSParkerOutflow" [], @"t" ) + "SumAllDiversionsBelowVolume"( % "Mead", @"t", @"t" ) - ( "SumAllGainsBelowVolume"( % "Mead", @"t", @"t" ) + $ "California_CU_Schedules.MWDReturns" [@"t"] ) + "ComputeDeltaTargetStorage"( % "Mohave" ) + "ComputeDeltaTargetStorage"( % "Havasu" ) + $ "Mohave.Evaporation Coefficients" ["GetMonth"( @"t" ) - 1.00000000, 0.00000000] * ( ( "StorageToArea"( % "Mohave", "GetTargetStorage"( % "Mohave", @"t" ) ) + "StorageToArea"( % "Mohave", $ "Mohave.Storage" [@"t - 1"] ) ) / 2.00000000 ) * 1.00000000 "month" + $ "Havasu.Evaporation Coefficients" ["GetMonth"( @"t" ) - 1.00000000, 0.00000000] * ( ( "StorageToArea"( % "Havasu", "GetTargetStorage"( % "Havasu", @"t" ) ) + "StorageToArea"( % "Havasu", $ "Havasu.Storage" [@"t - 1"] ) ) / 2.00000000 ) * 1.00000000 "month", @"t" )
 ELSE
  "VolumeToFlow"( "SumAllDiversionsBelowVolume"( % "Havasu", @"t", @"t" ) - "SumAllGainsBelowVolume"( % "Havasu", @"t", @"t" ) + "SumAllDiversionsBelowVolume"( % "Mead", @"t", @"t" ) - ( "SumAllGainsBelowVolume"( % "Mead", @"t", @"t" ) + $ "California_CU_Schedules.MWDReturns" [@"t"] ) + "ComputeDeltaTargetStorage"( % "Mohave" ) + "ComputeDeltaTargetStorage"( % "Havasu" ) + $ "Mohave.Evaporation Coefficients" ["GetMonth"( @"t" ) - 1.00000000, 0.00000000] * ( ( "StorageToArea"( % "Mohave", "GetTargetStorage"( % "Mohave", @"t" ) ) + "StorageToArea"( % "Mohave", "GetTargetStorage"( % "Mohave", @"t - 1" ) ) ) / 2.00000000 ) * 1.00000000 "month" + $ "Havasu.Evaporation Coefficients" ["GetMonth"( @"t" ) - 1.00000000, 0.00000000] * ( ( "StorageToArea"( % "Havasu", "GetTargetStorage"( % "Havasu", @"t" ) ) + "StorageToArea"( % "Havasu", "GetTargetStorage"( % "Havasu", @"t - 1" ) ) ) / 2.00000000 ) * 1.00000000 "month", @"t" )
 ENDIF;

    END
    UUID "{cdc3759c-b7ff-4832-b24b-0227c4aec55d}";;

    RULE                 "INT - Reset Monthly Forecast Use CAP - Nov and Dec, Cur Year";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep" AND NOT IsNaN $ "ForecastUse.CAPResetAnnualFC" [@"24:00:00 December 31, Current Year"] AND "GetMonth"( @"t" ) < 11.00000000;
    NOTES                "APivarnik, 202005: Added slot assignment for CAP depletion to solve for correct return flow (0)";
    BEGIN

      FOREACH (DATETIME date IN @"24:00:00 November Max DayOfMonth, Current Year" TO @"24:00:00 December Max DayOfMonth, Current Year") DO
            $ "CAPDiversion.Total Diversion Requested" [date] := ( "VolumeToFlow"( $ "ForecastUse.CAPResetAnnualFC" [@"24:00:00 December 31, Current Year"], date ) - "VolumeToFlow"( $ "Arizona_CU_Forecast1.CAP" [@"24:00:00 December 31, Current Year"], date ) ) / 2.00000000 + "VolumeToFlow"( $ "Arizona_CU_Schedules.CAP" [date], date );

            $ "CAPDiversion.Total Depletion Requested" [date] := ( "VolumeToFlow"( $ "ForecastUse.CAPResetAnnualFC" [@"24:00:00 December 31, Current Year"], date ) - "VolumeToFlow"( $ "Arizona_CU_Forecast1.CAP" [@"24:00:00 December 31, Current Year"], date ) ) / 2.00000000 + "VolumeToFlow"( $ "Arizona_CU_Schedules.CAP" [date], date );

      ENDFOREACH;

    END
    UUID "{e8550185-bbb4-4410-baeb-8fdf8b69d805}";;

    RULE                 "INT - Reset Monthly Forecast Use CAP - All Months Outyears";
    DESCRIPTION          "For start timestep in December the outyear schedules are only adjusted February through December, in all other start timesteps the schedules are adjusted January through December. In December, January of the outyear is the second month of the run and we have operational schedules for that month.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT IsNaN $ "ForecastUse.CAPResetAnnualFC" [@"24:00:00 December 31, Current Year"] AND ( @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND @"t" != @"Start Timestep" );
    NOTES                "DEVELOPMENT NOTES:<br>CH, 9/6/17: Changed GetFirstDate (@&quot;t&quot;) to @&quot;t&quot;<br><br>GA, 12/6/17: Reverted back to using GetFirstDate function<br>APivarnik, 202005: Added slot assignment for CAP depletion to solve for correct return flow (0)";
    BEGIN

      FOREACH (DATETIME date IN "GetFirstDate"( @"t" ) TO @"24:00:00 December Max DayOfMonth, Current Year") DO
            $ "CAPDiversion.Total Diversion Requested" [date] := ( "VolumeToFlow"( $ "ForecastUse.CAPResetAnnualFC" [@"24:00:00 December 31, Current Year"], date ) - "VolumeToFlow"( $ "Arizona_CU_Forecast1.CAP" [@"24:00:00 December 31, Current Year"], date ) ) / "GetDaysBasedOnFirstDate"( @"t" ) + "VolumeToFlow"( $ "Arizona_CU_Schedules.CAP" [date], date );

            $ "CAPDiversion.Total Depletion Requested" [date] := ( "VolumeToFlow"( $ "ForecastUse.CAPResetAnnualFC" [@"24:00:00 December 31, Current Year"], date ) - "VolumeToFlow"( $ "Arizona_CU_Forecast1.CAP" [@"24:00:00 December 31, Current Year"], date ) ) / "GetDaysBasedOnFirstDate"( @"t" ) + "VolumeToFlow"( $ "Arizona_CU_Schedules.CAP" [date], date );

      ENDFOREACH;

    END
    UUID "{27c5cfbc-0d92-43d5-813c-31bf4768373d}";;

    RULE                 "INT - Reset Monthly Forecast Use SNWP All Years";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT IsNaN $ "ForecastUse.SNWPResetAnnualFC" [@"24:00:00 December 31, Current Year"] AND ( @"t" == @"Start Timestep" OR @"t" == @"24:00:00 January Max DayOfMonth, Current Year" );
    NOTES                "GCAA, 202006: Added SNWA Depletion slot assignment to help model solve for correct return flow to system";
    BEGIN

      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December Max DayOfMonth, Current Year") DO
            $ "PumpingFromLakeMead:SNWP.Diversion Requested" [date] := IF ( "GetYear"( @"t" ) == "GetYear"( @"Start Timestep" ) )
 THEN
  $ "PumpingFromLakeMead:SNWP.Diversion Requested" [date] + ( "VolumeToFlow"( $ "ForecastUse.SNWPResetAnnualFC" [@"24:00:00 December 31, Current Year"], date ) - "VolumeToFlow"( $ "Nevada_CU_Forecast1.SNWP" [@"24:00:00 December 31, Current Year"], date ) ) / ( 12.00000000 - "GetMonth"( @"Start Timestep" ) + 1.00000000 )
 ELSE
  "VolumeToFlow"( $ "ForecastUse.SNWPResetAnnualFC" [@"24:00:00 December 31, Current Year"], date ) * ( "FlowToVolume"( $ "PumpingFromLakeMead:SNWP.Diversion Requested" [date], date ) / "SumFlowsToVolume"( $ "PumpingFromLakeMead:SNWP.Diversion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) )
 ENDIF;

            $ "PumpingFromLakeMead:SNWP.Depletion Requested" [date] := IF ( "GetYear"( @"t" ) == "GetYear"( @"Start Timestep" ) )
 THEN
  $ "PumpingFromLakeMead:SNWP.Diversion Requested" [date] + ( "VolumeToFlow"( $ "ForecastUse.SNWPResetAnnualFC" [@"24:00:00 December 31, Current Year"], date ) - "VolumeToFlow"( $ "Nevada_CU_Forecast1.SNWP" [@"24:00:00 December 31, Current Year"], date ) ) / ( 12.00000000 - "GetMonth"( @"Start Timestep" ) + 1.00000000 )
 ELSE
  "VolumeToFlow"( $ "ForecastUse.SNWPResetAnnualFC" [@"24:00:00 December 31, Current Year"], date ) * ( "FlowToVolume"( $ "PumpingFromLakeMead:SNWP.Diversion Requested" [date], date ) / "SumFlowsToVolume"( $ "PumpingFromLakeMead:SNWP.Diversion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) )
 ENDIF;

      ENDFOREACH;

    END
    UUID "{910472e8-a62b-43ef-a9d7-e37323bbc28f}";;

    RULE                 "INT -  Reset Monthly Forecast Use MWD - Nov and Dec, Cur Year";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep" AND NOT IsNaN $ "ForecastUse.MWDResetAnnualFC" [@"24:00:00 December 31, Current Year"] AND "GetMonth"( @"t" ) < 11.00000000;
    NOTES                "202005 (AP): Added MWD depletion requested slot assignment to the rule";
    BEGIN

      FOREACH (DATETIME date IN @"24:00:00 November Max DayOfMonth, Current Year" TO @"24:00:00 December Max DayOfMonth, Current Year") DO
            $ "MWDDiversion:MWD.Diversion Requested" [date] := "Max"( 0.00000000 "acre-ft/month", ( "VolumeToFlow"( $ "ForecastUse.MWDResetAnnualFC" [@"24:00:00 December 31, Current Year"], date ) - "VolumeToFlow"( $ "California_CU_Forecast1.MWD" [@"24:00:00 December 31, Current Year"], date ) ) / 2.00000000 + "VolumeToFlow"( $ "California_CU_Schedules.MWDDiversion" [date], date ) );

            $ "MWDDiversion:MWD.Depletion Requested" [date] := "Max"( 0.00000000 "acre-ft/month", ( "VolumeToFlow"( $ "ForecastUse.MWDResetAnnualFC" [@"24:00:00 December 31, Current Year"], date ) - "VolumeToFlow"( $ "California_CU_Forecast1.MWD" [@"24:00:00 December 31, Current Year"], date ) ) / 2.00000000 + "VolumeToFlow"( $ "California_CU_Schedules.MWDDiversion" [date] - $ "California_CU_Schedules.MWDReturns" [date], date ) );

      ENDFOREACH;

    END
    UUID "{f9e06a83-4be4-447c-9bb0-bb6256ce665c}";;

    RULE                 "INT - Reset Monthly Forecast Use MWD - All Months Outyears";
    DESCRIPTION          "For start timestep in December the outyear schedules are only adjusted February through December, in all other start timesteps the schedules are adjusted January through December. In December, January of the outyear is the second month of the run and we have operational schedules for that month.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT IsNaN $ "ForecastUse.MWDResetAnnualFC" [@"24:00:00 December 31, Current Year"] AND ( @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND @"t" != @"Start Timestep" );
    NOTES                "DEVELOPMENT NOTES:<br>CH, 9/6/17: Changed GetFirstDate (@&quot;t&quot;) to @&quot;t&quot;<br><br>GA, 12/6/17: Reverted back to using GetFirstDate function<br><br>202005 (AP): Added MWD depletion requested slot assignment to the rule";
    BEGIN

      FOREACH (DATETIME date IN "GetFirstDate"( @"t" ) TO @"24:00:00 December Max DayOfMonth, Current Year") DO
            $ "MWDDiversion:MWD.Diversion Requested" [date] := ( "VolumeToFlow"( $ "ForecastUse.MWDResetAnnualFC" [@"24:00:00 December 31, Current Year"], date ) - "VolumeToFlow"( $ "California_CU_Forecast1.MWD" [@"24:00:00 December 31, Current Year"], date ) ) / "GetDaysBasedOnFirstDate"( @"t" ) + "VolumeToFlow"( $ "California_CU_Schedules.MWDDiversion" [date], date );

            $ "MWDDiversion:MWD.Depletion Requested" [date] := ( "VolumeToFlow"( $ "ForecastUse.MWDResetAnnualFC" [@"24:00:00 December 31, Current Year"], date ) - "VolumeToFlow"( $ "California_CU_Forecast1.MWD" [@"24:00:00 December 31, Current Year"], date ) ) / "GetDaysBasedOnFirstDate"( @"t" ) + "VolumeToFlow"( $ "California_CU_Schedules.MWDDiversion" [date] - $ "California_CU_Schedules.MWDReturns" [date], date );

      ENDFOREACH;

    END
    UUID "{d2d277e8-8026-4f76-913d-6d2752028bc8}";;

    RULE                 "INT - SumAnnualStateUse - Div Req";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      FOREACH (STRING state IN { "AzNoCAP" , "Nv" }) DO
            "AnnualWaterUse." CONCAT state CONCAT "TotalAnnual" [@"24:00:00 December 31, Current Year"] := IF ( "GetYear"( @"t" ) == "GetYear"( @"Start Timestep" ) AND "GetMonth"( @"Start Timestep" ) > 1.00000000 )
 THEN
  "SumSlot"( % "AnnualWaterUse" & ( state CONCAT "TotalMonthlyOrder" ), @"Start Timestep", @"24:00:00 December Max DayOfMonth, Current Year" ) + "SumSlot"( % "AnnualWaterUse" & ( state CONCAT "TotalMonthlyActual" ), @"24:00:00 January Max DayOfMonth, Current Year", @"Start Timestep - 1" )
 ELSE
  "SumSlot"( % "AnnualWaterUse" & ( state CONCAT "TotalMonthlyOrder" ), @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" )
 ENDIF;

      ENDFOREACH;

    END
    UUID "{dd7ad3a8-95d5-403d-ad11-2c66e62e950c}";;

    RULE                 "INT - SumStateMonthlyOrders - DivReq-noP123b or IID";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep" OR @"t" == @"24:00:00 January 31, Current Year";
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>GCAA, 11/13/17: BLM Pumpers are now included in the the assignment for AnnualWateruse.AzNoCAPTotalMonthlyOrderl.";
    BEGIN

    DESCRIPTION          "This rule covered under the &quot;SumStateMonthlyOrders - DivReq&quot; rule <br>";
      FOREACH (DATETIME date IN @"24:00:00 January Max DayOfMonth, Current Year" TO @"24:00:00 December Max DayOfMonth, Current Year") DO
            $ "AnnualWaterUse.AzNoCAPTotalMonthlyOrder" [date] := "FlowToVolume"( $ "AzPkrToImp.Total Diversion Requested" [date], date ) + "FlowToVolume"( $ "GilaGravityMainCanal.Total Diversion Requested" [date], date ) + "FlowToVolume"( $ "GilaAndYumaUsers.Total Diversion Requested" [date], date ) + "FlowToVolume"( $ "CRIR:CRIRAz.Diversion Requested" [date], date ) + "FlowToVolume"( $ "OthersBlwImp:AzPumpersBlwImp.Diversion Requested" [date], date ) + "FlowToVolume"( $ "OthersBlwImp:SouthernPacific.Diversion Requested" [date], date ) + "FlowToVolume"( $ "OthersBlwImp:YAO.Diversion Requested" [date], date ) + "FlowToVolume"( $ "FtMohaveIndRes:AZ.Diversion Requested" [date], date ) + "FlowToVolume"( $ "AzDvsToPkr.Total Diversion Requested" [date], date ) + "FlowToVolume"( $ "PumpingFromLakeMead:LMNRA Az Mead.Diversion Requested" [date], date ) + "FlowToVolume"( $ "OthersMeadToMohave:LMNRA Az Mohave.Diversion Requested" [date], date ) + "FlowToVolume"( $ "OthersBlwImp:Ft Yuma.Diversion Requested" [date], date ) + "FlowToVolume"( $ "OthersMeadToMohave:DavisDamProject.Diversion Requested" [date], date ) + "FlowToVolume"( $ "OthersBlwImp:BlmPumpersBlwImp.Diversion Requested" [date], date );

            $ "AnnualWaterUse.NvTotalMonthlyOrder" [date] := "FlowToVolume"( $ "PumpingFromLakeMead:SNWP.Diversion Requested" [date], date ) + "FlowToVolume"( $ "NvDvsToPkr.Total Diversion Requested" [date], date ) + "FlowToVolume"( $ "FtMohaveIndRes:NV.Diversion Requested" [date], date ) + "FlowToVolume"( $ "OthersMeadToMohave:LMNRA Nv Mohave.Diversion Requested" [date], date );

      ENDFOREACH;

    END
    UUID "{a01808b1-7511-48d3-ad8e-90f8018b2ac5}";;

  END
  UUID "{0ece30cd-7bfd-4bac-b676-debaeaac19fd}";;

  POLICY_GROUP   "Reset Forecast Use - SNWP, CAP, MWD";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "INT - Reset MWD Annual Forecast Use - Force to CA Apportionment";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT IsNaN $ "ForecastUse.MWDResetAnnualFC" [@"24:00:00 December 31, Current Year"];
    NOTES                "";
    BEGIN

      $ "ForecastUse.MWDResetAnnualFC" [@"24:00:00 December 31, Current Year"] := $ "California_CU_Forecast1.MWD" [@"24:00:00 December 31, Current Year"] - $ "California_CU_Overrun.California_Overrun_State_Ap" [];

    END
    UUID "{d4d2ba24-fe3d-42de-b588-e256bfa639d1}";;

    RULE                 "NI - Reset Annual CAP Forecast Use - Keep Hardcode Value";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT IsNaN $ "ForecastUse.CAPResetAnnualFC" [@"24:00:00 December 31, Current Year"];
    NOTES                "";
    BEGIN

    DESCRIPTION          "This rule was not in MTOM and turned off in the 24 MS. Not moved into the integrated ruleset <br>";
      $ "ForecastUse.CAPResetAnnualFC" [@"24:00:00 December 31, Current Year"] := "AnnualVolumeSlot"( $ "Arizona_CU_Schedules.CAP" );

    END
    UUID "{84465160-7675-4ed7-ad6a-6b2a673487ad}";;

    RULE                 "INT - Reset Annual CAP Forecast Use - Force to AZ Apportionment";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT IsNaN $ "ForecastUse.CAPResetAnnualFC" [@"24:00:00 December 31, Current Year"];
    NOTES                "";
    BEGIN

      $ "ForecastUse.CAPResetAnnualFC" [@"24:00:00 December 31, Current Year"] := $ "Arizona_CU_Forecast1.CAP" [@"24:00:00 December 31, Current Year"] - $ "Arizona_CU_Overrun.Arizona_Overrun_State_Ap" [];

    END
    UUID "{71b3d046-f66f-4699-bf09-923246302a9d}";;

    RULE                 "INT - Reset Annual SNWP Forecast Use - Force to NV Apportionment";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT IsNaN $ "ForecastUse.SNWPResetAnnualFC" [@"24:00:00 December 31, Current Year"];
    NOTES                "";
    BEGIN

      $ "ForecastUse.SNWPResetAnnualFC" [@"24:00:00 December 31, Current Year"] := $ "Nevada_CU_Forecast1.SNWP" [@"24:00:00 December 31, Current Year"] - $ "Nevada_CU_Overrun.Nevada_Overrun_State_Ap" [];

    END
    UUID "{e549c9a5-ed7e-4ef6-bd86-22cc0ac3b194}";;

    RULE                 "NI - Reset Annual SNWP Forecast Use - Allow Overrun";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT IsNaN $ "ForecastUse.SNWPResetAnnualFC" [@"24:00:00 December 31, Current Year"];
    NOTES                "";
    BEGIN

    DESCRIPTION          "This rule was turned off in the 24 MS and was not in the MTOM ruleset. This was not moved into <br>the integrated model <br>";
      $ "ForecastUse.SNWPResetAnnualFC" [@"24:00:00 December 31, Current Year"] := $ "Nevada_CU_Forecast1.SNWP" [@"24:00:00 December 31, Current Year"] - "Min"( $ "Nevada_CU_Overrun.Nevada_Overrun_State_Ap" [], 0.00000000 "acre-ft" );

    END
    UUID "{408b0f4c-688a-4874-9b7f-8e764316ca37}";;

    RULE                 "NI - Reset Annual SNWP Forecast Use - Allow Underrun";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT IsNaN $ "ForecastUse.SNWPResetAnnualFC" [@"24:00:00 December 31, Current Year"];
    NOTES                "";
    BEGIN

    DESCRIPTION          "This rule is not in MTOM and is turned off in the 24 MS. It was not moved into the integrated <br>ruleset<br>";
      $ "ForecastUse.SNWPResetAnnualFC" [@"24:00:00 December 31, Current Year"] := $ "Nevada_CU_Forecast1.SNWP" [@"24:00:00 December 31, Current Year"] - "Max"( $ "Nevada_CU_Overrun.Nevada_Overrun_State_Ap" [], 0.00000000 "acre-ft" );

    END
    UUID "{86285b7a-c261-49bf-a0a3-4ac5e93cb074}";;

  END
  UUID "{3dc19928-24d7-4825-b835-4a0564402282}";;

  POLICY_GROUP   "LC WaterUse Data Setup";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "INT - Set Normal Schedules CAP";
    DESCRIPTION          "May need 2nd condition (@t = Jan, current year) for full surplus<br>Need to separate CAP from MWD & SNWP for full surplus<br><br>DEVELOPMENT NOTES:<br>CH, 8/25/17: replaced calls to GetLastDate function with &quot;24:00 December 31, Finish Year&quot;<br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep";
    NOTES                "APivarnik, 202005: Added slot assignment for CAP depletion requested";
    BEGIN

      FOREACH (DATETIME date IN @"24:00:00 January Max DayOfMonth, Current Year" TO @"24:00:00 December 31, Finish Year") DO
            $ "CAPDiversion.Total Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.CAP" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.CAP" [date], date )
 ENDIF;

            $ "CAPDiversion.Total Depletion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.CAP" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.CAP" [date], date )
 ENDIF;

      ENDFOREACH;

    END
    UUID "{b057de7b-3937-4024-b71e-39c003ddce51}";;

    RULE                 "INT - Set Normal Schedules MWD & SNWP";
    DESCRIPTION          "Need to separate CAP & CVWD from MWD & SNWP for full surplus<br><br>DEVELOPMENT NOTES:<br>CH, 8/25/17: replaced calls to GetLastDate function with &quot;24:00 December 31, Finish Year&quot;<br>202005 (AP): Added MWD depletion/Tijuana Depletion requested slot assignment to the rule";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep";
    NOTES                "GCAA, 202006: Added SNWA Depletion slot assignment to help model solve for correct return flow to system";
    BEGIN

      FOREACH (DATETIME date IN @"24:00:00 January Max DayOfMonth, Current Year" TO @"24:00:00 December Max DayOfMonth, Finish Year") DO
            $ "MWDDiversion:MWD.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "California_CU_Actual.MWDDiversion" [date], date )
 ELSE
  "VolumeToFlow"( $ "California_CU_Schedules.MWDDiversion" [date], date )
 ENDIF;

            $ "MWDDiversion:MWD.Depletion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "California_CU_Actual.MWD" [date], date )
 ELSE
  "VolumeToFlow"( $ "California_CU_Schedules.MWD" [date], date )
 ENDIF;

            $ "MWDDiversion:Tijuana.Depletion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Mexico_CU_Actual.MexicoTJ" [date], date )
 ELSE
  "VolumeToFlow"( $ "Mexico_CU_Schedules.MexicoTJ" [date], date )
 ENDIF;

            $ "PumpingFromLakeMead:SNWP.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Nevada_CU_Actual.SNWP" [date], date )
 ELSE
  "VolumeToFlow"( $ "Nevada_CU_Schedules.SNWP" [date], date )
 ENDIF;

            $ "PumpingFromLakeMead:SNWP.Depletion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Nevada_CU_Actual.SNWP" [date], date )
 ELSE
  "VolumeToFlow"( $ "Nevada_CU_Schedules.SNWP" [date], date )
 ENDIF;

      ENDFOREACH;

    END
    UUID "{6a7e5b7c-0d93-4e51-aa02-40068b856809}";;

    RULE                 "INT - Set Operational GainLoss";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep";
    NOTES                "";
    BEGIN

      FOREACH (DATETIME date IN @"Start Timestep" TO @"Finish Timestep") DO
            $ "HavasuToImperial:DailyOperationalGainLoss.Local Inflow" [date] := IF ( date <= @"24:00:00 December Max DayOfMonth, Current Year" )
 THEN
  ( "VolumeToFlow"( $ "HavasuOutflow.ParkerScheduleRequirement" [date], date ) - $ "HavasuOutflow.BHOPSParkerOutflow" [date] )
 ELSE
  0.00000000 "acre-ft/month"
 ENDIF;

      ENDFOREACH;

    END
    UUID "{2ded6860-7a6e-405e-9dbb-5ab5123809c5}";;

    RULE                 "INT -  Set Parker Schedule Requirement";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep" AND IsNaN $ "HavasuOutflow.ParkerScheduleRequirement" [];
    NOTES                "";
    BEGIN

    DESCRIPTION          "This rule matches the MTOM <br>";
      FOREACH (DATETIME date IN @"Start Timestep" TO @"Finish Timestep") DO
            $ "HavasuOutflow.ParkerScheduleRequirement" [date] := "FlowToVolume"( $ "AAC.Total Diversion Requested" [date], date ) + "FlowToVolume"( $ "AzPkrToImp.Total Diversion Requested" [date], date ) + "FlowToVolume"( $ "CRIR.Total Diversion Requested" [date], date ) + "FlowToVolume"( $ "CaPkrToImp.Total Diversion Requested" [date], date ) + "FlowToVolume"( $ "GilaAndYumaUsers.Total Diversion Requested" [date], date ) + "FlowToVolume"( $ "GilaGravityMainCanal.Total Diversion Requested" [date], date ) + "FlowToVolume"( $ "PaloVerde.Total Diversion Requested" [date], date ) + "FlowToVolume"( $ "OthersBlwImp.Total Diversion Requested" [date], date ) + "FlowToVolume"( $ "MexicanTreatyDelivery.Total Diversion Requested" [date], date ) - ( "FlowToVolume"( $ "HavasuToImperial:GainsPkrToImp.Local Inflow" [date], date ) + "FlowToVolume"( $ "BelowImperialDam:GainsImpToNIB.Local Inflow" [date], date ) + "FlowToVolume"( $ "BelowImperialDam:Gila River.Local Inflow" [date], date ) );

      ENDFOREACH;

    END
    UUID "{ca88a223-4842-409f-850c-0433985e1fde}";;

    RULE                 "INT - SumStateMonthlyActualCU-noP123b or IID";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep";
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>GCAA, 11/13/17: The assignment for AnnualWateruse.AzNoCAPTotalMonthlyActual modified to include BLM Pumpers.<br><br>ST, 20190624: Removed CANoPVYPIID and P123b in clean-up effort - those slots are not needed and not used";
    BEGIN

    DESCRIPTION          "This rule is covered by the Sum state monthly actual CU in the integrated ruleset <br>";
      FOREACH (DATETIME date IN @"24:00:00 January Max DayOfMonth, Current Year" TO @"Start Timestep - 1") DO
            $ "AnnualWaterUse.AzNoCAPTotalMonthlyActual" [date] := $ "Arizona_CU_Actual.CRIRAz" [date] + $ "Arizona_CU_Actual.CibolaNWR" [date] + $ "Arizona_CU_Actual.CibolaValleyIID" [date] + $ "Arizona_CU_Actual.City of Parker" [date] + $ "Arizona_CU_Actual.ImperialNWR" [date] + $ "Arizona_CU_Actual.BrookeWater" [date] + $ "Arizona_CU_Actual.Ehrenberg" [date] + $ "Arizona_CU_Actual.AzPumpersAbvImp" [date] + $ "Arizona_CU_Actual.AzPumpersBlwImp" [date] + $ "Arizona_CU_Actual.NGVIDD" [date] + $ "Arizona_CU_Actual.WMIDD" [date] + $ "Arizona_CU_Actual.YCWUA" [date] + $ "Arizona_CU_Actual.MCAirStation" [date] + $ "Arizona_CU_Actual.YMIDD" [date] + $ "Arizona_CU_Actual.YID" [date] + $ "Arizona_CU_Actual.UnitB" [date] + $ "Arizona_CU_Actual.City of Yuma" [date] + $ "Arizona_CU_Actual.UofA" [date] + $ "Arizona_CU_Actual.LakeHavasuCity" [date] + $ "Arizona_CU_Actual.YumaUnionHighScl" [date] + $ "Arizona_CU_Actual.YumaProvingGround" [date] + $ "Arizona_CU_Actual.Cocopah Indian Res" [date] + $ "Arizona_CU_Actual.Gila Monster Farms" [date] + $ "Arizona_CU_Actual.DesertLawnMemorial" [date] + $ "Arizona_CU_Actual.SouthernPacific" [date] + $ "Arizona_CU_Actual.YAO" [date] + $ "Arizona_CU_Actual.BullheadCity" [date] + $ "Arizona_CU_Actual.FtMohaveAz" [date] + $ "Arizona_CU_Actual.DavisDamProject" [date] + $ "Arizona_CU_Actual.MohaveValleyIID" [date] + $ "Arizona_CU_Actual.MohaveWaterConsDist" [date] + $ "Arizona_CU_Actual.HavasuNWR" [date] + $ "Arizona_CU_Actual.GoldenShores" [date] + $ "Arizona_CU_Actual.LMNRA Az Mead" [date] + $ "Arizona_CU_Actual.LMNRA Az Mohave" [date] + $ "Arizona_CU_Actual.Ft Yuma" [date] + $ "Arizona_CU_Actual.AzPumpersDvsToPkr" [date] + $ "Arizona_CU_Actual.BlmPumpersAbvImp" [date] + $ "Arizona_CU_Actual.BlmPumpersBlwImp" [date];

            $ "AnnualWaterUse.NvTotalMonthlyActual" [date] := $ "Nevada_CU_Actual.SNWP" [date] + $ "Nevada_CU_Actual.FtMohaveNv" [date] + $ "Nevada_CU_Actual.BigBend" [date] + $ "Nevada_CU_Actual.SCE" [date] + $ "Nevada_CU_Actual.LMNRA Mohave" [date];

      ENDFOREACH;

    END
    UUID "{1e3201ed-cc8e-44e6-b6c3-44b1406ea447}";;

    RULE                 "INT- SetActualToZeroInFuture";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep";
    NOTES                "<br>ST, 20190624: Removed CANoPVYPIID and P123b in clean-up effort - those slots are not needed and not used";
    BEGIN

      FOREACH (DATETIME date IN @"Start Timestep" TO @"Finish Timestep") DO
            $ "AnnualWaterUse.AzNoCAPTotalMonthlyActual" [date] := 0.00000000 "acre-ft";

            $ "AnnualWaterUse.NvTotalMonthlyActual" [date] := 0.00000000 "acre-ft";

            FOREACH (STRING state IN { "California" , "Arizona" , "Nevada" }) DO
            FOREACH (STRING user IN "SlotToString"( "GetObject"( state CONCAT "_CU_Actual" ) )) DO
            "GetObject"( state CONCAT "_CU_Actual" ) & user [date] := 0.00000000 "acre-ft";

      ENDFOREACH;

      ENDFOREACH;

      ENDFOREACH;

    END
    UUID "{6f314acd-5280-4ee0-a0ba-cd3be717aa37}";;

    RULE                 "INT - Overruns Based on State Apportionments";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

    DESCRIPTION          "This rule matches whats in MTOM, not moved over<br>";
      FOREACH (STRING state IN { "California" , "Arizona" , "Nevada" }) DO
            "GetObject"( state CONCAT "_CU_Overrun" ) & ( state CONCAT "_Overrun_State_Ap" ) [] := % "AnnualWaterUse" & ( state CONCAT "_Forecast1" ) [@"24:00:00 December 31, Current Year"] - % "AnnualWaterUse" & ( state CONCAT "_Apportionment" ) [@"24:00:00 December 31, Current Year"];

      ENDFOREACH;

    END
    UUID "{5f6e9efc-8a51-4bb4-9be4-fa27344de5c3}";;

    RULE                 "NI - Set CU Over-Underruns User-By-User";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

    DESCRIPTION          "This rule was not migrated over to the integrated ruleset. This is disabled in the 24 MS and not in <br>MTOM <br>";
      FOREACH (STRING state IN { "California" , "Arizona" , "Nevada" }) DO
            FOREACH (STRING user IN "SlotToString"( "GetObject"( state CONCAT "_CU_AnnualApproval" ) )) DO
            "GetObject"( state CONCAT "_CU_Overrun" ) & user [] := "GetObject"( state CONCAT "_CU_Forecast1" ) & user [@"24:00:00 December 31, Current Year"] - "GetObject"( state CONCAT "_CU_AnnualApproval" ) & user [@"24:00:00 December 31, Current Year"];

      ENDFOREACH;

      ENDFOREACH;

    END
    UUID "{fdf2a1b0-5088-4254-992f-a4dfb949d128}";;

    RULE                 "INT - Sum Annual Approvals for Lower Basin States";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      FOREACH (STRING state IN { "California" , "Arizona" , "Nevada" }) DO
            % "AnnualWaterUse" & ( state CONCAT "_AnnualApproval" ) [@"24:00:00 December 31, Current Year"] := IF ( state == "Nevada" )
 THEN
  $ "Nevada_CU_AnnualApproval.SNWP" [@"24:00:00 December 31, Current Year"] + $ "Nevada_CU_AnnualApproval.BigBend" [@"24:00:00 December 31, Current Year"] + $ "Nevada_CU_AnnualApproval.FtMohaveNv" [@"24:00:00 December 31, Current Year"] + $ "Nevada_CU_AnnualApproval.LMNRA Mohave" [@"24:00:00 December 31, Current Year"] + $ "Nevada_CU_AnnualApproval.SCE" [@"24:00:00 December 31, Current Year"]
 ELSE
  IF ( state == "California" )
  THEN
   "SumSlotListDates"( "GetObject"( state CONCAT "_CU_AnnualApproval" ), @"24:00:00 December 31, Current Year" ) - $ "California_CU_AnnualApproval.MWDDiversion" [@"24:00:00 December 31, Current Year"] - $ "California_CU_AnnualApproval.MWDReturns" [@"24:00:00 December 31, Current Year"]
  ELSE
   "SumSlotListDates"( "GetObject"( state CONCAT "_CU_AnnualApproval" ), @"24:00:00 December 31, Current Year" )
  ENDIF
 ENDIF;

      ENDFOREACH;

    END
    UUID "{f40aee0c-96d6-4970-bfba-c4a7505ec702}";;

    RULE                 "INT - Sum Annual Forecast1 for Lower Basin States";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      FOREACH (STRING state IN { "California" , "Arizona" , "Nevada" }) DO
            % "AnnualWaterUse" & ( state CONCAT "_Forecast1" ) [@"24:00:00 December 31, Current Year"] := IF ( state == "Nevada" )
 THEN
  $ "Nevada_CU_Forecast1.SNWP" [@"24:00:00 December 31, Current Year"] + $ "Nevada_CU_Forecast1.BigBend" [@"24:00:00 December 31, Current Year"] + $ "Nevada_CU_Forecast1.FtMohaveNv" [@"24:00:00 December 31, Current Year"] + $ "Nevada_CU_Forecast1.LMNRA Mohave" [@"24:00:00 December 31, Current Year"] + $ "Nevada_CU_Forecast1.SCE" [@"24:00:00 December 31, Current Year"]
 ELSE
  IF ( state == "California" )
  THEN
   "SumSlotListDates"( % "California_CU_Forecast1", @"24:00:00 December 31, Current Year" ) - $ "California_CU_Forecast1.MWDDiversion" [@"24:00:00 December 31, Current Year"] - $ "California_CU_Forecast1.MWDReturns" [@"24:00:00 December 31, Current Year"]
  ELSE
   "SumSlotListDates"( % "Arizona_CU_Forecast1", @"24:00:00 December 31, Current Year" )
  ENDIF
 ENDIF;

      ENDFOREACH;

    END
    UUID "{15bec5d1-9d4e-41e6-87bd-53618546b7d6}";;

    RULE                 "INT - Set Forecast1";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      FOREACH (STRING state IN { "California" , "Arizona" , "Nevada" , "Mexico" }) DO
            FOREACH (STRING user IN "SlotToString"( "GetObject"( state CONCAT "_CU_Forecast1" ) )) DO
            "GetObject"( state CONCAT "_CU_Forecast1" ) & user [@"24:00:00 December 31, Current Year"] := IF ( "GetYear"( @"t" ) == "GetYear"( @"Start Timestep" ) AND "GetMonth"( @"Start Timestep" ) > 1.00000000 )
 THEN
  "SumSlot"( "GetObject"( state CONCAT "_CU_Actual" ) & user, @"24:00:00 January Max DayOfMonth, Current Year", @"Start Timestep - 1" ) + "SumSlot"( "GetObject"( state CONCAT "_CU_Schedules" ) & user, @"Start Timestep", @"24:00:00 December Max DayOfMonth, Current Year" )
 ELSE
  "AnnualVolumeSlot"( "GetObject"( state CONCAT "_CU_Schedules" ) & user )
 ENDIF;

      ENDFOREACH;

      ENDFOREACH;

    END
    UUID "{d9dd1b52-06ee-4a76-aed1-40b638befbb1}";;

    RULE                 "INT - Set Schedules Volume to Flow";
    DESCRIPTION          "DEVELOPMENT NOTES:<br>CH, 8/25/17: replaced calls to GetLastDate function with &quot;24:00 December 31, Finish Year&quot;";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep";
    NOTES                "GCAA, 202006: Added LMNRA Az Mead Depletion slot assignment to help model solve for correct return flow to system<br>";
    BEGIN

    DESCRIPTION          "This rule matches whats in the MTOM ruleset<br>";
      FOREACH (DATETIME date IN @"24:00:00 January Max DayOfMonth, Current Year" TO @"24:00:00 December 31, Finish Year") DO
            $ "PaloVerde.Total Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "California_CU_Actual.PaloVerde" [date], date )
 ELSE
  "VolumeToFlow"( $ "California_CU_Schedules.PaloVerde" [date], date )
 ENDIF;

            $ "CRIR:CRIRAz.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.CRIRAz" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.CRIRAz" [date], date )
 ENDIF;

            $ "CRIR:CRIRCa.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "California_CU_Actual.CRIRCa" [date], date )
 ELSE
  "VolumeToFlow"( $ "California_CU_Schedules.CRIRCa" [date], date )
 ENDIF;

            $ "CaPkrToImp:Winterhaven.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "California_CU_Actual.Winterhaven" [date], date )
 ELSE
  "VolumeToFlow"( $ "California_CU_Schedules.Winterhaven" [date], date )
 ENDIF;

            $ "CaPkrToImp:CaPumpersAbvImp.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "California_CU_Actual.CaPumpersAbvImp" [date], date )
 ELSE
  "VolumeToFlow"( $ "California_CU_Schedules.CaPumpersAbvImp" [date], date )
 ENDIF;

            $ "AzPkrToImp:AzPumpersAbvImp.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.AzPumpersAbvImp" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.AzPumpersAbvImp" [date], date )
 ENDIF;

            $ "AzPkrToImp:BlmPumpersAbvImp.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.BlmPumpersAbvImp" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.BlmPumpersAbvImp" [date], date )
 ENDIF;

            $ "AzPkrToImp:BrookeWater.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.BrookeWater" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.BrookeWater" [date], date )
 ENDIF;

            $ "AzPkrToImp:CibolaNWR.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.CibolaNWR" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.CibolaNWR" [date], date )
 ENDIF;

            $ "AzPkrToImp:CibolaValleyIID.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.CibolaValleyIID" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.CibolaValleyIID" [date], date )
 ENDIF;

            $ "AzPkrToImp:Ehrenberg.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.Ehrenberg" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.Ehrenberg" [date], date )
 ENDIF;

            $ "AzPkrToImp:ImperialNWR.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.ImperialNWR" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.ImperialNWR" [date], date )
 ENDIF;

            $ "AzPkrToImp:Parker.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.City of Parker" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.City of Parker" [date], date )
 ENDIF;

            $ "AAC:SaltonSea.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "California_CU_Actual.SaltonSea" [date], date )
 ELSE
  "VolumeToFlow"( $ "California_CU_Schedules.SaltonSea" [date], date )
 ENDIF;

            $ "AAC:IID.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "California_CU_Actual.IID" [date], date )
 ELSE
  "VolumeToFlow"( $ "California_CU_Schedules.IID" [date], date )
 ENDIF;

            $ "AAC:Coachella.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "California_CU_Actual.Coachella" [date], date )
 ELSE
  "VolumeToFlow"( $ "California_CU_Schedules.Coachella" [date], date )
 ENDIF;

            $ "AAC:YumaProject.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "California_CU_Actual.YumaProject" [date], date )
 ELSE
  "VolumeToFlow"( $ "California_CU_Schedules.YumaProject" [date], date )
 ENDIF;

            $ "AAC:Ranch5.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "California_CU_Actual.Ranch5" [date], date )
 ELSE
  "VolumeToFlow"( $ "California_CU_Schedules.Ranch5" [date], date )
 ENDIF;

            $ "GilaAndYumaUsers:CocopahIndRes.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.Cocopah Indian Res" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.Cocopah Indian Res" [date], date )
 ENDIF;

            $ "GilaAndYumaUsers:DesertLawnMemorial.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.DesertLawnMemorial" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.DesertLawnMemorial" [date], date )
 ENDIF;

            $ "GilaAndYumaUsers:GilaMonsterFarms.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.Gila Monster Farms" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.Gila Monster Farms" [date], date )
 ENDIF;

            $ "OthersBlwImp:AzPumpersBlwImp.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.AzPumpersBlwImp" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.AzPumpersBlwImp" [date], date )
 ENDIF;

            $ "OthersBlwImp:BlmPumpersBlwImp.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.BlmPumpersBlwImp" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.BlmPumpersBlwImp" [date], date )
 ENDIF;

            $ "OthersBlwImp:SouthernPacific.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.SouthernPacific" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.SouthernPacific" [date], date )
 ENDIF;

            $ "OthersBlwImp:YAO.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.YAO" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.YAO" [date], date )
 ENDIF;

            $ "OthersBlwImp:YumaIsland.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "California_CU_Actual.YumaIsland" [date], date )
 ELSE
  "VolumeToFlow"( $ "California_CU_Schedules.YumaIsland" [date], date )
 ENDIF;

            $ "OthersBlwImp:Ft Yuma.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.Ft Yuma" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.Ft Yuma" [date], date )
 ENDIF;

            $ "GilaGravityMainCanal:CityOfYuma.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.City of Yuma" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.City of Yuma" [date], date )
 ENDIF;

            $ "GilaGravityMainCanal:MCAirStation.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.MCAirStation" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.MCAirStation" [date], date )
 ENDIF;

            $ "GilaGravityMainCanal:NGVIDD.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.NGVIDD" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.NGVIDD" [date], date )
 ENDIF;

            $ "GilaGravityMainCanal:UnitB.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.UnitB" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.UnitB" [date], date )
 ENDIF;

            $ "GilaGravityMainCanal:UofA.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.UofA" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.UofA" [date], date )
 ENDIF;

            $ "GilaGravityMainCanal:WMIDD.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.WMIDD" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.WMIDD" [date], date )
 ENDIF;

            $ "GilaGravityMainCanal:YCWUA.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.YCWUA" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.YCWUA" [date], date )
 ENDIF;

            $ "GilaGravityMainCanal:YID.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.YID" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.YID" [date], date )
 ENDIF;

            $ "GilaGravityMainCanal:YMIDD.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.YMIDD" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.YMIDD" [date], date )
 ENDIF;

            $ "GilaGravityMainCanal:YumaProvingGround.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.YumaProvingGround" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.YumaProvingGround" [date], date )
 ENDIF;

            $ "GilaGravityMainCanal:YumaUnionHighScl.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.YumaUnionHighScl" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.YumaUnionHighScl" [date], date )
 ENDIF;

            $ "MWDDiversion:Tijuana.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Mexico_CU_Actual.MexicoTJ" [date], date )
 ELSE
  "VolumeToFlow"( $ "Mexico_CU_Schedules.MexicoTJ" [date], date )
 ENDIF;

            $ "MexicanTreatyDelivery:MexicoSched.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Mexico_CU_Actual.MexicoSched" [date] - $ "Mexico_CU_Actual.MexicoTJ" [date], date )
 ELSE
  "VolumeToFlow"( $ "Mexico_CU_Schedules.MexicoSched" [date] - $ "Mexico_CU_Schedules.MexicoTJ" [date], date )
 ENDIF;

            $ "MexicanTreatyDelivery:MexicoBypass.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Mexico_CU_Actual.MexicoBypass" [date], date )
 ELSE
  "VolumeToFlow"( $ "Mexico_CU_Schedules.MexicoBypass" [date], date )
 ENDIF;

            $ "MexicanTreatyDelivery:MexicoExcess.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Mexico_CU_Actual.MexicoExcess" [date], date )
 ELSE
  "VolumeToFlow"( $ "Mexico_CU_Schedules.MexicoExcess" [date], date )
 ENDIF;

            $ "FtMohaveIndRes:NV.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Nevada_CU_Actual.FtMohaveNv" [date], date )
 ELSE
  "VolumeToFlow"( $ "Nevada_CU_Schedules.FtMohaveNv" [date], date )
 ENDIF;

            $ "FtMohaveIndRes:CA.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "California_CU_Actual.FtMohaveCa" [date], date )
 ELSE
  "VolumeToFlow"( $ "California_CU_Schedules.FtMohaveCa" [date], date )
 ENDIF;

            $ "FtMohaveIndRes:AZ.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.FtMohaveAz" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.FtMohaveAz" [date], date )
 ENDIF;

            $ "NvDvsToPkr:SCE.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Nevada_CU_Actual.SCE" [date], date )
 ELSE
  "VolumeToFlow"( $ "Nevada_CU_Schedules.SCE" [date], date )
 ENDIF;

            $ "NvDvsToPkr:BigBend.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Nevada_CU_Actual.BigBend" [date], date )
 ELSE
  "VolumeToFlow"( $ "Nevada_CU_Schedules.BigBend" [date], date )
 ENDIF;

            $ "OthersMeadToMohave:LMNRA Nv Mohave.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Nevada_CU_Actual.LMNRA Mohave" [date], date )
 ELSE
  "VolumeToFlow"( $ "Nevada_CU_Schedules.LMNRA Mohave" [date], date )
 ENDIF;

            $ "AzDvsToPkr:BullheadCity.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.BullheadCity" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.BullheadCity" [date], date )
 ENDIF;

            $ "CaDvsToPkr:Chemehuevi.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "California_CU_Actual.Chemehuevi" [date], date )
 ELSE
  "VolumeToFlow"( $ "California_CU_Schedules.Chemehuevi" [date], date )
 ENDIF;

            $ "CaDvsToPkr:Needles.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "California_CU_Actual.Needles" [date], date )
 ELSE
  "VolumeToFlow"( $ "California_CU_Schedules.Needles" [date], date )
 ENDIF;

            $ "CaDvsToPkr:OtherLCWSP.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "California_CU_Actual.OtherLCWSP" [date], date )
 ELSE
  "VolumeToFlow"( $ "California_CU_Schedules.OtherLCWSP" [date], date )
 ENDIF;

            $ "OthersMeadToMohave:DavisDamProject.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.DavisDamProject" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.DavisDamProject" [date], date )
 ENDIF;

            $ "AzDvsToPkr:GoldenShores.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.GoldenShores" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.GoldenShores" [date], date )
 ENDIF;

            $ "AzDvsToPkr:HavasuNWR.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.HavasuNWR" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.HavasuNWR" [date], date )
 ENDIF;

            $ "AzDvsToPkr:LakeHavasuCity.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.LakeHavasuCity" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.LakeHavasuCity" [date], date )
 ENDIF;

            $ "AzDvsToPkr:MohaveValleyIID.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.MohaveValleyIID" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.MohaveValleyIID" [date], date )
 ENDIF;

            $ "AzDvsToPkr:MohaveWaterConsDist.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.MohaveWaterConsDist" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.MohaveWaterConsDist" [date], date )
 ENDIF;

            $ "AzDvsToPkr:AzPumpersDvsToPkr.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.AzPumpersDvsToPkr" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.AzPumpersDvsToPkr" [date], date )
 ENDIF;

            $ "PumpingFromLakeMead:LMNRA Az Mead.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.LMNRA Az Mead" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.LMNRA Az Mead" [date], date )
 ENDIF;

            $ "PumpingFromLakeMead:LMNRA Az Mead.Depletion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.LMNRA Az Mead" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.LMNRA Az Mead" [date], date )
 ENDIF;

            $ "OthersMeadToMohave:LMNRA Az Mohave.Diversion Requested" [date] := IF ( date < @"Start Timestep" )
 THEN
  "VolumeToFlow"( $ "Arizona_CU_Actual.LMNRA Az Mohave" [date], date )
 ELSE
  "VolumeToFlow"( $ "Arizona_CU_Schedules.LMNRA Az Mohave" [date], date )
 ENDIF;

      ENDFOREACH;

    END
    UUID "{77021eef-9541-4364-97ff-efcad1c2951e}";;

    RULE                 "INT - Set SNWP Actual Depletion";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep";
    NOTES                "";
    BEGIN

    DESCRIPTION          "Assignment in LC Actuals rule <br>";
      FOREACH (DATETIME date IN @"24:00:00 January Max DayOfMonth, Current Year" TO @"Start Timestep - 1") DO
            $ "Nevada_CU_Actual.SNWP" [date] := $ "Nevada_CU_Actual.SNWADiversion" [date] + $ "Nevada_CU_Actual.BasicManagement" [date] + $ "Nevada_CU_Actual.LMNRA Mead" [date] + $ "Nevada_CU_Actual.BoulderCanyonProject" [date] + $ "Nevada_CU_Actual.NvDeptFishGame" [date] + $ "Nevada_CU_Actual.PacificCoastBuilding" [date] + $ "Nevada_CU_Actual.City of Henderson" [date] - $ "Nevada_CU_Actual.LVWashReturns" [date];

      ENDFOREACH;

    END
    UUID "{bd05759b-60ad-4ba2-8204-4bd62edb24f4}";;

    RULE                 "INT - Set MWD CU Actual";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep";
    NOTES                "";
    BEGIN

    DESCRIPTION          "This rule assignment is incorporated in the Set LC Actuals Rule <br>";
      FOREACH (DATETIME date IN @"24:00:00 January Max DayOfMonth, Current Year" TO @"Start Timestep - 1") DO
            $ "California_CU_Actual.MWD" [date] := IF ( IsNaN $ "California_CU_Actual.MWD" [date] AND NOT IsNaN $ "California_CU_Actual.MWDDiversion" [date] )
 THEN
  $ "California_CU_Actual.MWDDiversion" [date] - $ "California_CU_Actual.MWDReturns" [date]
 ENDIF;

      ENDFOREACH;

    END
    UUID "{cb12058d-7a97-4e7a-8c5e-56e5e524ded0}";;

    RULE                 "INT - Set NaN Actuals To Schedule";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep";
    NOTES                "";
    BEGIN

    DESCRIPTION          "This rule is the same in both MTOM and 24 MS <br>";
      FOREACH (DATETIME date IN @"24:00:00 January Max DayOfMonth, Current Year" TO @"Start Timestep - 1") DO
            FOREACH (STRING state IN { "California" , "Arizona" , "Nevada" , "Mexico" }) DO
            FOREACH (STRING user IN "SlotToString"( "GetObject"( state CONCAT "_CU_Actual" ) )) DO
            "GetObject"( state CONCAT "_CU_Actual" ) & user [date] := IF ( user != "SNWP" )
 THEN
  IF ( IsNaN "GetObject"( state CONCAT "_CU_Actual" ) & user [date] )
  THEN
   "GetObject"( state CONCAT "_CU_Schedules" ) & user [date]
  ENDIF
 ENDIF;

      ENDFOREACH;

      ENDFOREACH;

      ENDFOREACH;

    END
    UUID "{a3e0f78d-8c69-44c8-9ba7-1b3cde91af97}";;

    RULE                 "INT - Set MWD CU Schedule -  annual";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

    DESCRIPTION          "This is covered under thhe set lc annual schedules rule<br>";
      $ "California_CU_AnnualApproval.MWD" [@"24:00:00 December 31, Current Year"] := "AnnualVolumeSlot"( $ "California_CU_Schedules.MWD" );

    END
    UUID "{03059459-755e-47d3-bca1-3b13a1d29ac1}";;

    RULE                 "INT - Set MWD CU Schedule - monthly";
    DESCRIPTION          "DEVELOPMENT NOTES:<br>CH, 8/25/17: replaced calls to GetLastDate function with &quot;24:00 December 31, Finish Year&quot;";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep";
    NOTES                "";
    BEGIN

    DESCRIPTION          "Covered in &quot;Set LC Monthly schedules&quot; rule <br>";
      FOREACH (DATETIME date IN @"24:00:00 January Max DayOfMonth, Current Year" TO @"24:00:00 December 31, Finish Year") DO
            $ "California_CU_Schedules.MWD" [date] := $ "California_CU_Schedules.MWDDiversion" [date] - $ "California_CU_Schedules.MWDReturns" [date];

      ENDFOREACH;

    END
    UUID "{d9cf137c-ec05-4412-b2a5-ed51158e58b9}";;

    RULE                 "NI  - Set MWD Returns Schedule -  annual";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

    DESCRIPTION          "This slot assignment is covered in the set LC Annual Schedules rule in MTOM. Since this rule is <br>turned off, the slot assignment in the integrated model has an if statement <br>";
      $ "California_CU_AnnualApproval.MWDReturns" [@"24:00:00 December 31, Current Year"] := "AnnualVolumeSlot"( $ "California_CU_Schedules.MWDReturns" );

    END
    UUID "{f8421703-1238-4ce2-aad3-6a45f1d609b7}";;

    RULE                 "NI - Set MWD Returns Schedule - monthly";
    DESCRIPTION          "DEVELOPMENT NOTES:<br>CH, 8/25/17: replaced calls to GetLastDate function with &quot;24:00 December 31, Finish Year&quot;";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep";
    NOTES                "";
    BEGIN

    DESCRIPTION          "LC CHECK<br><br>Should this assignment be in the MTOM ruleset??????????????/<br><br><br>NO <br>";
      FOREACH (DATETIME date IN @"24:00:00 January Max DayOfMonth, Current Year" TO @"24:00:00 December 31, Finish Year") DO
            $ "California_CU_Schedules.MWDReturns" [date] := 8.50000000 "acre-feet" * ( "GetDaysInMonth"( date ) / 1.00000000 "day" );

      ENDFOREACH;

    END
    UUID "{015f8d8a-8d6e-4617-9975-5b973ecc0e63}";;

    RULE                 "INT - Set SNWP CU Schedule -  annual";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

    DESCRIPTION          "This slot assignments happens in the Set LC annual Shedules rule in the MTOM ruleset<br>";
      $ "Nevada_CU_AnnualApproval.SNWP" [@"24:00:00 December 31, Current Year"] := "AnnualVolumeSlot"( $ "Nevada_CU_Schedules.SNWP" );

    END
    UUID "{d17c8b60-7957-4c2b-a511-fe345ab516b3}";;

    RULE                 "INT - Set SNWP CU Schedule - monthly";
    DESCRIPTION          "DEVELOPMENT NOTES:<br>CH, 8/25/17: replaced calls to GetLastDate function with &quot;24:00 December 31, Finish Year&quot;";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep";
    NOTES                "";
    BEGIN

    DESCRIPTION          "This rule is incorporated under the Set LC MOnthly Schedules Rule in MTOM<br>";
      FOREACH (DATETIME date IN @"24:00:00 January Max DayOfMonth, Current Year" TO @"24:00:00 December 31, Finish Year") DO
            $ "Nevada_CU_Schedules.SNWP" [date] := $ "Nevada_CU_Schedules.SNWADiversion" [date] + $ "Nevada_CU_Schedules.BasicManagement" [date] + $ "Nevada_CU_Schedules.LMNRA Mead" [date] + $ "Nevada_CU_Schedules.BoulderCanyonProject" [date] + $ "Nevada_CU_Schedules.NvDeptFishGame" [date] + $ "Nevada_CU_Schedules.PacificCoastBuilding" [date] + $ "Nevada_CU_Schedules.City of Henderson" [date] - $ "Nevada_CU_Schedules.LVWashReturns" [date];

      ENDFOREACH;

    END
    UUID "{fef8cbf5-4262-42ca-8230-241e2ffc0b51}";;

  END
  UUID "{21ddbf9a-a455-4579-bf6b-dbc327e1fb49}";;

  POLICY_GROUP   "Data Setup";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Int - Set 242 Well Field";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND @"t" != @"Start Timestep";
    NOTES                "";
    BEGIN

      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            $ "BelowImperialDam:242WellExpansion.Local Inflow" [date] := IF ( date <= @"24:00:00 September Max DayOfMonth, 2020" )
 THEN
  0.00000000 "acre-ft/month"
 ELSE
  "VolumeToFlow"( $ "ForecastUse.242WellContribution" [] / 12.00000000, date )
 ENDIF;

      ENDFOREACH;

    END
    UUID "{c6f086e6-f7a2-4852-ba27-8c3c6ee9b6b2}";;

    RULE                 "Int -  Compute Upper Basin Gains";
    DESCRIPTION          "This rule calculates the local gains for each reservoir and local inflow in the upper basin from the relevent RFC forecasts. - CE 9/17/13";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep";
    NOTES                "GCAA, 202016: Configured rule to match MTOM more closely in order to solve for the different links in the Integrated model";
    BEGIN

      FOREACH (DATETIME index IN @"Start Timestep" TO @"Finish Timestep") DO
            $ "ColoradoAbovePowell:InterveningAbovePowell.Local Inflow" [index] := $ "PowellInflow.Unregulated" [index] + ( $ "NavajoIndianIrrigationProjectNIIP.Diversion Requested" [index] + $ "Azotea Tunnel.Diversion Requested" [index] + $ "TunnelDiversionBelowCrystalForAg.Diversion Requested" [index] ) - ( ( $ "CrystalInflow.Unregulated" [index] + $ "FlamingGorgeInflow.Unregulated" [index] + $ "NavajoInflow.ModUnregulated" [index] + NaNToZero ( $ "GainsCrystalToGJ.GainsCrystalToGJ" [index] ) + NaNToZero ( $ "AnimasRiverInflow.Animas_at_Durango" [index] ) ) + NaNToZero ( $ "YampaRiverInflow.Yampa_at_Deerlodge" [index] ) );

            $ "UpperSanJuan.Inflow" [index] := $ "NavajoInflow.ModUnregulated" [index] - $ "Vallecito.Inflow" [index];

            $ "GreenBelowFlamingGorge:YampaRiver.Local Inflow" [index] := NaNToZero ( $ "YampaRiverInflow.Yampa_at_Deerlodge" [index] );

          DESCRIPTION          "Move non-headwater reservoir inflow forecasts into reaches above reservoirs (FG, BM, MP, CR, NV) to get intervening gains for those reservoirs";
      $ "GreenAboveFlamingGorge:InterveningAboveFlamingGorge.Local Inflow" [index] := $ "FlamingGorgeInflow.Unregulated" [index] - $ "Fontenelle.Inflow" [index];

            $ "SanJuanBelowNavajo:AnimasRiver.Local Inflow" [index] := NaNToZero ( $ "AnimasRiverInflow.Animas_at_Durango" [index] );

            $ "GunnisonBelowCrystal:GunnisonNrGJ_Whitewater.Local Inflow" [index] := NaNToZero ( $ "GainsCrystalToGJ.GainsCrystalToGJ" [index] );

            $ "GunnisonAboveMorrowPoint:InterveningAboveMorrowPoint.Local Inflow" [index] := $ "MorrowPointInflow.Unregulated" [index] - $ "BlueMesaInflow.Unregulated" [index];

            $ "GunnisonAboveCrystal:InterveningAboveCrystal.Local Inflow" [index] := $ "CrystalInflow.Unregulated" [index] - $ "MorrowPointInflow.Unregulated" [index];

            $ "GunnisonAboveBlueMesa:InterveningAboveBlueMesa.Local Inflow" [index] := $ "BlueMesaInflow.Unregulated" [index] - $ "TaylorPark.Inflow" [index];

            $ "NavajoIndianIrrigationProjectNIIP.Fractional Return Flow" [index] := 0.00000000;

            $ "NavajoIndianIrrigationProjectNIIP.Diversion" [index] := $ "NavajoIndianIrrigationProjectNIIP.Diversion Requested" [index];

            $ "Azotea Tunnel.Fractional Return Flow" [index] := 0.00000000;

            $ "Azotea Tunnel.Diversion" [index] := $ "Azotea Tunnel.Diversion Requested" [index];

      ENDFOREACH;

    END
    UUID "{ae6e1e50-7cdc-4965-9110-31c079c0afe4}";;

    RULE                 "Int - INPUT MISSING NOTIFICATION";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      $ "UC_Inflow_Validation.DummyDataSlot" [] := IF ( IsNaN $ "BlueMesaInflow.Unregulated" [] )
 THEN
  STOP_RUN "Run Stopped, Gain Calculation Failed: BlueMesaInflow.Unregulated Missing"
 ENDIF;

      $ "UC_Inflow_Validation.DummyDataSlot" [] := IF ( IsNaN $ "TaylorPark.Inflow" [] )
 THEN
  STOP_RUN "Run Stopped, Gain Calculation Failed: TaylorPark.Inflow Missing"
 ENDIF;

      $ "UC_Inflow_Validation.DummyDataSlot" [] := IF ( IsNaN $ "MorrowPointInflow.Unregulated" [] )
 THEN
  STOP_RUN "Run Stopped, Gain Calculation Failed: MorrowPointInflow.Unregulated Missing"
 ENDIF;

      $ "UC_Inflow_Validation.DummyDataSlot" [] := IF ( IsNaN $ "CrystalInflow.Unregulated" [] )
 THEN
  STOP_RUN "Run Stopped, Gain Calculation Failed: CrystalInflow.Unregulated Missing"
 ENDIF;

      $ "UC_Inflow_Validation.DummyDataSlot" [] := IF ( IsNaN $ "FlamingGorgeInflow.Unregulated" [] )
 THEN
  STOP_RUN "Run Stopped, Gain Calculation Failed: FlamingGorgeInflow.Unregulated Missing"
 ENDIF;

      $ "UC_Inflow_Validation.DummyDataSlot" [] := IF ( IsNaN $ "Fontenelle.Inflow" [] )
 THEN
  STOP_RUN "Run Stopped, Gain Calculation Failed: Fontenelle.Inflow Missing"
 ENDIF;

      $ "UC_Inflow_Validation.DummyDataSlot" [] := IF ( IsNaN $ "NavajoInflow.ModUnregulated" [] )
 THEN
  STOP_RUN "Run Stopped, Gain Calculation Failed: NavajoInflow.ModUnregulated Missing"
 ENDIF;

      $ "UC_Inflow_Validation.DummyDataSlot" [] := IF ( IsNaN $ "Vallecito.Inflow" [] )
 THEN
  STOP_RUN "Run Stopped, Gain Calculation Failed: Vallecito.Inflow Missing"
 ENDIF;

      $ "UC_Inflow_Validation.DummyDataSlot" [] := IF ( IsNaN $ "PowellInflow.Unregulated" [] )
 THEN
  STOP_RUN "Run Stopped, Gain Calculation Failed: PowellInflow.Unregulated Missing"
 ENDIF;

      $ "UC_Inflow_Validation.DummyDataSlot" [] := IF ( IsNaN $ "NavajoIndianIrrigationProjectNIIP.Diversion Requested" [] )
 THEN
  STOP_RUN "Run Stopped, Gain Calculation Failed: NavajoIndianIrrigationProjectNIIP.Diversion Requested Missing"
 ENDIF;

      $ "UC_Inflow_Validation.DummyDataSlot" [] := IF ( IsNaN $ "Azotea Tunnel.Diversion Requested" [] )
 THEN
  STOP_RUN "Run Stopped, Gain Calculation Failed: AzoteaTunnel.Diversion Requested Missing"
 ENDIF;

      $ "UC_Inflow_Validation.DummyDataSlot" [] := IF ( IsNaN $ "TunnelDiversionBelowCrystalForAg.Diversion Requested" [] )
 THEN
  STOP_RUN "Run Stopped, Gain Calculation Failed: TunnelDiversionBelowCrystalForAg.Diversion Requested Missing"
 ENDIF;

      $ "UC_Inflow_Validation.DummyDataSlot" [] := IF ( IsNaN $ "SanJuanBelowNavajo:AnimasRiver.Local Inflow" [] )
 THEN
  STOP_RUN "Run Stopped, Gain Calculation Failed: SanJuanBelowNavajo:AnimasRiver.Local Inflow Missing"
 ENDIF;

    END
    UUID "{9efef435-baeb-4db3-be37-3e0630c23f21}";;

    RULE                 "Int - DebuggingRule";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      PRINT "AcreFeetPerMonthPrint"( $ "BlueMesaInflow.Unregulated" [] - $ "TaylorPark.Inflow" [] );

    END
    UUID "{c6b2b52d-b775-4e43-aaec-431eb53d70cf}";;

    RULE                 "NI - Set Average Longterm Hydrology";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep";
    NOTES                "";
    BEGIN

      FOREACH (DATETIME index IN @"Start Timestep" TO @"Finish Timestep") DO
            $ "PowellToMead:PariaRiver.Local Inflow" [index] := IF ( IsNaN $ "PowellToMead:PariaRiver.Local Inflow" [index] )
 THEN
  $ "StatisticalData.averageUnregInflows" ["PariaRiver", "GetMonthAsString"( index )]
 ENDIF;

      ENDFOREACH;

      FOREACH (DATETIME index IN @"Start Timestep" TO @"Finish Timestep") DO
            $ "BlueMesaInflow.Unregulated" [index] := IF ( IsNaN $ "BlueMesaInflow.Unregulated" [index] )
 THEN
  $ "StatisticalData.averageUnregInflows" ["BlueMesa", "GetMonthAsString"( index )]
 ENDIF;

      ENDFOREACH;

    END
    UUID "{270f1020-253d-4ce3-b352-fcb432190aaa}";;

    RULE                 "NI - Set 24 Month Study Data To Extended Out Years";
    DESCRIPTION          "This Rule uses the data from the 24 month study and projects it forward by  using the previous years values for any out years that are not input from the 24 month study. This was suggested by the BoR LC office in the document &quot;Five Year lower basin inputs for MTOM&quot;. TP 3/6/2013<br><br>";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep" AND "GetRunCycleIndex"(  ) == 1.00000000 AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "DEVELOPMENT NOTES:<br>CH, 8/25/17: Deactivated";
    BEGIN

    DESCRIPTION          "Project the Annual slots forward";
      FOREACH (SLOT slot IN "RepeatAnnualPreviousYearSlots"(  )) DO
            FOREACH (DATETIME date IN "GetDates"( "Dec31ofYear"( @"Start Timestep" ), "Dec31ofYear"( @"Finish Timestep + 36" ) COMMENTED_BY "This is for testing purposes, this should be Finish timestep<br>when the model is actually moved forward and all input<br>is taken care of", "1 Years" )) DO
            IF_STATEMENT (IsNaN slot [date] OR NOT "IsInput"( slot, date )) THEN
            WITH_STATEMENT (NUMERIC dateNum = "GetYear"( date ) - "GetYear"( "OffsetDate"( @"Start Timestep", 2.00000000, "1 Years" ) )) DO
            slot [date] := slot ["OffsetDate"( date, - dateNum, "1 Years" )];

      END_WITH_STATEMENT;

      END_IF_STATEMENT;

      ENDFOREACH;

      ENDFOREACH;

    DESCRIPTION          "Project the Monthly slots forward";
      FOREACH (SLOT slot IN "RepeatMonthlyPreviousYearSlots"(  )) DO
            FOREACH (DATETIME date IN "GetDates"( @"Start Timestep", @"Finish Timestep + 36" COMMENTED_BY "This is for testing purposes, this should be Finish timestep<br>when the model is actually moved forward and all input<br>is taken care of", "1 Months" )) DO
            IF_STATEMENT (IsNaN slot [date] OR NOT "IsInput"( slot, date )) THEN
            WITH_STATEMENT (NUMERIC dateNum = IF ( "GetMonth"( date ) > 9.00000000 )
 THEN
  "GetYear"( date ) - "GetYear"( "OffsetDate"( @"Start Timestep", 2.00000000, "1 Years" ) ) + 1.00000000
 ELSE
  "GetYear"( date ) - "GetYear"( "OffsetDate"( @"Start Timestep", 2.00000000, "1 Years" ) ) + 0.00000000
 ENDIF) DO
            slot [date] := slot ["OffsetDate"( date, - ( dateNum * 12.00000000 ), "1 Months" )];

      END_WITH_STATEMENT;

      END_IF_STATEMENT;

      ENDFOREACH;

      ENDFOREACH;

    DESCRIPTION          "Project Monthly Consumptive Use Slots Forward for Scheduling";
      FOREACH (SLOT slot IN "RepeatMonthlyLB_CU_PreviousYearSlots"(  )) DO
            FOREACH (DATETIME date IN "GetDates"( @"Start Timestep", @"Finish Timestep + 39" COMMENTED_BY "This is for testing purposes, this should be Finish timestep plus at least three months<br>when the model is actually moved forward and all input<br>is taken care of", "1 Months" )) DO
            IF_STATEMENT (IsNaN slot [date] OR NOT "IsInput"( slot, date )) THEN
            WITH_STATEMENT (NUMERIC dateNum = IF ( "GetMonth"( date ) > 9.00000000 )
 THEN
  "GetYear"( date ) - "GetYear"( "OffsetDate"( @"Start Timestep", 2.00000000, "1 Years" ) ) + 1.00000000
 ELSE
  "GetYear"( date ) - "GetYear"( "OffsetDate"( @"Start Timestep", 2.00000000, "1 Years" ) ) + 0.00000000
 ENDIF) DO
            slot [date] := slot ["OffsetDate"( date, - ( dateNum * 12.00000000 ), "1 Months" )];

      END_WITH_STATEMENT;

      END_IF_STATEMENT;

      ENDFOREACH;

      ENDFOREACH;

    DESCRIPTION          "Calculate the Monthly Diversions for those with annual volumes and monthly schedules <br>provided ";
      FOREACH (STRING group IN "CalcMonthlyDiversionsList"(  )) DO
            WITH_STATEMENT (STRING state = IF ( group == "Mexico" )
 THEN
  "Mexico"
 ELSE
  IF ( group == "SNWP" )
  THEN
   "Nevada"
  ELSE
   "California"
  ENDIF
 ENDIF) DO
            WITH_STATEMENT (SLOT slot = IF ( group == "Mexico" )
 THEN
  "GetSlot"( state CONCAT ( "_CU_Schedules." CONCAT ( group CONCAT "Sched" ) ) )
 ELSE
  "GetSlot"( state CONCAT ( "_CU_Schedules." CONCAT group ) )
 ENDIF) DO
            FOREACH (DATETIME date IN "GetDates"( @"Start Timestep", @"Finish Timestep + 39" COMMENTED_BY "This is for testing purposes, this should be Finish timestep plus at least three months<br>when the model is actually moved forward and all input<br>is taken care of", "1 Months" )) DO
            IF_STATEMENT (IsNaN slot [date] OR NOT "IsInput"( slot, date )) THEN
            WITH_STATEMENT (NUMERIC annVol = "GetSlot"( "AnnualWaterUse." CONCAT group CONCAT "_OutyearVolume" ) ["Dec31ofYear"( date )]) DO
            slot [date] := annVol * IF ( group == "Mexico" )
 THEN
  $ "Shortage.MonthlyPercents" ["GetMonth"( date ) - 1.00000000, "Mexico"]
 ELSE
  $ "Shortage.MonthlyPercents" ["GetMonth"( date ) - 1.00000000, "Equal"]
 ENDIF;

      END_WITH_STATEMENT;

      END_IF_STATEMENT;

      ENDFOREACH;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      ENDFOREACH;

    END
    UUID "{a8f1db45-a9d1-4102-a390-01fac1c7216a}";;

  END
  UUID "{257bf4ae-b155-4744-b862-599e96d02d98}";;

  UTILITY_GROUP "Flood Control Functions";
  DESCRIPTION   "";
  ACTIVE        TRUE;
  NOTES          "";
  BEGIN

    FUNCTION       "AvailableSpace" ( OBJECT reservoir )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-feet";
    DESCRIPTION    "DESCRIPTION: This function calculates the available storage in a reservoir as the difference between the live capacity of the reservoir and the storage value at the end of the previous timestep<br><br>RETURNS: Volume [L^3]<br><br>ARGUMENTS:<br>1. OBJECT reservoir - the reservoir for which the available space is desired<br><br><br>";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>CH, 8/29/17: Added description";
    BEGIN

      "GetLiveCapacity"( reservoir ) - reservoir & "Storage" [@"t - 1"];

    END
    UUID "{bd020358-4414-4279-b120-a7e8d819f27a}";;

    FUNCTION       "ComputeMinimumSpace" ( OBJECT reservoir )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-feet";
    DESCRIPTION    "DESCRIPTION: This function returns the space available in &quot;reservoir&quot; given the minimum required space<br><br>RETURNS: Storage volume [L^3]<br><br>ARGUMENTS:<br>1. OBJECT reservoir - the reservoir for which the space is desired (see Development Notes)<br><br>";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>CH, 8/29/17: Added description";
    BEGIN

      "GetLiveCapacity"( reservoir ) - "GetMininumSpace"( reservoir );

    END
    UUID "{31201e9d-7a36-43d0-a976-5a064c4ea83e}";;

    FUNCTION       "ComputeTargetStorageRelease" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-feet/month";
    DESCRIPTION    "DESCRIPTION: This function calculates the outflow required to reach the target elevation specified by the SpaceBuilding function with an upper bound of the maximum space building release (28,000 cfs)<br><br>RETURNS: Outflow rate [L^3/T]<br><br>ARGUMENTS: <NONE><br><br>";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>CH, 8/29/17: Added description";
    BEGIN

      IF ( ( "ComputeOutflowAtGivenStorageForSpaceBuilding"( % "Mead", "SpaceBuilding"(  ) ) > $ "MeadFloodControlData.MaxSpaceBuildingRelease" [0.00000000, 0.00000000] ) COMMENTED_BY "Outflow to reach target > Max flood control release, use Max flood control release" )
 THEN
  $ "MeadFloodControlData.MaxSpaceBuildingRelease" [0.00000000, 0.00000000]
 ELSE
  "Max"( "ComputeOutflowAtGivenStorageForSpaceBuilding"( % "Mead", "SpaceBuilding"(  ) ), 0.00000000 "acre-feet/month" ) COMMENTED_BY "Use non-negative release to reach target"
 ENDIF;

    END
    UUID "{32632924-9a04-4fc5-97c2-7f1eb8e4bf69}";;

    FUNCTION       "ComputeTargetStorage" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-feet";
    DESCRIPTION    "DESCRIPTION: This function calculates a target storage volume for Mead based on either the volume calculated by the SpaceBuilding function, or the volume achievable by the MaxSpaceBuildingRelease outflow<br><br>RETURNS: Storage Volume [L^3]<br><br>ARGUMENTS: <NONE><br><br>";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>CH, 8/29/17: Added description";
    BEGIN

      IF ( "ComputeOutflowAtGivenStorage"( % "Mead", "SpaceBuilding"(  ) ) > $ "MeadFloodControlData.MaxSpaceBuildingRelease" [0.00000000, 0.00000000] )
 THEN
  "ComputeStorageWithGivenOutflow"( % "Mead", $ "MeadFloodControlData.MaxSpaceBuildingRelease" [0.00000000, 0.00000000] )
 ELSE
  "SpaceBuilding"(  )
 ENDIF COMMENTED_BY "If the outflow to reach the SpaceBuilding storage target exceeds the MaxSpaceBuildingRelease outflow, <br>calculate the storage achieved at the MaxSpaceBuildingRelease; otherwise use the SpaceBuilding storage";

    END
    UUID "{30c476b1-cf35-414a-a91d-04fb728c5ac8}";;

    FUNCTION       "CurrentAvailableSpace" ( OBJECT reservoir )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-feet";
    DESCRIPTION    "DESCRIPTION: This function calculates the storage space available at the current timestep for the specified reservoir<br><br>RETURNS: Available volume [L^3]<br><br>ARGUMENTS:<br>1. OBJECT reservoir - the reservoir for which the available space is desired<br><br>";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>CH, 8/29/17: Added description";
    BEGIN

      "GetLiveCapacity"( reservoir ) - reservoir & "Storage" [];

    END
    UUID "{dbee1223-669a-4443-a730-d592ceb89b93}";;

    FUNCTION       "FloodControlEvap" ( OBJECT reservoir )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-feet";
    DESCRIPTION    "DESCRIPTION: This function calculates the evaporation incurred during flood control operations using a storage value halfway between the storage at the previous timestep and the live capacity of the reservoir<br><br>RETURNS: Volume [L^3]<br><br>ARGUMENTS:<br>1. OBJECT reservoir - the reservoir for which the evaporation is calculated<br>";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>CH, 8/29/17: Added description";
    BEGIN

      "StorageToArea"( reservoir, "GetLiveCapacity"( reservoir ) - "AvailableSpace"( reservoir ) / 2.00000000 ) * "SumEvapCoeff"( reservoir );

    END
    UUID "{6c50fb94-72cd-4751-8815-9036b3a09cc7}";;

    FUNCTION       "DeltaBankStorage" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-feet";
    DESCRIPTION    "DESCRIPTION: This function calculates the total change in bank storage of Mead and Powell that occurs by using the space available in each<br><br>RETURNS: Volume [L^3]<br><br>ARGUMENTS: <NONE><br><br>";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>CH, 8/29/17: Added description";
    BEGIN

      $ "Mead.Bank Storage Coefficient" [0.00000000, 0.00000000] * ( "AvailableSpace"( % "Mead" ) - $ "MeadFloodControlData.MinSpace" [0.00000000, 0.00000000] ) + $ "Powell.Bank Storage Coefficient" [0.00000000, 0.00000000] * "AvailableSpace"( % "Powell" );

    END
    UUID "{30d4c057-1bbc-40b3-a898-36929d306313}";;

    FUNCTION       "ForecastMeadInflow" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "DESCRIPTION: This function computes the inflow forcast through July for Mead for use in the flood control release determination.<br>";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "DEVELOPMENT NOTES: <br>CH, 8/25/17: Replaced call to SumGainsBelowVolume with SumAllGainsBelowVolume<br>CH, 8/29/17: Edited description ";
    BEGIN

      "SumSlotVolume"( $ "PowellInflow.Unregulated", "GetMonthlyDatelist"( @"t", @"24:00:00 July Max DayOfMonth, Current Year" ) ) + "SumAllGainsBelowVolume"( % "Powell", @"t", @"24:00:00 July Max DayOfMonth, Current Year" ) + $ "MeadFloodControlData.Forcmax" ["Forcmax", "GetMonthAsString"( @"t" )] - $ "FloodControlOutput.UBEffective" [];

    END
    UUID "{8b4f9ba3-c30f-4c1c-8cf4-5868e730a666}";;

    FUNCTION       "SouthernNevConsumed" ( LIST dates )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-feet";
    DESCRIPTION    "DESCRIPTION: This function calculates the total diversion volume requested by SNWP over the date range passed as an argument<br><br>RETURNS: Diversion volume requested [L^3]<br><br>ARGUMENTS:<br>1. LIST dates - a list of dates over which the diversion is summed<br><br>DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>CH, 8/25/17: All calls to this function were replaced by using the predefined function SumFlowsToVolume";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      "SumSlotVolume"( $ "PumpingFromLakeMead:SNWP.Diversion Requested", dates );

    END
    UUID "{814a6c05-cb16-48f1-9ecd-43a4adec6bb9}";;

    FUNCTION       "ForecastRunoffSeason " (  )
    RETURN_TYPE    LIST;
    SCALE_UNITS    "";
    DESCRIPTION    "DESCRIPTION: This function calculates the release level required to pass excess inflow from Mead. This level corresponds to the flood control release steps in Table 1 in Exhibit A of the Flood Control Manual and is used in determining Mead flood control releases January 1-July 31. <br><br>RETURNS: List of lists of the form &lcub;&lcub;Flow, Release level index&rcub;&rcub;<br><br>ARGUMENTS: <NONE><br><br>";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>CH, 8/25/17: Changed while statement from AND (results <1>) <= 5 to AND (results <1>) < 5 <br>CH, 8/29/17: Added to description";
    BEGIN

      WHILE ( "VolumeToFlow"( "ComputeMinMeadFloodRelease"( ( GET @INDEX 1.00000000 FROM results ) ), @"t" ) COMMENTED_BY "Remaining excess volume at current release level as flow rate" > $ "MeadFloodControlData.Levels" [0.00000000, ( GET @INDEX 1.00000000 FROM results )] COMMENTED_BY "Currently considered release level" AND ( GET @INDEX 1.00000000 FROM results ) < 5.00000000 ) WITH LIST results = { "Max"( "VolumeToFlow"( "ComputeMinMeadFloodRelease"( 0.00000000 ), @"t" ) COMMENTED_BY "Volume at lowest release level", 0.00000000 "acre-feet/month" ) , 0.00000000 } DO
  IF ( "VolumeToFlow"( "ComputeMinMeadFloodRelease"( ( GET @INDEX 1.00000000 FROM results ) + 1.00000000 ), @"t" ) COMMENTED_BY "Remaining excess volume at next higher release level as flow rate" <= $ "MeadFloodControlData.Levels" [0.00000000, ( GET @INDEX 1.00000000 FROM results )] COMMENTED_BY "Currently considered release level" )
  THEN
   INSERT $ "MeadFloodControlData.Levels" [0.00000000, ( GET @INDEX 1.00000000 FROM results )] INTO INSERT ( GET @INDEX 1.00000000 FROM results ) + 1.00000000 INTO results
  ELSE
   INSERT "Max"( "VolumeToFlow"( "ComputeMinMeadFloodRelease"( ( GET @INDEX 1.00000000 FROM results ) + 1.00000000 ), @"t" ), 0.00000000 "acre-feet/month" ) INTO INSERT ( GET @INDEX 1.00000000 FROM results ) + 1.00000000 INTO results
  ENDIF
 ENDWHILE;

    END
    UUID "{b65e5158-a2ed-4c5d-922e-738ec1fd1c1e}";;

    FUNCTION       "ComputeMinMeadFloodRelease" ( NUMERIC index )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-feet";
    DESCRIPTION    "DESCRIPTION: This function calculates the difference between the Mead inflow volume in excess of the available space in Mead and Powell and the volume released between the next timestep and the end of July of the current year at the release level specified by the input argument &quot;index&quot;<br><br>RETURNS: Volume [L^3]<br><br>ARGUMENTS:<br>1. NUMERIC index - index that specifies a release level for Mead<br><br><br>";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>CH, 8/29/17: Description added";
    BEGIN

      $ "FloodControlOutput.Withoutrel" [] - "FloodControlLevelVolume"( "GetMonthlyDatelist"( @"t + 1", @"24:00:00 July Max DayOfMonth, Current Year" ), index );

    END
    UUID "{d7c578b6-19da-45a8-a28c-8a50d6f43a2a}";;

    FUNCTION       "FloodControlLevelVolume" ( LIST dateList, NUMERIC index )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-feet";
    DESCRIPTION    "DESCRIPTION: This function calculates the volume released from Mead at the release level specified by the input argument &quot;index&quot;<br><br>RETURNS: Volume [L^3]<br><br>ARGUMENTS:<br>1. LIST dateList - list of dates over which the release volume should be calculated<br>2. NUMERIC index - index specifying a release level<br><br>DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>CH, 8/29/17: Added description";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      FOR ( DATETIME date IN dateList ) WITH NUMERIC result = 0.00000000 "acre-feet" DO
  result + "FlowToVolume"( $ "MeadFloodControlData.Levels" [0.00000000, index], date )
 ENDFOR;

    END
    UUID "{c0e270ac-c302-428d-b825-b74bfc82a64f}";;

    FUNCTION       "ComputeDeltaTargetStorage" ( OBJECT reservoir )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "DESCRIPTION: This function computes the difference between the previous timestep's storage and the target storage at the current timestep for the Lower Basin reservoir specified as an input argument<br><br>RETURNS: Volume [L^3]<br><br>ARGUMENTS:<br>1. OBJECT reservoir - LB reservoir for which storage difference is desired<br><br>DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>CH, 8/29/17: Added description";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      "GetTargetStorage"( reservoir, @"t" ) - reservoir & "Storage" [@"t - 1"];

    END
    UUID "{b21e92bc-2bc0-42a5-a945-3f8da35e6df7}";;

    FUNCTION       "UBCreditableSpace" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "DESCRIPTION: This function sums the space available in the Upper Basin reservoirs for flood control, up to the maximum creditable space, for Powell, Flaming Gorge (including Fontenelle), Navajo, and Blue Mesa. The maximum creditable space for each reservoir is specified in the Hoover Flood Control Manual lfor the space building months of August through December. <br><br>RETURNS: Available UB storage [L^3]<br><br>ARGUMENTS: <NONE><br>";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>CH, 8/29/17: Edited description";
    BEGIN

      FOR ( OBJECT reservoir IN "ListSubbasin"( "UBFloodControlReservoirs" ) ) WITH NUMERIC sum = 0.00000000 "acre-feet" DO
  IF ( ( STRINGIFY reservoir ) == "FlamingGorge" )
  THEN
   sum + "Min"( "CurrentAvailableSpace"( % "FlamingGorge" ) + "CurrentAvailableSpace"( % "Fontenelle" ), "GetMaxCreditableSpace"( % "FlamingGorge" ) )
  ELSE
   sum + "Min"( "CurrentAvailableSpace"( reservoir ), "GetMaxCreditableSpace"( reservoir ) )
  ENDIF
 ENDFOR;

    END
    UUID "{17af45b3-7019-4e8a-ae9e-c82ae2b17c3e}";;

    FUNCTION       "SpaceBuilding" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-feet";
    DESCRIPTION    "DESCRIPTION: This function is used to determine if space building releases from Hoover are necessary. It compares the minimum required available flood control storage space at a given month (using the SystemSpace function and the MeadFloodControlData.Space table) to the available space in Mead plus the creditable space in Upper Basin reservoirs. If there is not sufficient flood control space available, it computes target storage required to create the minimum flood control space in Mead, and returns that target storage. <br><br>RETURNS: Storage volume [L^3]<br><br>ARGUMENTS: <NONE><br><br>";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>CH, 8/29/17: Added description";
    BEGIN

      IF ( ( "CurrentAvailableSpace"( % "Mead" ) + "UBCreditableSpace"(  ) > "SystemSpace"(  ) ) COMMENTED_BY "Current Mead space + UB space > Required space for current month" )
 THEN
  "ComputeMinimumSpace"( % "Mead" ) COMMENTED_BY "Calculate max space available in Mead"
 ELSE
  ( "GetLiveCapacity"( % "Mead" ) - "SystemSpace"(  ) + "UBCreditableSpace"(  ) ) COMMENTED_BY "Calculate max space available in Mead + UB"
 ENDIF;

    END
    UUID "{ec26cd62-4ca0-4a23-9a46-8da34ef31950}";;

    FUNCTION       "SumEvapCoeff" ( OBJECT reservoir )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "DESCRIPTION: This function calculates the sum of all the evaporation coefficients for the specified reservoir until July. During the sum, the coefficient values are adjusted to deal with the unit conversion issue between the current month and the months for which the values were entered, and converted into 31 day months. <br><br>RETURNS: Evaporation depth [L]<br><br>ARGUMENTS:<br>1. OBJECT reservoir - the reservoir whose coefficients are to be summed<br><br>DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>CH, 8/29/17: Edited description";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      FOR ( DATETIME date IN "GetMonthlyDatelist"( @"t", @"24:00:00 July Max DayOfMonth, Current Year" ) ) WITH NUMERIC result = 0.00000000 "ft" DO
  result + reservoir & "Evaporation Coefficients" ["GetMonth"( date ) - 1.00000000, 0.00000000] * 1.00000000 "month"
 ENDFOR;

    END
    UUID "{3f5a41b7-4651-4f13-a8f4-43ea462a2fab}";;

  END
  UUID "{021dfdd7-55b9-4be0-a27d-0f984d524469}";;

  UTILITY_GROUP "24 Month General Functions";
  DESCRIPTION   "";
  ACTIVE        TRUE;
  NOTES          "";
  BEGIN

    FUNCTION       "AcreFeetPrint" ( NUMERIC value )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "[acre-feet]";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      value;

    END
    UUID "{e2586928-004d-48ae-b697-3fedb0210c47}";;

    FUNCTION       "SlotToString" ( OBJECT obj )
    RETURN_TYPE    LIST;
    SCALE_UNITS    "";
    DESCRIPTION    "This function starts out with a data object. It gets a list of slots in the object by using the GetSeriesSlots predefined function. It then uses the MAPLIST palette button to convert the list of slots into a list of strings.<br>";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      MAPLIST ( SLOT slotname IN "GetSeriesSlots"( obj ) ) DO
  "GetSlotName"( slotname )
 ENDMAPLIST;

    END
    UUID "{e7c4eed1-676f-4136-9a35-ece6589cd916}";;

    FUNCTION       "AcreFeetPerMonthPrint" ( NUMERIC value )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "[acre-feet/month]";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      value;

    END
    UUID "{bd476f6b-c606-4cd6-a0fb-b99182b462ad}";;

    FUNCTION       "CFSPrint" ( NUMERIC value )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "[cfs]";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      value;

    END
    UUID "{35af3c8e-6988-4409-9cce-c6cf468c02a9}";;

    FUNCTION       "GetMonthlyDatelist" ( DATETIME startDate, DATETIME endDate )
    RETURN_TYPE    LIST;
    SCALE_UNITS    "";
    DESCRIPTION    "makes a monthly datelist from the current month to the given month.";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      IF ( startDate >= endDate )
 THEN
  { endDate }
 ELSE
  WHILE ( ( GET @INDEX 0.00000000 FROM dateList ) > startDate ) WITH LIST dateList = { endDate } DO
   INSERT ( GET @INDEX 0.00000000 FROM dateList ) - "GetDaysInMonth"( ( GET @INDEX 0.00000000 FROM dateList ) - 1.00000000 "day" ) INTO dateList
  ENDWHILE
 ENDIF;

    END
    UUID "{f95b8feb-ba8f-4761-af29-0d4b05962931}";;

    FUNCTION       "SumGainsBelow" ( OBJECT reservoir )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-feet/month";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      "SumObjectsAggregatedOverTime"( "Below" CONCAT STRINGIFY reservoir, "Local Inflow", "SUM", "INPUT", FALSE, @"t", @"t" );

    END
    UUID "{15e1e9dd-defd-4e79-9888-671dc7b792cb}";;

    FUNCTION       "SumGainsBelowVolume" ( OBJECT reservoir, DATETIME startDate, DATETIME endDate )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-feet";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      "SumObjectsAggregatedOverTime"( "Below" CONCAT STRINGIFY reservoir, "Local Inflow", "SUM", "INPUT", TRUE, startDate, endDate );

    END
    UUID "{8951d4f1-15df-41bb-8451-628219eeafaa}";;

    FUNCTION       "SumAllGainsBelowVolume" ( OBJECT reservoir, DATETIME startDate, DATETIME endDate )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-feet";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      "SumObjectsAggregatedOverTime"( "Below" CONCAT STRINGIFY reservoir, "Local Inflow", "SUM", "ALL", TRUE, startDate, endDate );

    END
    UUID "{37697214-86d9-40e7-8f26-068ca836aa47}";;

    FUNCTION       "SumDiversionsBelow" ( OBJECT reservoir )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-feet/month";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      "SumObjectsAggregatedOverTime"( "Below" CONCAT STRINGIFY reservoir, "Total Diversion Requested", "SUM", "INPUT", FALSE, @"t", @"t" );

    END
    UUID "{ce4ffa31-2762-461f-a44a-67e954489ee3}";;

    FUNCTION       "SumDiversionsBelowVolume" ( OBJECT reservoir, DATETIME startDate, DATETIME endDate )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-feet";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      "SumObjectsAggregatedOverTime"( "Below" CONCAT STRINGIFY reservoir, "Total Diversion Requested", "SUM", "INPUT", TRUE, startDate, endDate );

    END
    UUID "{b6d38ac8-fae8-48dc-b532-7590db2803d9}";;

    FUNCTION       "SumAllDiversionsBelowVolume" ( OBJECT reservoir, DATETIME startDate, DATETIME endDate )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-feet";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      "SumObjectsAggregatedOverTime"( "Below" CONCAT STRINGIFY reservoir, "Total Diversion Requested", "SUM", "ALL", TRUE, startDate, endDate );

    END
    UUID "{7d6a8f87-1855-470b-81fc-43f9a2f68b74}";;

    FUNCTION       "SumSlotVolume" ( SLOT slot, LIST dates )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-feet";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      FOR ( DATETIME date IN dates ) WITH NUMERIC sum = 0.00000000 "acre-feet" DO
  sum + "FlowToVolume"( slot [date], date )
 ENDFOR;

    END
    UUID "{1370a8cf-8ce9-49fd-af27-818071f998d9}";;

    FUNCTION       "Compute Head as a Function of Turbine Release" ( NUMERIC turbineRelease )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      ( $ "Mohave.Pool Elevation" [] + $ "Mohave.Pool Elevation" [@"t - 1"] ) / 2.00000000 - "TableInterpolation"( $ "Mohave.Tailwater Table", 0.00000000, 1.00000000, turbineRelease, @"t" );

    END
    UUID "{9d861e3d-1322-4c5b-b150-127f2f1ec4b6}";;

    FUNCTION       "Annual Volume" ( SLOT slot )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "Find the sum of a given slot over the calendar year<br>";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      "SumFlowsToVolume"( slot, @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" );

    END
    UUID "{49b5779e-59f8-4102-9c71-33009d5cd9ce}";;

    FUNCTION       "AnnualVolumeSlot" ( SLOT slot )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "Find the sum of a given slot over the calendar year<br>";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      "SumSlot"( slot, @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" );

    END
    UUID "{91f425e5-59c3-4d85-94b1-a5e05da1d2f7}";;

    FUNCTION       "SumSlotList" ( OBJECT obj )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "This functions starts out with a data object. It gets a list of slots in the object by using the GetSeriesSlots predefined function. It then sums the values of all the slots in the object over the current timestep.";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      FOR ( SLOT slotname IN "GetSeriesSlots"( obj ) ) WITH NUMERIC result = 0.00000000 "acre-ft" DO
  result + slotname []
 ENDFOR;

    END
    UUID "{34f7174f-0715-4bfb-8bb3-514533844c46}";;

    FUNCTION       "SumSlotListDates" ( OBJECT obj, DATETIME date )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "This functions starts out with a data object. It gets a list of slots in the object by using the GetSeriesSlots predefined function. It then sums the values of all the slots in the object over the current timestep.";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      FOR ( SLOT slotname IN "GetSeriesSlots"( obj ) ) WITH NUMERIC result = 0.00000000 "acre-ft" DO
  result + slotname [date]
 ENDFOR;

    END
    UUID "{19811b84-0a37-4804-bcec-9ffa75b98fe1}";;

    FUNCTION       "GetLastDate" ( DATETIME date )
    RETURN_TYPE    DATETIME;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         FALSE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "DEVELOPMENT NOTES:<br>CH, 8/25/17: Deactivated";
    BEGIN

      IF ( "GetMonth"( date ) > 1.00000000 )
 THEN
  @"24:00:00 December 31, Current Year + 2 Year"
 ELSE
  @"24:00:00 December 31, Current Year + 1 Year"
 ENDIF;

    END
    UUID "{eb56867c-ba7b-45b1-974a-eeb806518696}";;

    FUNCTION       "GetFirstDate" ( DATETIME date )
    RETURN_TYPE    DATETIME;
    SCALE_UNITS    "";
    DESCRIPTION    "This function is used in rules that set monthly values in outyears. If the start timestep is December, we want the rule to skip the 1st 2 timesteps and set values Feb - Dec (11 total), otherwise set values Jan-Dec (12 total). <br><br>For start timestep in December the outyear schedules are only adjusted February through December, in all other start timesteps the schedules are adjusted January through December. In December, January of the outyear is the second month of the run and we have operational schedules for that month.";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "<br>DEVELOPMENT NOTES:<br>CH, 9/6/17: Deactivated<br><br>GA, 12/6/17: Reactivated for use in MWD and CAP Reset Monthly Forecast All Months Outyear.";
    BEGIN

      IF ( date == @"Start Timestep + 1" )
 THEN
  @"24:00:00 February Max DayOfMonth, Current Year"
 ELSE
  @"24:00:00 January Max DayOfMonth, Current Year"
 ENDIF;

    END
    UUID "{ba6eb802-99a4-4f40-9e87-f18cc9bea6e0}";;

    FUNCTION       "GetDaysBasedOnFirstDate" ( DATETIME date )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "This function is used in rules that set monthly values in outyears. If the start timestep is December, we want the rule to skip the 1st 2 timesteps and set values Feb - Dec (11 total), otherwise set values Jan-Dec (12 total). ";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      IF ( date == @"Start Timestep + 1" )
 THEN
  11.00000000
 ELSE
  12.00000000
 ENDIF;

    END
    UUID "{5e7e4b26-c92e-44e5-a8a5-dc40e1417592}";;

    FUNCTION       "Dec31ofYear" ( DATETIME date )
    RETURN_TYPE    DATETIME;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      IF ( "LeapYear"( date ) )
 THEN
  "OffsetDate"( date, "Units NONE"( 366.00000000 "day" - "GetDayOfYear"( date ) ), "1 days" )
 ELSE
  "OffsetDate"( date, "Units NONE"( 365.00000000 "day" - "GetDayOfYear"( date ) ), "1 days" )
 ENDIF;

    END
    UUID "{fe07ab94-77e6-4ddb-8285-53556b2713af}";;

    FUNCTION       "Units NONE" ( NUMERIC number )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      number / 1.00000000 "day";

    END
    UUID "{3c5fd31f-1858-4d66-a9b6-49c45af0fb72}";;

  END
  UUID "{66661eed-c71f-47e7-822c-7f2786b635c4}";;

  UTILITY_GROUP "Rule Curve Functions";
  DESCRIPTION   "";
  ACTIVE        TRUE;
  NOTES          "";
  BEGIN

    FUNCTION       "ComputeOutflowAtGivenStorage" ( OBJECT reservoir, NUMERIC storage )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-feet/month";
    DESCRIPTION    "DESCRIPTION: Uses the predefined function SolveOutflow to calculate the outflow value that leads to the final storage value provided in the input parameter &quot;storage&quot; bound by Mead min and max releases defined in the UBRuleCurveData object.<br><br>RETURNS: Outflow rate [L^3/T]<br><br>ARGUMENTS: <br>1. OBJECT reservoir - the reservoir object for which the outflow value is desired<br>2. NUMERIC storage - the end of timestep storage target<br><br>CONSTRAINTS: Minimum and maximum releases as stored on UBRuleCurveData.ReservoirData<br><br>";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    MIN_CONSTRAINT "GetMinRelease"( reservoir );
    MAX_CONSTRAINT "GetMaxRelease"( reservoir );
    NOTES          "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>CH, 8/29/17: Added description ";
    BEGIN

      "SolveOutflow"( reservoir, reservoir & "Inflow" [], storage, reservoir & "Storage" [@"t - 1"], @"t" );

    END
    UUID "{93c6b2db-b821-408b-b5a1-6211d11c1ea2}";;

    FUNCTION       "ComputeOutflowAtGivenStorageForSpaceBuilding" ( OBJECT reservoir, NUMERIC storage )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-feet/month";
    DESCRIPTION    "DESCRIPTION: Uses the predefined function SolveOutflow to calculate the outflow value that leads to the final storage value provided as the input parameter &quot;storage&quot; without outflow contraints.<br><br>RETURNS: Outflow rate [L^3/T]<br><br>ARGUMENTS: <br>1. OBJECT reservoir - the reservoir object for which the outflow value is desired<br>2. NUMERIC storage - the end of timestep storage target<br><br><br>";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>CH. 8/29/17: Added description";
    BEGIN

      "SolveOutflow"( reservoir, reservoir & "Inflow" [], storage, reservoir & "Storage" [@"t - 1"], @"t" );

    END
    UUID "{457d3eef-46ec-4211-a6bf-c38fb4456d02}";;

    FUNCTION       "ComputeStorageWithGivenOutflow" ( OBJECT reservoir, NUMERIC outflow )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    MIN_CONSTRAINT "GetInactiveCapacity"( reservoir );
    MAX_CONSTRAINT "GetLiveCapacity"( reservoir );
    NOTES          "";
    BEGIN

      "SolveStorage"( reservoir, reservoir & "Inflow" [], outflow, reservoir & "Storage" [@"t - 1"], @"t" );

    END
    UUID "{83049bc1-98e6-4bb3-8e4c-3f1e50f2f051}";;

  END
  UUID "{01a5e287-ca24-4d0a-a66e-757c70e8342a}";;

  UTILITY_GROUP "Get Data Functions";
  DESCRIPTION   "";
  ACTIVE        TRUE;
  NOTES          "";
  BEGIN

    FUNCTION       "GetMaxRelease" ( OBJECT reservoir )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "cfs";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      $ "UBRuleCurveData.ReservoirData" [STRINGIFY reservoir, "maxRelease"];

    END
    UUID "{8a04a757-1531-4609-8a34-c0f83c062698}";;

    FUNCTION       "GetMinRelease" ( OBJECT reservoir )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "cfs";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      $ "UBRuleCurveData.ReservoirData" [STRINGIFY reservoir, "minRelease"];

    END
    UUID "{346427c4-1fba-4d0c-9ea5-dac00da0ee49}";;

    FUNCTION       "GetMininumSpace" ( OBJECT reservoir )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      $ "MeadFloodControlData.MinSpace" [STRINGIFY reservoir, "Min Space"];

    END
    UUID "{37265a59-0f5e-4efd-91c0-c3494f89399d}";;

    FUNCTION       "GetMaxCreditableSpace" ( OBJECT reservoir )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "DESCRIPTION: This function returns the maximum creditable space from the MeadFloodControlData.CredSpace table for the specified Upper Basin reservoir. This represents the maximum space that can be credited to available flood control space in the system for that reservoir. ";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "DEVELOPMENT NOTES:<br>CH, 8/29/17: Description added";
    BEGIN

      $ "MeadFloodControlData.CredSpace" ["Credit. Space", STRINGIFY reservoir];

    END
    UUID "{e11251a7-9194-4ffb-9bb3-cdb8bd3b5aa8}";;

    FUNCTION       "GetInactiveCapacity" ( OBJECT reservoir )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-feet";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      $ "UBRuleCurveData.ReservoirData" [STRINGIFY reservoir, "inactiveCapacityStorage"];

    END
    UUID "{381fba37-de64-4d7f-82a0-a251bbb7a9d4}";;

    FUNCTION       "GetLiveCapacity" ( OBJECT reservoir )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-feet";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      $ "UBRuleCurveData.ReservoirData" [STRINGIFY reservoir, "liveCapacityStorage"];

    END
    UUID "{69f577a9-4681-4915-9a31-ce975c0d31b8}";;

    FUNCTION       "GetRuleCurveStorage" ( OBJECT reservoir, DATETIME date )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-feet";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      $ "UBRuleCurveData.BaseRuleCurves" [STRINGIFY reservoir, "GetMonthAsString"( date )];

    END
    UUID "{3e9b30d1-0be4-45f4-a93e-2116b13835b9}";;

    FUNCTION       "GetTargetStorage" ( OBJECT reservoir, DATETIME date )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      "LBRuleCurveData." CONCAT ( STRINGIFY reservoir ) CONCAT " Target Storage" [date];

    END
    UUID "{de09cabc-404a-4737-8c59-14befbd7232f}";;

    FUNCTION       "SystemSpace" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-feet";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      $ "MeadFloodControlData.Space" [0.00000000, "GetMonthAsString"( @"t" )];

    END
    UUID "{3722373d-13ba-4241-ae8f-2628fa5ee8b6}";;

    FUNCTION       "RepeatAnnualPreviousYearSlots" (  )
    RETURN_TYPE    LIST;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         FALSE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "DEVELOPMENT NOTES:<br>CH, 8/25/17: Deactivated along with Rule 98";
    BEGIN

      { $ "AnnualWaterUse.Arizona_Apportionment" , $ "AnnualWaterUse.California_Apportionment" , $ "AnnualWaterUse.Nevada_Apportionment" , $ "Surplus Volume Entitlements.AzPumpersBlwImp" , $ "Surplus Volume Entitlements.CAP FC" , $ "Surplus Volume Entitlements.CaPumpersAbvImp" , $ "Surplus Volume Entitlements.CibolaValleyIID" , $ "Surplus Volume Entitlements.City of Parker" , $ "Surplus Volume Entitlements.Gila Monster Farms" , $ "Surplus Volume Entitlements.Mexico" , $ "Surplus Volume Entitlements.Needles" , $ "Surplus Volume Entitlements.SNWA Domestic" , $ "Surplus Volume Entitlements.SNWA FC" , $ "Surplus Volume Entitlements.SNWA Quantified" };

    END
    UUID "{c9cceba0-59c6-444d-8c8a-133d07cbc8f3}";;

    FUNCTION       "RepeatMonthlyPreviousYearSlots" (  )
    RETURN_TYPE    LIST;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         FALSE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "DEVELOPMENT NOTES:<br>CH, 8/25/17: Deactivated along with Rule 98";
    BEGIN

      { $ "BelowImperialDam:GainsImpToNIB.Local Inflow" , $ "BelowImperialDam:Gila River.Local Inflow" , $ "CoRivMeadToMohave:GainsAboveDavis.Local Inflow" , $ "HavasuToImperial:GainsPkrToImp.Local Inflow" , $ "LBRuleCurveData.Havasu Target Storage" , $ "LBRuleCurveData.Mohave Target Storage" , $ "MWDAndCAPReach:GainsAboveParker.Local Inflow" , $ "PowellToMead:GainsAboveHoover.Local Inflow" , $ "PowellToMead:GainsGrandCanyon.Local Inflow" , $ "PowellToMead:PariaRiver.Local Inflow" , $ "Azotea Tunnel.Diversion Requested" , $ "TunnelDiversionBelowCrystalForAg.Diversion Requested" , $ "BlueMesa.Power Plant Cap Fraction" , $ "Crystal.Power Plant Cap Fraction" , $ "FlamingGorge.Power Plant Cap Fraction" , $ "Fontenelle.Power Plant Cap Fraction" , $ "Havasu.Power Plant Cap Fraction" , $ "Mead.Power Plant Cap Fraction" , $ "Mohave.Power Plant Cap Fraction" , $ "MorrowPoint.Power Plant Cap Fraction" , $ "Powell.Power Plant Cap Fraction" };

    END
    UUID "{47b4a4c3-f2c7-4cff-bde1-966270816f57}";;

    FUNCTION       "CalcMonthlyDiversionsList" (  )
    RETURN_TYPE    LIST;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         FALSE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "DEVELOPMENT NOTES:<br>CH, 8/25/17: Deactivated along with Rule 98";
    BEGIN

      { "SaltonSea" , "IID" , "Coachella" , "MWDDiversion" , "SNWP" , "Mexico" };

    END
    UUID "{f118e983-ea48-46b3-9070-2b8f5f6483ba}";;

    FUNCTION       "RepeatMonthlyLB_CU_PreviousYearSlots" (  )
    RETURN_TYPE    LIST;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         FALSE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "DEVELOPMENT NOTES:<br>CH, 8/25/17: Deactivated along with Rule 98";
    BEGIN

      { $ "Arizona_CU_Schedules.AzPumpersAbvImp" , $ "Arizona_CU_Schedules.AzPumpersBlwImp" , $ "Arizona_CU_Schedules.AzPumpersDvsToPkr" , $ "Arizona_CU_Schedules.BrookeWater" , $ "Arizona_CU_Schedules.BullheadCity" , $ "Arizona_CU_Schedules.CAP" , $ "Arizona_CU_Schedules.CibolaNWR" , $ "Arizona_CU_Schedules.CibolaValleyIID" , $ "Arizona_CU_Schedules.City of Parker" , $ "Arizona_CU_Schedules.City of Yuma" , $ "Arizona_CU_Schedules.Cocopah Indian Res" , $ "Arizona_CU_Schedules.CRIRAz" , $ "Arizona_CU_Schedules.DavisDamProject" , $ "Arizona_CU_Schedules.DesertLawnMemorial" , $ "Arizona_CU_Schedules.Ehrenberg" , $ "Arizona_CU_Schedules.Ft Yuma" , $ "Arizona_CU_Schedules.FtMohaveAz" , $ "Arizona_CU_Schedules.Gila Monster Farms" , $ "Arizona_CU_Schedules.GoldenShores" , $ "Arizona_CU_Schedules.HavasuNWR" , $ "Arizona_CU_Schedules.ImperialNWR" , $ "Arizona_CU_Schedules.LakeHavasuCity" , $ "Arizona_CU_Schedules.LMNRA Az Mead" , $ "Arizona_CU_Schedules.LMNRA Az Mohave" , $ "Arizona_CU_Schedules.MCAirStation" , $ "Arizona_CU_Schedules.MohaveValleyIID" , $ "Arizona_CU_Schedules.MohaveWaterConsDist" , $ "Arizona_CU_Schedules.NGVIDD" , $ "Arizona_CU_Schedules.SouthernPacific" , $ "Arizona_CU_Schedules.UnitB" , $ "Arizona_CU_Schedules.UofA" , $ "Arizona_CU_Schedules.WMIDD" , $ "Arizona_CU_Schedules.YAO" , $ "Arizona_CU_Schedules.YCWUA" , $ "Arizona_CU_Schedules.YID" , $ "Arizona_CU_Schedules.YMIDD" , $ "Arizona_CU_Schedules.YumaProvingGround" , $ "Arizona_CU_Schedules.YumaUnionHighScl" , $ "California_CU_Schedules.CaPumpersAbvImp" , $ "California_CU_Schedules.Chemehuevi" , $ "California_CU_Schedules.Coachella" , $ "California_CU_Schedules.CRIRCa" , $ "California_CU_Schedules.FtMohaveCa" , $ "California_CU_Schedules.IID" , $ "California_CU_Schedules.MWDDiversion" , $ "California_CU_Schedules.Needles" , $ "California_CU_Schedules.OtherLCWSP" , $ "California_CU_Schedules.PaloVerde" , $ "California_CU_Schedules.Ranch5" , $ "California_CU_Schedules.SaltonSea" , $ "California_CU_Schedules.Winterhaven" , $ "California_CU_Schedules.YumaIsland" , $ "California_CU_Schedules.YumaProject" , $ "Mexico_CU_Schedules.MexicoBypass" , $ "Mexico_CU_Schedules.MexicoExcess" , $ "Mexico_CU_Schedules.MexicoSched" , $ "Mexico_CU_Schedules.MexicoTJ" , $ "Nevada_CU_Schedules.BasicManagement" , $ "Nevada_CU_Schedules.BigBend" , $ "Nevada_CU_Schedules.BoulderCanyonProject" , $ "Nevada_CU_Schedules.City of Henderson" , $ "Nevada_CU_Schedules.FtMohaveNv" , $ "Nevada_CU_Schedules.LMNRA Mead" , $ "Nevada_CU_Schedules.LMNRA Mohave" , $ "Nevada_CU_Schedules.LVWashReturns" , $ "Nevada_CU_Schedules.NvDeptFishGame" , $ "Nevada_CU_Schedules.PacificCoastBuilding" , $ "Nevada_CU_Schedules.SCE" , $ "Nevada_CU_Schedules.SNWADiversion" };

    END
    UUID "{f04db140-f6a2-4454-9df5-d37ff14ff852}";;

  END
  UUID "{fa33a95c-83ff-4fc1-a2d3-d0188344770e}";;

  UTILITY_GROUP "Shortage Functions";
  DESCRIPTION   "";
  ACTIVE        TRUE;
  NOTES          "";
  BEGIN

    FUNCTION       "GetStringTier" ( NUMERIC indextier )
    RETURN_TYPE    STRING;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      IF ( indextier == 0.00000000 )
 THEN
  "1075"
 ELSE
  IF ( indextier == 1.00000000 )
  THEN
   "1050"
  ELSE
   "1025"
  ENDIF
 ENDIF;

    END
    UUID "{7041d7f7-8216-4106-b513-95ce384e71f2}";;

    FUNCTION       "Arizona Shortage Depletion" ( STRING user, NUMERIC indextier, DATETIME date )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-ft/month";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      WITH STRING short_elev = "GetStringTier"( indextier ) DO
  "VolumeToFlow"( % "Arizona_CU_Schedules" & user [date] - "GetObject"( ( "Arizona_Shortage" CONCAT short_elev ) CONCAT "_Schedules" ) & user [@"24:00:00 December 31, Current Year"] * $ "Shortage.MonthlyPercents" ["GetMonthAsString"( date ), "Average"], date )
 ENDWITH;

    END
    UUID "{c5e55b07-467b-4715-91e3-7071ed3ca65a}";;

    FUNCTION       "CAP Shortage Depletion AUTO MONTHLY PCT TEST" ( NUMERIC indextier, DATETIME date )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      "Max"( "VolumeToFlow"( ( $ "ForecastUse.CAPResetAnnualFC" [@"24:00:00 December 31, Current Year"] - "GetAnnualCAPShortage"( indextier ) ) * "GetMonthlyPercentGivenCYSum"( $ "CAPDiversion.Total Diversion Requested", date ), date ), 0.00000000 "acre-ft/month" );

    END
    UUID "{5943639a-4f8c-476d-a875-c527c021c393}";;

    FUNCTION       "CAP Shortage Depletion" ( NUMERIC indextier, DATETIME date )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      "Max"( "VolumeToFlow"( ( ( $ "ForecastUse.CAPResetAnnualFC" [@"24:00:00 December 31, Current Year"] - "GetAnnualCAPShortage"( indextier ) ) + IF ( $ "Shortage.Shortage Flag" [@"24:00:00 December 31, Current Year"] <= 2.00000000 AND $ "Shortage.Shortage Flag" [@"24:00:00 December 31, Current Year"] >= 1.00000000 )
 THEN
  $ "ICS Credits.CAWCD Mitigation Water" []
 ELSE
  0.00000000 "acre-ft"
 ENDIF ) * $ "Shortage.MonthlyPercents" ["GetMonthAsString"( date ), "CAP"], date ), 0.00000000 "acre-ft/month" );

    END
    UUID "{15324337-f855-47fa-98c7-2dcf6e292bd2}";;

    FUNCTION       "GetAnnualCAPShortage" ( NUMERIC indextier )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "acre-feet";
    DESCRIPTION    "The annual CAP shortage amount is the Arizona shortage amount minus the sum of the non-CAP shortage amounts";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      WITH STRING short_elev = "GetStringTier"( indextier ) DO
  $ "Shortage.State Shortage Volumes" [indextier, "Arizona"]
 ENDWITH;

    END
    UUID "{cf37b54e-4747-47bd-a3c5-86515b2d54ac}";;

  END
  UUID "{6e06cc7a-9354-4738-bf8a-38bc9c3ed6db}";;

  UTILITY_GROUP "Surplus Functions";
  DESCRIPTION   "";
  ACTIVE        TRUE;
  NOTES          "";
  BEGIN

    FUNCTION       "Normal_LBDemands" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "Calculates Lower Basin water use under Normal Conditions.<br>Created as part of the Quantified Surplus logic. -HMG 8/2/11<br><br>";
    ACTIVE         FALSE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "DEVELOPMENT NOTES: <br>CH, 8/25/17: Replaced call to SumGainsBelowVolume with SumAllGainsBelowVolume, deactivated along with Rule 98";
    BEGIN

      "Min"( 7500000.00000000 "acre-ft", "Annual Volume"( $ "PumpingFromLakeMead.Total Diversion Requested" ) + "Annual Volume"( $ "OthersMeadToMohave.Total Diversion Requested" ) + "Annual Volume"( $ "NvDvsToPkr.Total Diversion Requested" ) + "Annual Volume"( $ "CaDvsToPkr.Total Diversion Requested" ) + "Annual Volume"( $ "AzDvsToPkr.Total Diversion Requested" ) + "Annual Volume"( $ "FtMohaveIndRes.Total Diversion Requested" ) + "Annual Volume"( $ "MWDDiversion.Total Diversion Requested" ) + "Annual Volume"( $ "CAPDiversion.Total Diversion Requested" ) + "Annual Volume"( $ "PaloVerde.Total Diversion Requested" ) + "Annual Volume"( $ "CRIR.Total Diversion Requested" ) + "Annual Volume"( $ "CaPkrToImp.Total Diversion Requested" ) + "Annual Volume"( $ "AzPkrToImp.Total Diversion Requested" ) + "Annual Volume"( $ "AAC.Total Diversion Requested" ) + "Annual Volume"( $ "GilaGravityMainCanal.Total Diversion Requested" ) + "Annual Volume"( $ "GilaAndYumaUsers.Total Diversion Requested" ) + "Annual Volume"( $ "MexicanTreatyDelivery.Total Diversion Requested" ) + "Annual Volume"( $ "OthersBlwImp.Total Diversion Requested" ) );

    END
    UUID "{79cd06b6-947c-482b-b7f9-f7b1ace5f51c}";;

    FUNCTION       "Normal_LBDemands - Include Mexico" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "Calculates Lower Basin water use under Normal Conditions.<br>Created as part of the Quantified Surplus logic. -HMG 8/2/11";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      "Min"( 7500000.00000000 "acre-ft" + "Annual Volume"( $ "MexicanTreatyDelivery.Total Diversion Requested" ), "Annual Volume"( $ "PumpingFromLakeMead.Total Diversion Requested" ) + "Annual Volume"( $ "OthersMeadToMohave.Total Diversion Requested" ) + "Annual Volume"( $ "NvDvsToPkr.Total Diversion Requested" ) + "Annual Volume"( $ "CaDvsToPkr.Total Diversion Requested" ) + "Annual Volume"( $ "AzDvsToPkr.Total Diversion Requested" ) + "Annual Volume"( $ "FtMohaveIndRes.Total Diversion Requested" ) + "Annual Volume"( $ "MWDDiversion.Total Diversion Requested" ) + "Annual Volume"( $ "CAPDiversion.Total Diversion Requested" ) + "Annual Volume"( $ "PaloVerde.Total Diversion Requested" ) + "Annual Volume"( $ "CRIR.Total Diversion Requested" ) + "Annual Volume"( $ "CaPkrToImp.Total Diversion Requested" ) + "Annual Volume"( $ "AzPkrToImp.Total Diversion Requested" ) + "Annual Volume"( $ "AAC.Total Diversion Requested" ) + "Annual Volume"( $ "GilaGravityMainCanal.Total Diversion Requested" ) + "Annual Volume"( $ "GilaAndYumaUsers.Total Diversion Requested" ) + "Annual Volume"( $ "MexicanTreatyDelivery.Total Diversion Requested" ) + "Annual Volume"( $ "OthersBlwImp.Total Diversion Requested" ) );

    END
    UUID "{1a01c800-2e68-46a4-9498-c884865903bc}";;

    FUNCTION       "Set Monthly Surplus Schedule" ( DATETIME date, STRING user )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "Calculates the monthly surplus volume from the annual volume.<br>This function was created as part of the Domestic and Quantified Surplus logic. -HMG 8/2/11<br>";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      IF ( user == "CAP" )
 THEN
  % "Surplus Total Annual Schedules" & user [@"24:00:00 December 31, Current Year"] * $ "Shortage.MonthlyPercents" ["GetMonthAsString"( date ), "CAP"]
 ELSE
  IF ( user == "SNWA" )
  THEN
   % "Surplus Total Annual Schedules" & user [@"24:00:00 December 31, Current Year"] * $ "Shortage.MonthlyPercents" ["GetMonthAsString"( date ), "Average"]
  ELSE
   % "Surplus Total Annual Schedules" & user [@"24:00:00 December 31, Current Year"] * $ "Shortage.MonthlyPercents" ["GetMonthAsString"( date ), "Equal"]
  ENDIF
 ENDIF;

    END
    UUID "{7a2550d7-d736-4d44-8c82-b829fd2c8265}";;

    FUNCTION       "Set Monthly Surplus Schedule- FC" ( DATETIME date, STRING user )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "Calculates the monthly Flood Control Surplus volume from the annual volume. This function varies from the &quot;Set Monthly Surplus Schedule&quot; function in that it can be applied to any starting month instead of being limited to January. This is because a Flood Surplus can be declared at any point within the year. Once a Flood Control Surplus is declared it will continue through to the end of the current calendar year.  <br>";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      IF ( user == "CAP" )
 THEN
  % "Surplus Total Annual Schedules" & user [@"24:00:00 December 31, Current Year"] * $ "Shortage.MonthlyPercents" ["GetMonthAsString"( date ), "CAP"]
 ELSE
  IF ( user == "SNWA" )
  THEN
   % "Surplus Total Annual Schedules" & user [@"24:00:00 December 31, Current Year"] * $ "Shortage.MonthlyPercents" ["GetMonthAsString"( date ), "Average"]
  ELSE
   % "Surplus Total Annual Schedules" & user [@"24:00:00 December 31, Current Year"] * $ "Shortage.MonthlyPercents" ["GetMonthAsString"( date ), "Equal"]
  ENDIF
 ENDIF;

    END
    UUID "{9275e47d-b884-45c5-a79f-03d74bbd45c0}";;

    FUNCTION       "SumLBDemands" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "1000 acre-ft";
    DESCRIPTION    "Calculates the Lower Basin demands as defined in the Interim Guidelines ROD. <br>Created as part of the Quantified Surplus logic. -HMG 8/2/11<br><br>";
    ACTIVE         FALSE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "DEVELOPMENT NOTES: <br>CH, 8/25/17: Replaced call to SumGainsBelowVolume with SumAllGainsBelowVolume, deactivated along with Rule 98";
    BEGIN

      "Normal_LBDemands"(  ) + ( $ "Surplus.Average Annual Evaporation" [0.00000000, "Mead"] + $ "Surplus.Average Annual Evaporation" [0.00000000, "Mohave"] + $ "Surplus.Average Annual Evaporation" [0.00000000, "Havasu"] ) - ( "SumAllGainsBelowVolume"( % "Powell", @"24:00:00 January 31, Current Year", @"24:00:00 December 31, Current Year" ) + "SumAllGainsBelowVolume"( % "Mead", @"24:00:00 January 31, Current Year", @"24:00:00 December 31, Current Year" ) + "SumAllGainsBelowVolume"( % "Havasu", @"24:00:00 January 31, Current Year", @"24:00:00 December 31, Current Year" ) );

    END
    UUID "{adf59bca-bdca-4576-9535-aa15081ef4c1}";;

    FUNCTION       "SumLBDemands - Include Mexico" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "1000 acre-ft";
    DESCRIPTION    "Calculates the Lower Basin demands as defined in the Interim Guidelines ROD. <br>Created as part of the Quantified Surplus logic. -HMG 8/2/11<br>";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "DEVELOPMENT NOTES: <br>CH, 8/25/17: Replaced call to SumGainsBelowVolume with SumAllGainsBelowVolume";
    BEGIN

      "Normal_LBDemands - Include Mexico"(  ) + ( $ "Surplus.Average Annual Evaporation" [0.00000000, "Mead"] + $ "Surplus.Average Annual Evaporation" [0.00000000, "Mohave"] + $ "Surplus.Average Annual Evaporation" [0.00000000, "Havasu"] ) - ( "SumAllGainsBelowVolume"( % "Powell", @"24:00:00 January 31, Current Year", @"24:00:00 December 31, Current Year" ) + "SumAllGainsBelowVolume"( % "Mead", @"24:00:00 January 31, Current Year", @"24:00:00 December 31, Current Year" ) + "SumAllGainsBelowVolume"( % "Havasu", @"24:00:00 January 31, Current Year", @"24:00:00 December 31, Current Year" ) );

    END
    UUID "{1b09f316-52f2-463f-8d52-1153f7016872}";;

    FUNCTION       "SumPreviousYearICScredits" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "1000 acre-ft";
    DESCRIPTION    "Calculates the Lower Basin states' total cumulative ICS credits for the previous calendar year.<br>Created as part of the Quantified Surplus logic. -HMG 8/2/11 ";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG TRUE;
    NOTES          "";
    BEGIN

      $ "ICS Credits.TotalICS_AZ" [@"24:00:00 December 31, Previous Year"] + $ "ICS Credits.TotalICS_CA" [@"24:00:00 December 31, Previous Year"] + $ "ICS Credits.TotalICS_NV" [@"24:00:00 December 31, Previous Year"];

    END
    UUID "{14ec001e-ae3c-46b3-b289-c12cbb1a1be0}";;

    FUNCTION       "GetMonthlyPercentGivenCYSum" ( SLOT slot, DATETIME date )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      NaNToZero ( slot [date] / "SumSlot"( slot, @"24:00:00 January 31, Current Year", @"24:00:00 December 31, Current Year" ) );

    END
    UUID "{a81a23c5-a7d5-4fec-bf92-4fc09ee03c12}";;

    FUNCTION       "MaxStorage" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "DESCRIPTION: Calculates the maximum storage defined as the maximum combined storage of Lakes Powell and Mead that will meet the system space requirement at the beginning of the year, assuming 30% of that requirement will be met by the reservoirs upstream of Lake Powell<br><br>RETURNS: Monthly volume [L^3]<br><br>ARGUMENTS: <NONE><br><br>CONSTRAINTS: <NONE>";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "CH, 5/9/18: Created to replace a scalar slot value (Surplus.MaxStorage = 47.96) to make this value dynamic. ";
    BEGIN

      "GetLiveCapacity"( % "Mead" ) + "GetLiveCapacity"( % "Powell" ) - 0.70000000 * $ "MeadFloodControlData.Space" [0.00000000, "GetMonthAsString"( @"24:00:00 December Max DayOfMonth, Current Year" )];

    END
    UUID "{171a4d9b-c432-448e-bad2-d6220aed5851}";;

    FUNCTION       "ShareofMexicoSurplusbyState" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "DEVELOPMENT NOTES:<br><br>GCAA, 20181030: Created rule to divide Mexico's Surplus by state per Minute 323";
    BEGIN

      1.00000000 / 3.00000000;

    END
    UUID "{03d644f4-138c-4114-8cfe-331ca033e961}";;

  END
  UUID "{db732aa9-5d69-454f-9caa-7c66b832c52c}";;

  UTILITY_GROUP "DCP and ICS Functions";
  DESCRIPTION   "";
  ACTIVE        TRUE;
  NOTES          "";
  BEGIN

    FUNCTION       "DCP Users" (  )
    RETURN_TYPE    LIST;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      { "AZ" , "NV" , "CA" , "MWD" , "Coachella" , "MX" };

    END
    UUID "{1fffba1f-5a66-4da9-af34-57aafdbd1d43}";;

    FUNCTION       "ICSAccountingForAZ" (  )
    RETURN_TYPE    LIST;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      WITH NUMERIC AnnualCreationSysEff_AZ = $ "ICS Credits.AnnualCreationSysEff_CAWCD" [@"24:00:00 December 31, Current Year"] DO
  WITH NUMERIC AnnualCreationEC_AZ = ( $ "ICS Credits.AnnualCreationEC_CAWCD" [@"24:00:00 December 31, Current Year"] + $ "ICS Credits.AnnualCreationEC_CRIT" [@"24:00:00 December 31, Current Year"] + $ "ICS Credits.AnnualCreationEC_GRIC" [@"24:00:00 December 31, Current Year"] + $ "ICS Credits.AnnualCreationEC_MVIDD" [@"24:00:00 December 31, Current Year"] + $ "ICS Credits.AnnualCreationEC_WM" [@"24:00:00 December 31, Current Year"] ) DO
   WITH NUMERIC AnnualCreationBiNat_AZ = $ "ICS Credits.AnnualCreationBiNat_CAWCD" [@"24:00:00 December 31, Current Year"] DO
    WITH NUMERIC AnnualCreationDCP_AZ = $ "ICS Credits.AnnualCreationDCP_CAWCD" [@"24:00:00 December 31, Current Year"] DO
     WITH NUMERIC AnnualDeliverySysEff_AZ = $ "ICS Credits.AnnualDeliverySysEff_CAWCD" [@"24:00:00 December 31, Current Year"] DO
      WITH NUMERIC AnnualDeliveryEC_AZ = ( $ "ICS Credits.AnnualDeliveryEC_CAWCD" [@"24:00:00 December 31, Current Year"] + $ "ICS Credits.AnnualDeliveryEC_CRIT" [@"24:00:00 December 31, Current Year"] + $ "ICS Credits.AnnualDeliveryEC_GRIC" [@"24:00:00 December 31, Current Year"] + $ "ICS Credits.AnnualDeliveryEC_MVIDD" [@"24:00:00 December 31, Current Year"] + $ "ICS Credits.AnnualDeliveryEC_WM" [@"24:00:00 December 31, Current Year"] ) DO
       WITH NUMERIC AnnualDeliveryBiNat_AZ = $ "ICS Credits.AnnualDeliveryBiNat_CAWCD" [@"24:00:00 December 31, Current Year"] DO
        WITH NUMERIC AnnualDeliveryDCP_AZ = $ "ICS Credits.AnnualDeliveryDCP_CAWCD" [@"24:00:00 December 31, Current Year"] DO
         WITH NUMERIC ECICS_CRIT = ( $ "ICS Credits.ExtraordinaryConservationICS_CRIT" [@"24:00:00 December 31, Previous Year"] + "Current Year EC ICS Creation"( $ "ICS Credits.AnnualCreationEC_CRIT" [@"24:00:00 December 31, Current Year"], $ "ICS Credits.AnnualDeliveryEC_CRIT" [@"24:00:00 December 31, Previous Year"], "Arizona" ) - $ "ICS Credits.AnnualDeliveryEC_CRIT" [@"24:00:00 December 31, Current Year"] ) DO
          WITH NUMERIC ECICS_GRIC = ( $ "ICS Credits.ExtraordinaryConservationICS_GRIC" [@"24:00:00 December 31, Previous Year"] + "Current Year EC ICS Creation"( $ "ICS Credits.AnnualCreationEC_GRIC" [@"24:00:00 December 31, Current Year"], $ "ICS Credits.AnnualDeliveryEC_GRIC" [@"24:00:00 December 31, Previous Year"], "Arizona" ) - $ "ICS Credits.AnnualDeliveryEC_GRIC" [@"24:00:00 December 31, Current Year"] ) DO
           WITH NUMERIC ECICS_CAWCD = ( $ "ICS Credits.ExtraordinaryConservationICS_CAWCD" [@"24:00:00 December 31, Previous Year"] + "Current Year EC ICS Creation"( $ "ICS Credits.AnnualCreationEC_CAWCD" [@"24:00:00 December 31, Current Year"], $ "ICS Credits.AnnualDeliveryEC_CAWCD" [@"24:00:00 December 31, Previous Year"], "Arizona" ) - $ "ICS Credits.AnnualDeliveryEC_CAWCD" [@"24:00:00 December 31, Current Year"] ) DO
            WITH NUMERIC ECICS_MVIID = ( $ "ICS Credits.ExtraordinaryConservationICS_MVIDD" [@"24:00:00 December 31, Previous Year"] + "Current Year EC ICS Creation"( $ "ICS Credits.AnnualCreationEC_MVIDD" [@"24:00:00 December 31, Current Year"], $ "ICS Credits.AnnualDeliveryEC_MVIDD" [@"24:00:00 December 31, Previous Year"], "Arizona" ) - $ "ICS Credits.AnnualDeliveryEC_MVIDD" [@"24:00:00 December 31, Current Year"] ) DO
             WITH NUMERIC ECICS_WM = ( $ "ICS Credits.ExtraordinaryConservationICS_WM" [@"24:00:00 December 31, Previous Year"] + "Current Year EC ICS Creation"( $ "ICS Credits.AnnualCreationEC_WM" [@"24:00:00 December 31, Current Year"], $ "ICS Credits.AnnualDeliveryEC_WM" [@"24:00:00 December 31, Previous Year"], "Arizona" ) - $ "ICS Credits.AnnualDeliveryEC_WM" [@"24:00:00 December 31, Current Year"] ) DO
              WITH NUMERIC BiNat_CAWCD = ( $ "ICS Credits.BiNationalICS_CAWCD" [@"24:00:00 December 31, Previous Year"] + $ "ICS Credits.AnnualCreationBiNat_CAWCD" [@"24:00:00 December 31, Current Year"] - $ "ICS Credits.AnnualDeliveryBiNat_CAWCD" [@"24:00:00 December 31, Current Year"] ) DO
               WITH NUMERIC SysEff_CAWCD = ( $ "ICS Credits.SystemEfficiencyICS_CAWCD" [@"24:00:00 December 31, Previous Year"] + $ "ICS Credits.AnnualCreationSysEff_CAWCD" [@"24:00:00 December 31, Current Year"] - $ "ICS Credits.AnnualDeliverySysEff_CAWCD" [@"24:00:00 December 31, Current Year"] ) DO
                WITH NUMERIC DCP_CAWCD = ( $ "ICS Credits.DCPICS_CAWCD" [@"24:00:00 December 31, Previous Year"] + $ "ICS Credits.AnnualCreationDCP_CAWCD" [@"24:00:00 December 31, Current Year"] - $ "ICS Credits.AnnualDeliveryDCP_CAWCD" [@"24:00:00 December 31, Current Year"] ) DO
                 WITH NUMERIC TotalCAWCD = ECICS_CAWCD + BiNat_CAWCD + SysEff_CAWCD + DCP_CAWCD DO
                  WITH NUMERIC SysEff_AZ = SysEff_CAWCD DO
                   WITH NUMERIC ECICS_AZ = ECICS_CRIT + ECICS_GRIC + ECICS_CAWCD + ECICS_MVIID + ECICS_WM DO
                    WITH NUMERIC BiNat_AZ = BiNat_CAWCD DO
                     WITH NUMERIC DCP_AZ = DCP_CAWCD DO
                      WITH NUMERIC AZBank = ECICS_AZ + BiNat_AZ + DCP_CAWCD DO
                       WITH NUMERIC TotalICS = SysEff_AZ + ECICS_AZ + BiNat_AZ + DCP_AZ DO
                        { AnnualCreationSysEff_AZ , AnnualCreationEC_AZ , AnnualCreationBiNat_AZ , AnnualCreationDCP_AZ , AnnualDeliverySysEff_AZ , AnnualDeliveryEC_AZ , AnnualDeliveryBiNat_AZ , AnnualDeliveryDCP_AZ , ECICS_CRIT , ECICS_GRIC , ECICS_CAWCD , ECICS_MVIID , ECICS_WM , BiNat_CAWCD , SysEff_CAWCD , DCP_CAWCD , TotalCAWCD , SysEff_AZ , ECICS_AZ , BiNat_AZ , DCP_AZ , AZBank , TotalICS }
                       ENDWITH
                      ENDWITH
                     ENDWITH
                    ENDWITH
                   ENDWITH
                  ENDWITH COMMENTED_BY "AZ State Balances <br>"
                 ENDWITH COMMENTED_BY "CAWCD Total  <br>"
                ENDWITH COMMENTED_BY "AZ User DCP ICS Balances <br>"
               ENDWITH COMMENTED_BY "AZ User SysEff Balances <br>"
              ENDWITH COMMENTED_BY "AZ User BiNat Balances  <br>"
             ENDWITH
            ENDWITH
           ENDWITH
          ENDWITH
         ENDWITH COMMENTED_BY "AZ User EC ICS Balances  <br>"
        ENDWITH
       ENDWITH
      ENDWITH
     ENDWITH COMMENTED_BY "Annual Delivery for AZ slots  <br>"
    ENDWITH
   ENDWITH
  ENDWITH
 ENDWITH COMMENTED_BY "Annual Creation for AZ slots <br>";

    END
    UUID "{6a0ec28b-0da8-40af-a372-02cb49f62acb}";;

    FUNCTION       "ICSAccountingForCA" (  )
    RETURN_TYPE    LIST;
    SCALE_UNITS    "";
    DESCRIPTION    "11/28/18, AJP: State of California ICS accounting solved in function. Solved in order of BiNational, EC, SysEff. Solves for CA annual creation/delivery, MWD/IID/CA EOY balances for ICS types where appropriate. IID does not have any SysEffICS as of 11/28/18. Passes list of variables (in order of creation) to set slots in CA ICS rule";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "GCAA, 202006: Added SystemTaxAssesment funtion to replace reference to the scalar slot";
    BEGIN

      WITH NUMERIC CAcreationBinational = $ "ICS Credits.AnnualCreationBiNat_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] + $ "ICS Credits.AnnualCreationBiNat_IID" [@"24:00:00 December Max DayOfMonth, Current Year"] DO
  WITH NUMERIC CAdeliveryBinational = $ "ICS Credits.AnnualDeliveryBiNat_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] + $ "ICS Credits.AnnualDeliveryBiNat_IID" [@"24:00:00 December Max DayOfMonth, Current Year"] DO
   WITH NUMERIC MWDBinationalICS = $ "ICS Credits.BiNationalICS_MWD" [@"24:00:00 December Max DayOfMonth, Previous Year"] + $ "ICS Credits.AnnualCreationBiNat_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] - $ "ICS Credits.AnnualDeliveryBiNat_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] DO
    WITH NUMERIC IIDBinationalICS = $ "ICS Credits.BiNationalICS_IID" [@"24:00:00 December Max DayOfMonth, Previous Year"] + $ "ICS Credits.AnnualCreationBiNat_IID" [@"24:00:00 December Max DayOfMonth, Current Year"] - $ "ICS Credits.AnnualDeliveryBiNat_IID" [@"24:00:00 December Max DayOfMonth, Current Year"] DO
     WITH NUMERIC CABinationalICS = IIDBinationalICS + MWDBinationalICS DO
      WITH NUMERIC IIDcreationEC = IF ( $ "Shortage.Shortage Flag" [@"24:00:00 December Max DayOfMonth, Current Year"] > 0.00000000 )
      THEN
       0.00000000 "acre-ft"
      ELSE
       ( $ "ICS Credits.Parameters" ["IID", "Max Capacity"] - $ "ICS Credits.ExtraordinaryConservationICS_IID" [@"24:00:00 December Max DayOfMonth, Previous Year"] * "EvapTaxAdjustment"(  ) ) / "SystemTaxAdjustment"(  )
      ENDIF DO
       WITH NUMERIC CAcreationEC = $ "ICS Credits.AnnualCreationEC_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] + IIDcreationEC DO
        WITH NUMERIC CAdeliveryEC = $ "ICS Credits.AnnualDeliveryEC_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] + $ "ICS Credits.AnnualDeliveryEC_IID" [@"24:00:00 December Max DayOfMonth, Current Year"] DO
         WITH NUMERIC MWDECICS = "Current Year EC ICS Creation"( $ "ICS Credits.AnnualCreationEC_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"], $ "ICS Credits.AnnualDeliveryEC_MWD" [@"24:00:00 December Max DayOfMonth, Previous Year"], "California" ) + ( $ "ICS Credits.ExtraordinaryConservationICS_MWD" [@"24:00:00 December Max DayOfMonth, Previous Year"] - $ "ICS Credits.AnnualConversionPreviousECtoDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] ) - $ "ICS Credits.AnnualDeliveryEC_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] DO
          WITH NUMERIC IIDECICS = IF ( $ "Shortage.Shortage Flag" [@"24:00:00 December 31, Current Year"] > 0.00000000 )
          THEN
           $ "ICS Credits.ExtraordinaryConservationICS_IID" [@"24:00:00 December Max DayOfMonth, Previous Year"] - $ "ICS Credits.AnnualDeliveryEC_IID" [@"24:00:00 December Max DayOfMonth, Current Year"] + IIDcreationEC * "SystemTaxAdjustment"(  )
          ELSE
           ( $ "ICS Credits.ExtraordinaryConservationICS_IID" [@"24:00:00 December Max DayOfMonth, Previous Year"] - $ "ICS Credits.AnnualDeliveryEC_IID" [@"24:00:00 December Max DayOfMonth, Current Year"] ) * $ "ICS Credits.EvapTaxPercent" [] + IIDcreationEC * "SystemTaxAdjustment"(  )
          ENDIF DO
           WITH NUMERIC CAECICS = MWDECICS + IIDECICS DO
            WITH NUMERIC CAcreationSysEff = $ "ICS Credits.AnnualCreationSysEff_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] DO
             WITH NUMERIC CAdeliverySysEff = $ "ICS Credits.AnnualDeliverySysEff_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] DO
              WITH NUMERIC MWDsysEffICS = $ "ICS Credits.SystemEfficiencyICS_MWD" [@"24:00:00 December Max DayOfMonth, Previous Year"] + $ "ICS Credits.AnnualCreationSysEff_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] - $ "ICS Credits.AnnualDeliverySysEff_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] DO
               WITH NUMERIC CAsysEffICS = MWDsysEffICS DO
                WITH NUMERIC CAcreationDCP = $ "ICS Credits.AnnualCreationDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] DO
                 WITH NUMERIC CAdeliveryDCP = $ "ICS Credits.AnnualDeliveryDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] DO
                  WITH NUMERIC MWDDCPICS = $ "ICS Credits.DCPICS_MWD" [@"24:00:00 December Max DayOfMonth, Previous Year"] + $ "ICS Credits.AnnualCreationDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] + $ "ICS Credits.AnnualDeliveryDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] DO
                   WITH NUMERIC CADCPICS = MWDDCPICS DO
                    WITH NUMERIC IIDICS = IIDECICS + IIDBinationalICS DO
                     WITH NUMERIC MWDICS = MWDECICS + MWDBinationalICS + MWDsysEffICS + MWDDCPICS DO
                      WITH NUMERIC CAICS = MWDICS + IIDICS DO
                       WITH NUMERIC CABank = CADCPICS + CABinationalICS + CAECICS DO
                        { CAcreationBinational , CAdeliveryBinational , MWDBinationalICS , IIDBinationalICS , CABinationalICS , IIDcreationEC , CAcreationEC , CAdeliveryEC , MWDECICS , IIDECICS , CAECICS , CAcreationSysEff , CAdeliverySysEff , MWDsysEffICS , CAsysEffICS , CAcreationDCP , CAdeliveryDCP , MWDDCPICS , CADCPICS , IIDICS , MWDICS , CAICS , CABank }
                       ENDWITH
                      ENDWITH
                     ENDWITH
                    ENDWITH
                   ENDWITH
                  ENDWITH
                 ENDWITH
                ENDWITH
               ENDWITH
              ENDWITH
             ENDWITH
            ENDWITH
           ENDWITH
          ENDWITH
         ENDWITH
        ENDWITH
       ENDWITH
      ENDWITH
     ENDWITH
    ENDWITH
   ENDWITH
  ENDWITH
 ENDWITH;

    END
    UUID "{b55b8886-7701-4521-bb4a-a2c4b53b542a}";;

    FUNCTION       "ICSAccountingForNV" (  )
    RETURN_TYPE    LIST;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      WITH NUMERIC SysEff = $ "ICS Credits.SystemEfficiencyICS_NV" [@"24:00:00 December 31, Previous Year"] + $ "ICS Credits.AnnualCreationSysEff_NV" [@"24:00:00 December 31, Current Year"] - $ "ICS Credits.AnnualDeliverySysEff_NV" [@"24:00:00 December 31, Current Year"] DO
  WITH NUMERIC EC = $ "ICS Credits.ExtraordinaryConservationICS_NV" [@"24:00:00 December 31, Previous Year"] + "Current Year EC ICS Creation"( $ "ICS Credits.AnnualCreationEC_NV" [@"24:00:00 December 31, Current Year"], $ "ICS Credits.AnnualDeliveryEC_NV" [@"24:00:00 December 31, Previous Year"], "Nevada" ) - $ "ICS Credits.AnnualDeliveryEC_NV" [@"24:00:00 December 31, Current Year"] - NaNToZero ( $ "ICS Credits.AnnualConversionECtoDCP_NV" [@"24:00:00 December 31, Current Year"] ) COMMENTED_BY "Don't need to charge system stax because this slot is the sum of the conversion to DCP ICS from <br>previous year and the amount of current year ICS with the system tax already assessed     <br>" DO
   WITH NUMERIC BiNat = $ "ICS Credits.BiNationalICS_NV" [@"24:00:00 December 31, Previous Year"] + $ "ICS Credits.AnnualCreationBiNat_NV" [@"24:00:00 December 31, Current Year"] - $ "ICS Credits.AnnualDeliveryBiNat_NV" [@"24:00:00 December 31, Current Year"] DO
    WITH NUMERIC Imported = $ "ICS Credits.AnnualCreationImp_NV" [@"24:00:00 December 31, Current Year"] * "SystemTaxAdjustment_DCP"(  ) - $ "ICS Credits.AnnualDeliveryImp_NV" [@"24:00:00 December 31, Current Year"] DO
     WITH NUMERIC Tributary = $ "ICS Credits.AnnualCreationTrib_NV" [@"24:00:00 December 31, Current Year"] * "SystemTaxAdjustment_DCP"(  ) - $ "ICS Credits.AnnualDeliveryTrib_NV" [@"24:00:00 December 31, Current Year"] DO
      WITH NUMERIC DCP = $ "ICS Credits.DCPICS_NV" [@"24:00:00 December 31, Previous Year"] + NaNToZero ( $ "ICS Credits.AnnualCreationDCP_NV" [@"24:00:00 December 31, Current Year"] ) - $ "ICS Credits.AnnualDeliveryDCP_NV" [@"24:00:00 December 31, Current Year"] DO
       WITH NUMERIC MeadBank = EC + BiNat + DCP DO
        WITH NUMERIC TotalICS = MeadBank + ( SysEff + Imported + Tributary ) DO
         { SysEff , EC , BiNat , Imported , Tributary , DCP , MeadBank , TotalICS }
        ENDWITH
       ENDWITH
      ENDWITH COMMENTED_BY "DCP ICS Calculation <br>"
     ENDWITH COMMENTED_BY "Tributary ICS Calculation <br>"
    ENDWITH COMMENTED_BY "Imported and Tributary ICS is not carried over from the previous year so the equation format is <br>just: [EOY ICS] =  [ICS created this year] - [ICS delivered this year]<br><br>EOY ICS becomes ECICS the following year.  <br><br><br>Imported ICS Balance Calculation  <br>"
   ENDWITH COMMENTED_BY "BiNational ICS Calculation <br>"
  ENDWITH COMMENTED_BY "EC ICS Calculation <br>"
 ENDWITH COMMENTED_BY "Basic equation format is: [EOY ICS] = [ICS Balance last year] + [ICS created this year] - [ICS <br>delivered this year]<br><br>System Efficiency Balance Calculation   <br>";

    END
    UUID "{897fb0fd-65cc-4702-b6e8-00faf85d4c80}";;

    FUNCTION       "ICSDeliveryReduction" ( NUMERIC AnnualDelivery, STRING State, STRING Volume, NUMERIC ECtoDCP )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      IF ( $ "Mead.Pool Elevation" [@"24:00:00 December Max DayOfMonth, Previous Year"] < $ "DCP.IGMinTakeElevation" [] AND $ "Mead.Pool Elevation" [@"24:00:00 December Max DayOfMonth, Previous Year"] >= $ "DCP.ReducedTakeElevation" [] )
 THEN
  "Min"( AnnualDelivery, $ "ICS Credits.Parameters" [State, Volume] )
 ELSE
  AnnualDelivery
 ENDIF
 ELSEIF_COND ( $ "Mead.Pool Elevation" [@"24:00:00 December Max DayOfMonth, Previous Year"] < $ "DCP.ReducedTakeElevation" [] AND $ "Mead.Pool Elevation" [@"24:00:00 December Max DayOfMonth, Previous Year"] >= $ "DCP.MinTakeElevation" [] )
 ELSEIF_CLAUSE ( "Min"( AnnualDelivery, $ "ICS Credits.Parameters" [State, Volume] - ECtoDCP ) )
 END_ELSEIF
 ELSEIF_COND ( $ "Mead.Pool Elevation" [@"24:00:00 December Max DayOfMonth, Previous Year"] < $ "DCP.MinTakeElevation" [] )
 ELSEIF_CLAUSE ( 0.00000000 "acre-ft" )
 END_ELSEIF COMMENTED_BY "Section IV.D.1-3 of the LB OPs section of the DCP limits the amount of ICS that can be delivered <br>to each state based on meads elevation and the max annual delivery allowed for each state.<br>";

    END
    UUID "{589e7e1c-7420-4c95-9024-f9f4beb365f0}";;

    FUNCTION       "TaxedECICS" ( NUMERIC annualCreation, NUMERIC previousDelivery )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      "Max"( annualCreation - previousDelivery, 0.00000000 "acre-feet" ) COMMENTED_BY "Per Section IV.A.3, Replenishment Incentive, there shall be no assement made upon the creation <br>of ECICS to the extent of the volume of EC ICS delivered to the same contractor in the preceding <br>year<br><br>AP 7/11/19  <br>";

    END
    UUID "{1b782620-2703-46a7-a4d1-bd9c9238fe34}";;

    FUNCTION       "NonTaxedECICS" ( NUMERIC annualCreation, NUMERIC previousDelivery )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      "Min"( annualCreation, previousDelivery ) COMMENTED_BY "Per Section IV.A.3, Replenishment Incentive, there shall be no assement made upon the creation <br>of ECICS to the extent of the volume of EC ICS delivered to the same contractor in the preceding <br>year<br><br>AP 7/11/19  <br>";

    END
    UUID "{83776b12-ea5e-4593-adb4-b2f7d0869ae8}";;

    FUNCTION       "Current Year EC ICS Creation" ( NUMERIC AnnualCreation, NUMERIC PreviousDelivery, STRING State )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      ( "TaxedECICS"( AnnualCreation, PreviousDelivery ) * "SystemTaxAdjustment_DCP"(  ) + "NonTaxedECICS"( AnnualCreation, PreviousDelivery ) ) + IF ( State == "Nevada" )
 THEN
  $ "ICS Credits.ImportedICS_NV" [@"24:00:00 December 31, Previous Year"] + $ "ICS Credits.TributaryICS_NV" [@"24:00:00 December 31, Previous Year"]
 ELSE
  0.00000000 "acre-ft"
 ENDIF;

    END
    UUID "{0b7e80c3-0ae5-486c-8af3-236c5d3cfea5}";;

    FUNCTION       "CAWCD Requested ICS" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      $ "ICS Credits.AnnualICSDelivery_CAWCD" [@"24:00:00 December 31, Current Year"] + "CAWCD Mitigation Water"(  ) + "CAWCD DCP ICS Delivery"(  );

    END
    UUID "{de7d7ce8-9583-4a40-afd6-85b0f077ce78}";;

    FUNCTION       "CAWCD Mitigation Water" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      IF ( $ "Shortage.Shortage Flag" [@"24:00:00 December 31, Current Year"] <= 2.00000000 AND $ "Shortage.Shortage Flag" [@"24:00:00 December 31, Current Year"] >= 1.00000000 )
 THEN
  $ "ICS Credits.CAWCD Mitigation Water" []
 ELSE
  0.00000000 "acre-ft"
 ENDIF;

    END
    UUID "{73598724-5573-4d96-910e-3831c753c487}";;

    FUNCTION       "CAWCD DCP ICS Delivery" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      IF ( $ "Mead.Pool Elevation" [@"24:00:00 December Max DayOfMonth, Previous Year"] >= $ "DCP.RecoveryElevation" [] )
 THEN
  $ "ICS Credits.DCPICS_AZ" [@"24:00:00 December Max DayOfMonth, Previous Year"]
 ELSE
  0.00000000 "acre-ft"
 ENDIF;

    END
    UUID "{9228e7f6-4eb4-4722-a7ef-84c71ff1ce4d}";;

    FUNCTION       "CAWCD Available Canal Space" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      $ "AnnualWaterUse.CAPCanal_AnnualCapacity" [] - "Annual Volume"( $ "CAPDiversion.Total Diversion Requested" );

    END
    UUID "{0e2c6341-90ee-40fd-9927-97ff1ccd0933}";;

    FUNCTION       "SystemTaxAdjustment_DCP" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "GCAA, 202006: Added function to integrated ruleset to solve for the DCP System Tax Percent, consistent with MTOM";
    BEGIN

      1.00000000 - $ "ICS Credits.SystemTaxPercent_DCP" [];

    END
    UUID "{d386400c-af9d-4a82-8024-c50b94006a71}";;

    FUNCTION       "SystemTaxAdjustment" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "GCAA, 202006: Added function to integrated ruleset to solve for the System Tax Percent, consistent with MTOM";
    BEGIN

      1.00000000 - $ "ICS Credits.SystemTaxPercent" [];

    END
    UUID "{bec76b8a-05ca-4695-983b-a258f36d257c}";;

    FUNCTION       "EvapTaxAdjustment" (  )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "GCAA, 202006: Added function to integrated ruleset to work in the integrated 24MS/MTOM model";
    BEGIN

      1.00000000 - $ "ICS Credits.EvapTaxPercent" [];

    END
    UUID "{e3cdd810-e513-4078-b492-a1e131d1ad44}";;

  END
  UUID "{3405dd9c-7650-4894-9994-d0c85068fa64}";;

END
UUID "{e5e3b076-9753-48d7-8812-6febda2ce587}";
