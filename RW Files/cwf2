# RiverWare_Ruleset 8.0.2
# Created 08:30 April 2, 2020
# 
RULESET
NAME "MTOM_Rules";
AGENDA_ORDER ASCENDING;
DESCRIPTION "";
PRECISION   8;
VIEW_DOC_INFO
  DOC_INFO_LOC_PART2 "MTOM_Rules_2013-DocTemplate.html";
  DOC_INFO_FORMAT "Auto";
NOTES "";
BEGIN

  POLICY_GROUP   "Calculate Final State Use and Overruns";
  DESCRIPTION    "This policy group contains rules that compute the projected annual water use for the Lower Division States and large junior priority users in each state (i.e. MWD, CAP, and SNWA). It also computes any projected over- or under-runs after all water schedule adjustments have been made. <br><br>The slots containing the state adjusted apportionments do not get changed when shortage or surplus is declared. They also do not get changed for Lower Basin demand variability. So, the difference in the schedules will appear as an overrun or underrun.";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Final SNWP Diversion";
    DESCRIPTION          "DESCRIPTION: Calculates projected annual water use for SNWA after all schedule adjustments. Adjustments may be made to get Nevada to their projected annual apportionment, lower basin demand variability, shortage, or surplus.<br><br>SLOTS SET: ForecastUse.SNWPAnnualFC";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) >= 3.00000000;
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown";
    BEGIN

      $ "ForecastUse.SNWPAnnualFC" [@"24:00:00 December Max DayOfMonth, Current Year"] := "Annual Volume"( $ "PumpingFromLakeMead:SNWP.Diversion Requested" );

    END
    UUID "{0bfe40d2-1379-42c8-a6d3-db88d4d2719e}";;

    RULE                 "Final CAP Diversion";
    DESCRIPTION          "DESCRIPTION: Calculates projected annual water use for CAP after all schedule adjustments. Adjustments may be made to get Arizona to their projected annual apportionment, lower basin demand variability, shortage, or surplus.<br><br>SLOTS SET: Forecast.CAPAnnualFC<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) >= 3.00000000;
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown";
    BEGIN

      $ "ForecastUse.CAPAnnualFC" [@"24:00:00 December Max DayOfMonth, Current Year"] := "Annual Volume"( $ "CAPDiversion.Total Diversion Requested" );

    END
    UUID "{260969b9-b5a6-4017-8c83-cf6454da6fbe}";;

    RULE                 "Final MWD Diversion";
    DESCRIPTION          "DESCRIPTION: Calculates projected annual water use for MWD after all schedule adjustments. Adjustments may be made to get California to their projected annual apportionment, lower basin demand variability, shortage, or surplus.<br><br>SLOTS SET: ForecastUse.MWDDiversionAnnualFC; ForecastUse.MWDAnnualFC";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) >= 3.00000000;
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown";
    BEGIN

      $ "ForecastUse.MWDDiversionAnnualFC" [@"24:00:00 December Max DayOfMonth, Current Year"] := "Annual Volume"( $ "MWDDiversion:MWD.Diversion Requested" );

      $ "ForecastUse.MWDAnnualFC" [@"24:00:00 December Max DayOfMonth, Current Year"] := IF ( "GetYear"( @"t" ) == "GetYear"( @"Start Timestep" ) AND "GetMonth"( @"Start Timestep" ) > 1.00000000 )
 THEN
  "SumSlot"( $ "California_CU_Actual.MWD", @"24:00:00 January Max DayOfMonth, Current Year", @"Start Timestep - 1" ) + "SumFlowsToVolume"( $ "MWDDiversion:MWD.Depletion Requested", @"Start Timestep", @"24:00:00 December Max DayOfMonth, Current Year" )
 ELSE
  FOR ( DATETIME date IN @"24:00:00 January Max DayOfMonth, Current Year" TO @"24:00:00 December Max DayOfMonth, Current Year" ) STAT_SUM
   "FlowToVolume"( $ "MWDDiversion:MWD.Depletion Requested" [date], date )
  ENDFOR
 ENDIF;

    END
    UUID "{0feb2abf-ab3a-4ef2-9441-a6c6975c1a78}";;

    RULE                 "Final CA Overrun - Div Req";
    DESCRIPTION          "DESCRIPTION: Calculates projected overrun or underrun for California after all schedule adjustments by calculating the difference between the total annual diversion request and the annual apportionment for the current calendar year.<br><br>SLOTS SET: AnnualWaterUse.CaOverrun";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) >= 3.00000000;
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown";
    BEGIN

      $ "AnnualWaterUse.CaOverrun" [@"24:00:00 December 31, Current Year"] := $ "AnnualWaterUse.CaTotalAnnual" [@"24:00:00 December 31, Current Year"] - IF ( "IsMRM"(  ) )
 THEN
  $ "AnnualWaterUse.California_FinalAdjustedApportionment" [@"24:00:00 December 31, Current Year"]
 ELSE
  $ "AnnualWaterUse.California_Apportionment" [@"24:00:00 December 31, Current Year"]
 ENDIF;

    END
    UUID "{59a6b371-5c3d-4bda-a304-c88c26e0273c}";;

    RULE                 "Final CA Annual Use - Div Req";
    DESCRIPTION          "DESCRIPTION: Calculates projected annual water use for California after all schedule adjustments by summing the non-MWD diversion requests and the MWD depletion request for the current calendar year.  This rule also calculates the value of the California Final Adjusted Apportionment.<br><br>SLOTS SET: AnnualWaterUse.CaTotalAnnual; AnnualWaterUse.California_FinalAdjustedApportionment";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) >= 3.00000000 AND ( @"t" == @"24:00:00 December 31, Current Year" OR @"t" == @"Finish Timestep" );
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown";
    BEGIN

      $ "AnnualWaterUse.CaTotalAnnual" [@"24:00:00 December 31, Current Year"] := FOR ( DATETIME date IN @"24:00:00 January Max DayOfMonth, Current Year" TO @"24:00:00 December Max DayOfMonth, Current Year" ) STAT_SUM
  FOR ( OBJECT diversionSite IN "ListSubbasin"( "California nonMWD WaterUsers" ) ) STAT_SUM
   IF ( diversionSite == % "PaloVerde" )
   THEN
    "FlowToVolume"( diversionSite & "Total Diversion Requested" [date], date )
   ELSE
    "FlowToVolume"( diversionSite & "Diversion Requested" [date], date )
   ENDIF
  ENDFOR + "FlowToVolume"( $ "MWDDiversion:MWD.Depletion Requested" [date], date )
 ENDFOR COMMENTED_BY "This assignment now calculates the Total Diversion by California by Adding all non MWD <br>user Diversion requests to the MWD diversion request less the return flow from MWD. <br>TP 7/13/2015";

      $ "AnnualWaterUse.California_FinalAdjustedApportionment" [@"24:00:00 December 31, Current Year"] := IF ( "IsMRM"(  ) )
 THEN
  IF ( @"t" >= @"24:00:00 April 30, Start Year" AND @"t" <= @"24:00:00 December 31, Start Year" AND "GetMonth"( @"Start Timestep" ) >= 4.00000000 )
  THEN
   $ "AnnualWaterUse.California_Apportionment" [@"24:00:00 December 31, Current Year"]
  ELSE
   ( $ "AnnualWaterUse.California_PreliminaryAdjustedApportionment" [@"24:00:00 December 31, Current Year"] - ( NaNToZero ( $ "ICS Credits.AnnualCreationEC_MWD" ["Dec31ofYear"( @"t" )] ) + NaNToZero ( ( $ "ICS Credits.AnnualSimultaneousCreationDCPICS_MWD" ["Dec31ofYear"( @"t" )] ) / "SystemTaxAdjustment_DCP"(  ) ) ) + ( ( NaNToZero ( $ "ICS Credits.AnnualDeliveryBiNat_CA" ["Dec31ofYear"( @"t" )] ) + NaNToZero ( $ "ICS Credits.AnnualDeliveryEC_MWD" ["Dec31ofYear"( @"t" )] ) + NaNToZero ( $ "ICS Credits.AnnualDeliverySysEff_CA" ["Dec31ofYear"( @"t" )] ) ) + NaNToZero ( $ "ICS Credits.AnnualDeliveryDCP_CA" ["Dec31ofYear"( @"t" )] ) ) ) COMMENTED_BY "removed Tijuana and MWD returns because they are now accounted for in the ICS accounting <br>and Releases Policy group<br>"
  ENDIF
 ELSE
  $ "AnnualWaterUse.California_Apportionment" [@"24:00:00 December 31, Current Year"]
 ENDIF;

    END
    UUID "{cb5bece1-347d-415f-b3ce-25fedd882e47}";;

    RULE                 "Final AZ Overrun - Div Req";
    DESCRIPTION          "DESCRIPTION: Calculates projected overrun or underrun for Arizona after all schedule adjustments by calculating the difference between the total diversion request and the annual apportionment for the current calendar year. <br><br>SLOTS SET: AnnualWaterUse.AzOverrun<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) >= 3.00000000;
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown";
    BEGIN

      $ "AnnualWaterUse.AzOverrun" [@"24:00:00 December 31, Current Year"] := $ "AnnualWaterUse.AzTotalAnnual" [@"24:00:00 December 31, Current Year"] - $ "AnnualWaterUse.Arizona_Apportionment" [@"24:00:00 December 31, Current Year"];

    END
    UUID "{51c1f814-afca-4ce1-ae9a-42e6c1a8a216}";;

    RULE                 "Final AZ Annual Use - Div Req";
    DESCRIPTION          "DESCRIPTION: Calculates projected annual water use for Arizona after all schedule adjustments by summing the CAP and non-CAP annual diversion requests for the current calendar year. <br><br>SLOTS SET: AnnualWaterUse.AzTotalAnnual<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) >= 3.00000000;
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown";
    BEGIN

      $ "AnnualWaterUse.AzTotalAnnual" [@"24:00:00 December 31, Current Year"] := "SumAnnualCAPDivRequest"(  ) + $ "AnnualWaterUse.AzNoCAPTotalAnnual" [@"24:00:00 December 31, Current Year"];

    END
    UUID "{3181491d-33cb-496a-8c83-de6f7c0e3c69}";;

    RULE                 "Final NV Overrun - Div Req";
    DESCRIPTION          "DESCRIPTION: Calculates projected overrun or underrun for Nevada after all schedule adjustments by calculating the difference between the total diversion requests and the annual apportionment for the current calendar year. <br><br>SLOTS SET: AnnualWaterUse.NVOverrun<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) >= 3.00000000;
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown";
    BEGIN

      $ "AnnualWaterUse.NVOverrun" [@"24:00:00 December 31, Current Year"] := $ "AnnualWaterUse.NvTotalAnnual" [@"24:00:00 December 31, Current Year"] - $ "AnnualWaterUse.Nevada_Apportionment" [@"24:00:00 December 31, Current Year"];

    END
    UUID "{572e18ce-04c0-4998-86a9-dc6292768c02}";;

    RULE                 "Final NV Annual Use - Div Req";
    DESCRIPTION          "DESCRIPTION: Calculates projected annual water use for Nevada after all schedule adjustments by summing the diversion requests of Nevada water users for the current calendar year. <br><br>SLOTS SET: AnnualWaterUse.NvTotalAnnual<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) >= 3.00000000;
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown";
    BEGIN

      $ "AnnualWaterUse.NvTotalAnnual" [@"24:00:00 December 31, Current Year"] := FOR ( DATETIME date IN @"24:00:00 January Max DayOfMonth, Current Year" TO @"24:00:00 December Max DayOfMonth, Current Year" ) STAT_SUM
  FOR ( OBJECT diversionSite IN "ListSubbasin"( "NevadaWaterUsers" ) ) STAT_SUM
   IF ( diversionSite == % "NvDvsToPkr" )
   THEN
    "FlowToVolume"( diversionSite & "Total Diversion Requested" [date], date )
   ELSE
    "FlowToVolume"( diversionSite & "Diversion Requested" [date], date )
   ENDIF
  ENDFOR
 ENDFOR;

    END
    UUID "{3ce4aca2-e79b-4b7a-b7e7-7d0031d658f2}";;

    RULE                 "Compute Lower Basin Energy";
    DESCRIPTION          "DESCRIPTION: This rule must fire after all schedule adjustments have been made, which is why it is in the highest priority polict group.<br><br>SLOTS SET: Lower Basin Energy.Computed Davis Energy Using Input Eff; Lower Basin Energy.Computed Davis Head using Turbine Release; Lower Basin Energy.Davis KWH per AF; Lower Basin Energy.Computed Parker Energy Using Input Eff; Lower Basin Energy.Computed PD Project Energy Using Peak Base Power Calc; Lower Basin Energy.Computed PD Project Energy Using Input Eff<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) >= 3.00000000;
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown";
    BEGIN

      $ "Lower Basin Energy.Computed Davis Energy Using Input Eff" [] := $ "Lower Basin Energy.Input Davis Efficiency" [] * "FlowToVolume"( $ "Mohave.Turbine Release" [], @"t" ) * "Compute Head as a Function of Turbine Release"( $ "Mohave.Turbine Release" [] ) * 9789.00000000 "newton" / ( ( 1.00000000 "m" * 1.00000000 "m" ) * 1.00000000 "m" );

      $ "Lower Basin Energy.Computed Davis Head using Turbine Release" [] := "Compute Head as a Function of Turbine Release"( $ "Mohave.Turbine Release" [] );

      $ "Lower Basin Energy.Davis KWH per AF" [] := $ "Lower Basin Energy.Input Davis Efficiency" [] * "FlowToVolume"( $ "Mohave.Turbine Release" [], @"t" ) * "Compute Head as a Function of Turbine Release"( $ "Mohave.Turbine Release" [] ) * 9789.00000000 "newton" / ( ( 1.00000000 "m" * 1.00000000 "m" ) * 1.00000000 "m" ) / "FlowToVolume"( $ "Mohave.Turbine Release" [], @"t" ) * 1.00000000 "ft" * 1.00000000 "ft";

      $ "Lower Basin Energy.Computed Parker Energy Using Input Eff" [] := $ "Lower Basin Energy.Input Parker Efficiency" [] * "FlowToVolume"( $ "Havasu.Turbine Release" [], @"t" ) * $ "Havasu.Operating Head" [] * 9789.00000000 "newton" / ( ( 1.00000000 "m" * 1.00000000 "m" ) * 1.00000000 "m" );

      $ "Lower Basin Energy.Computed PD Project Energy Using Peak Base Power Calc" [] := $ "Mohave.Energy" [] + $ "Havasu.Energy" [] / 2.00000000;

      $ "Lower Basin Energy.Computed PD Project Energy Using Input Eff" [] := $ "Lower Basin Energy.Input Davis Efficiency" [] * "FlowToVolume"( $ "Mohave.Turbine Release" [], @"t" ) * $ "Mohave.Operating Head" [] * 9789.00000000 "newton" / ( ( 1.00000000 "m" * 1.00000000 "m" ) * 1.00000000 "m" ) + $ "Lower Basin Energy.Input Parker Efficiency" [] * "FlowToVolume"( $ "Havasu.Turbine Release" [], @"t" ) * $ "Havasu.Operating Head" [] * 9789.00000000 "newton" / ( ( 1.00000000 "m" * 1.00000000 "m" ) * 1.00000000 "m" ) / 2.00000000;

    END
    UUID "{075cf9e5-f328-413c-96b9-81a8d5ddb9d8}";;

  END
  UUID "{0e00c279-f30a-4ce4-8855-d1bab141d5de}";;

  POLICY_GROUP   "FloodControl";
  DESCRIPTION    "This policy group contains all the rules required to simulate Lake Mead/Hoover Dam flood control operations. Flood control operations are based on the USACE Water Control Manual for Flood Control: Hoover Dam and Lake Mead Colorado River, December 1982 (Flood Control Manual)";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Compute LC Dam Capacity";
    DESCRIPTION          "DESCRIPTION: This rule sets the power slots for the LC dams based on their power capacity values and power plant capacity fractions<br><br>SLOTS SET: Mead.Power; Mohave.Power; Havasu.Power<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) >= 4.00000000;
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown";
    BEGIN

      $ "Mead.Power" [] := $ "EnergyInfo.EffectiveHooverCapacity" [] * $ "Mead.Power Plant Cap Fraction" [];

      $ "Mohave.Power" [] := $ "Lower Basin Energy.Davis_Power_Capacity" [] * $ "Mohave.Power Plant Cap Fraction" [];

      $ "Havasu.Power" [] := $ "Lower Basin Energy.Parker_Power_Capacity" [] * $ "Havasu.Power Plant Cap Fraction" [];

    END
    UUID "{80739e6a-3af3-40a2-ba58-cd1b99e9d8d0}";;

    RULE                 "FC Surplus Schedules Data Volume to Simulation Flow";
    DESCRIPTION          "DESCRIPTION: In the event of Flood Control the Diversion Schedules are set to the Monthly Surplus Schedules for Flood Control. TP 7/28/2015<br><br>SLOTS SET: Surplus.Surplus Flag; Surplus.Flood Control Surplus Flag; LowerBasinDemandVariability.AbvHooverTriggerSet; OthersBlwImp.AzPumpersBlwImp.Diversion Requested; AzPkrToImp:CibolaValleyIID.Diversion Requested; AzPkrToImp:Parker.Diversion Requested; GilaAndYumaUsers:GilaMonsterFarms.Diversion Requested; CAPDiversion.Total Diversion Requested; MWDDiversion:MWD.Diversion Requested; MWDDiversion:MWD.Depletion Requested; AAC:Coachella.Diversion Requested; AAC:IID.Diversion Requested; CaPkrToImp:CaPumpersAbvImp.Diversion Requested; CaDvsToPkr:Needles.Diversion Requested; MexicanTreatyDelivery:MexicoSched.Diversion Requested; PumpingFromLakeMead:SNWP.Diversion Requested; PumpingFromLakeMead:SNWP.Depletion Requested<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( $ "FloodControlOutput.Flood Control Flag" [] > 0.00000000 OR $ "FloodControlOutput.Exclusive Space Flag" [] > 0.00000000 ) AND IsNaN $ "Surplus.Flood Control Surplus Flag" [] AND "GetRunCycleIndex"(  ) >= 3.00000000;
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: TP, 7/28/2015<br>MC, 20170920: Changed beginning datetime in FOR loop from @&quot;24:00:00 January 31, Current Year&quot; to @&quot;t&quot; per Sep 19 email from Shana T. and Corinne H.<br>A.Pivarnik, 20180921: Disabled statement setting LowerBasinDemandVariability.AbvHooverTriggerSet. Was causing MTOM to fail in August run when trying to set Mead operations. ";
    BEGIN

      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            BREAKPOINT BEFORE_EXEC TRUE;
      $ "Surplus.Surplus Flag" [date] := 3.00000000;

            $ "Surplus.Flood Control Surplus Flag" [date] := 1.00000000;

          INACTIVE      $ "LowerBasinDemandVariability.AbvHooverTriggerSet" ["Dec31ofYear"( date )] := 2.00000000;

          INACTIVE      $ "LowerBasinDemandVariability.BlwParkerTriggerSet" ["Dec31ofYear"( date )] := 2.00000000;

            $ "OthersBlwImp:AzPumpersBlwImp.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule- FC"( date, "AzPumpersBlwImp" ), date );

            $ "AzPkrToImp:CibolaValleyIID.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule- FC"( date, "CibolaValleyIID" ), date );

            $ "AzPkrToImp:Parker.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule- FC"( date, "City of Parker" ), date );

            $ "GilaAndYumaUsers:GilaMonsterFarms.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule- FC"( date, "Gila Monster Farms" ), date );

            $ "CAPDiversion.Total Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule- FC"( date, "CAP" ), date );

            $ "MWDDiversion:MWD.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule- FC"( date, "MWD" ), date );

            $ "MWDDiversion:MWD.Depletion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule- FC"( date, "MWD" ), date ) - "VolumeToFlow"( $ "California_CU_Schedules.MWDReturns" [date], date );

            $ "AAC:Coachella.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule- FC"( date, "Coachella" ), date );

            $ "AAC:IID.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule- FC"( date, "IID" ), date );

            $ "CaPkrToImp:CaPumpersAbvImp.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule- FC"( date, "CaPumpersAbvImp" ), date );

            $ "CaDvsToPkr:Needles.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule- FC"( date, "Needles" ), date );

            $ "MexicanTreatyDelivery:MexicoSched.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule- FC"( date, "Mexico" ), date );

            $ "PumpingFromLakeMead:SNWP.Diversion Requested" [date] := IF ( $ "Surplus Total Annual Schedules.SNWA" [@"24:00:00 December 31, Current Year"] > "SumAnnualSNWADivRequest"(  ) )
 THEN
  "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "SNWA" ), date )
 ENDIF;

            $ "PumpingFromLakeMead:SNWP.Depletion Requested" [date] := IF ( $ "Surplus Total Annual Schedules.SNWA" [@"24:00:00 December 31, Current Year"] > "SumAnnualSNWADivRequest"(  ) )
 THEN
  "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "SNWA" ), date )
 ENDIF;

      ENDFOREACH;

    END
    UUID "{41783893-2316-4c95-a94e-326bbc88b50f}";;

    RULE                 "Compute Effective Hoover Capacity Regression";
    DESCRIPTION          "DESCRIPTION: This Rule is used to set the EnergyInfo.EffectiveHooverCapacity so that it can go out to 60 weeks.  The regression equation provided is from the LC BoR office and can be adjusted using this rule. <br><br>SLOTS SET: EnergyInfo.EffectiveHooverCapacity; Mead.Power Plant Cap Fraction<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) >= 3.00000000;
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown";
    BEGIN

      IF_STATEMENT (( NOT "IsMRM"(  ) ) COMMENTED_BY "This check determines if a run is a deterministic run or an MRM run and the data comes<br>out of the Ensemble Forecast Sheet. TP 3/28/2013") THEN
            IF_STATEMENT ("IsInput"( $ "EnergyInfo.EffectiveHooverCapacityInput", @"t" )) THEN
          DESCRIPTION          "Use input value";
      $ "EnergyInfo.EffectiveHooverCapacity" [@"t"] := $ "EnergyInfo.EffectiveHooverCapacityInput" [@"t"];

      ELSE
          DESCRIPTION          "Calculate based on Mead pool elevation";
      WITH_STATEMENT (NUMERIC elevMead = $ "Mead.Pool Elevation" [@"t"]) DO
            $ "EnergyInfo.EffectiveHooverCapacity" [@"t"] := IF ( elevMead >= 1170.00000000 "feet" )
 THEN
  2074.00000000 "MW"
 ELSE
  ( elevMead * ( 5.64540000 "MW" / 1.00000000 "foot" ) - 4530.50000000 "MW" )
 ENDIF;

      END_WITH_STATEMENT;

      END_IF_STATEMENT;

      ELSE
            WITH_STATEMENT (NUMERIC elevMead = $ "Mead.Pool Elevation" [@"t"]) DO
            $ "EnergyInfo.EffectiveHooverCapacity" [@"t"] := IF ( elevMead >= 1170.00000000 "feet" )
 THEN
  2074.00000000 "MW"
 ELSE
  ( elevMead * ( 5.64540000 "MW" / 1.00000000 "foot" ) - 4530.50000000 "MW" )
 ENDIF;

      END_WITH_STATEMENT;

      END_IF_STATEMENT;

    DESCRIPTION          "Set Mead power plant capacity fraction if necessary";
      IF_STATEMENT (NOT "IsInput"( $ "Mead.Power Plant Cap Fraction", @"t" )) THEN
            $ "Mead.Power Plant Cap Fraction" [@"t"] := $ "Mead.Power Plant Cap Fraction" [@"t - 12"];

      END_IF_STATEMENT;

    END
    UUID "{cf065236-de42-46bf-938f-26b4734bd23e}";;

    RULE                 "Mead Space Building";
    DESCRIPTION          "DESCRIPTION: If the storage in Mead is greater than the target storage (based on the minimum system space that must be available), this rule resets the outflow to achieve the target storage during space building months (August 1 - December 31); if the Flood Control Flag is not already set, this rule also sets it based on whether the outflow was reset by the rule<br><br>SLOTS SET: Mead.Outflow; FloodControlOutput.Flood Control Flag<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) >= 3.00000000 AND NOT IsNaN $ "Mead.Storage" [] AND @"t" > @"24:00:00 July Max DayOfMonth, Current Year" AND IsNaN $ "FloodControlOutput.Flood Control Flag" [];
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>CH, 4/18/18: Added execution constraint: AND IsNaN FloodControlOutput.Flood Control Flag to so that in the case the Flood Control Flag is set in run cycle 3, it is not reset in run cycle 4. Once a flood control flag is set, it should not be reset (even in run cycle 4).";
    BEGIN

      IF_STATEMENT ($ "Mead.Storage" [] > "ComputeTargetStorage"(  )) THEN
            $ "Mead.Outflow" [] := "Max"( "ComputeOutflowAtGivenStorage"( % "Mead", "ComputeTargetStorage"(  ) ), $ "Mead.Outflow" [] );

      END_IF_STATEMENT;

      $ "FloodControlOutput.Flood Control Flag" [] := IF ( IsNaN $ "FloodControlOutput.Flood Control Flag" [] )
 THEN
  IF ( $ "Mead.Storage" [] > "ComputeTargetStorage"(  ) )
  THEN
   1.00000000
  ELSE
   0.00000000
  ENDIF
 ENDIF;

    END
    UUID "{845d936f-f1ea-45e0-a351-84b1ad57cd3f}";;

    RULE                 "Mead Flood Control Release";
    DESCRIPTION          "DESCRIPTION: This rule checks that the release from Mead computed for downstream demands is large enough to satisfy flood control during the runoff season. If not, Mead Outflow is reset to the required flood control release which was previously calculated in the <Set Flood Control Release> rule and stored as FloodControlOutput.FCrelease. The flood control flag is also set to 1, which will cause the system to solve downstream and eventually force more water out of Havasu and Mohave.<br><br>SLOTS SET: Mead.Outflow; FloodControlOutput.Flood Control Flag<br><br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" <= @"24:00:00 July Max DayOfMonth, Current Year" AND NOT IsNaN $ "Mead.Outflow" [] AND "GetRunCycleIndex"(  ) >= 3.00000000 AND IsNaN $ "FloodControlOutput.Flood Control Flag" [];
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>MC, 20170518: Rule modified to only use 1 IF statement <br>CH, 4/18/18: Added execution constraint: AND IsNaN FloodControlOutput.Flood Control Flag to so that in the case the Flood Control Flag is set in run cycle 3, it is not reset in run cycle 4. Once a flood control flag is set, it should not be reset (even in run cycle 4).";
    BEGIN

      IF_STATEMENT ($ "Mead.Outflow" [] < $ "FloodControlOutput.FCrelease" []) THEN
            $ "Mead.Outflow" [] := $ "FloodControlOutput.FCrelease" [];

            $ "FloodControlOutput.Flood Control Flag" [] := 1.00000000;

      ELSE
            $ "FloodControlOutput.Flood Control Flag" [] := 0.00000000;

      END_IF_STATEMENT;

    END
    UUID "{04734c58-ee44-4bdb-b2a8-bb807c84a081}";;

    RULE                 "Mead Exclusive Flood Control Space";
    DESCRIPTION          "DESCRIPTION: This rule ensures that Mead does not violate the 1.5 maf space requirement (on MeadFloodControlData.MinSpace slot) at any time of the year. Although this is the highest priority rule, we don't want it to fire until the other flood control procedures have potentially executed. The rule checks the storage in Mead, and if it does not provide the minimum space, the outflow is recalculated so that the minimum space is achieved. If the outflow is recalculated, the FloodControlOutput.Exclusive Space Flag is set to 1; otherwise it is set to 0.<br><br>SLOTS SET: Mead.Outflow; FloodControlOutput.Exclusive Space Flag<br><br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT IsNaN $ "FloodControlOutput.Flood Control Flag" [] AND NOT IsNaN $ "Mead.Storage" [];
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>SB, 201907011: Edited execution constraint to check if FC slot was greater than 0 (not just Not NaN). This rule was setting Mead outflow during very low scenarios in which flood control rules should not be executing.<br>MC, 20170518: Modified rule to use only 1 IF statement instead of 2, and only print statement in the case the IF statement is TRUE<br>MC, 20170920: Modified calculation of Mead.Outflow to take the larger of outflow to reach min space requirement or outflow to meet downstream requirement per Sep 19 email from Shana T. and Corinne H. (previously did not consider downstream requirement)";
    BEGIN

    DESCRIPTION          "If Mead storage exceeds what provides the minimum space requirement, <br>recalculate outflow so the storage provides the minimum space.";
      IF_STATEMENT ($ "Mead.Storage" [] >= "ComputeMinimumSpace"( % "Mead" ) COMMENTED_BY "Storage with min space requirement" OR $ "Mead.Outflow" [] < "VolumeToFlow"( $ "Lower Basin Output.DownstreamReq" [], @"t" ) COMMENTED_BY "Storage with min space requirement") THEN
            $ "Mead.Outflow" [] := "Max"( "ComputeOutflowAtGivenStorage"( % "Mead", "ComputeMinimumSpace"( % "Mead" ) ), "VolumeToFlow"( $ "Lower Basin Output.DownstreamReq" [], @"t" ) ) COMMENTED_BY "Calculate outflow to reach storage with min space requirement or meet <br>downstream requirement, whichever volume is larger<br>(This will be constrained to MaxSpaceBuildingRelease outflow) <br>";

      END_IF_STATEMENT;

      IF_STATEMENT (IsNaN $ "FloodControlOutput.Exclusive Space Flag" []) THEN
            $ "FloodControlOutput.Exclusive Space Flag" [] := IF ( $ "Mead.Storage" [] >= "ComputeMinimumSpace"( % "Mead" ) )
 THEN
  1.00000000
 ELSE
  0.00000000
 ENDIF;

      END_IF_STATEMENT;

      PRINT "Flood Control due to violating Exclusive Flood Control Space: Mead Storage reset";

    END
    UUID "{b584d84f-954a-4de0-a90e-9ff926312f05}";;

    RULE                 "Set Flood Control Release";
    DESCRIPTION          "DESCRIPTION: This rule sets the Mead flood control release according to Table 1 in Exhibit A of the Flood Control Manual, which dictates release steps given inflow and available storage, during flood control months (January 1 - July 31) or as the minimum of either releases needed to achieve target storage or the maximum space building release (28,000 cfs) during space building months (August 1 - December 31).<br><br>SLOTS SET: FloodControlOutput.FCrelease<br><br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT IsNaN $ "FloodControlOutput.FCrelease" [] AND "GetRunCycleIndex"(  ) >= 3.00000000;
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown";
    BEGIN

      $ "FloodControlOutput.FCrelease" [] := IF ( @"t" <= @"24:00:00 July Max DayOfMonth, Current Year" )
 THEN
  GET @INDEX 0.00000000 FROM "ForecastRunoffSeason "(  )
 ELSE
  "ComputeTargetStorageRelease"(  )
 ENDIF;

      PRINT IF ( @"t" <= @"24:00:00 July Max DayOfMonth, Current Year" )
 THEN
  "entering Runoff Forecast Season routine for" CONCAT "GetMonthAsString"( @"t" )
 ELSE
  "Mead Flood Control Release is not computed in" CONCAT "GetMonthAsString"( @"t" )
 ENDIF;

    END
    UUID "{9e309501-08e3-4740-be14-4e5b097ffc6a}";;

    RULE                 "Set Without Release";
    DESCRIPTION          "DESCRIPTION: This rule calculates the forecasted Mead inflow and the Mead inflow volume in excess of the available space in Mead and Powell<br><br>SLOTS SET: FloodControlOutput.Forecas; FloodControlOutput.Withoutrel<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" <= @"24:00:00 July Max DayOfMonth, Current Year" AND IsNaN $ "FloodControlOutput.Withoutrel" [] AND "GetRunCycleIndex"(  ) >= 3.00000000;
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>MC, 20170517: The AvailableSpace, DeltaBankStorage, and FloodControlEvap values were previously calculated in Set Forecast Data. Can those slot values be used here instead of recalculating those values? Also, replace call to ForecastMeadInflow with appropriate call to SumFlowsToVolume";
    BEGIN

      $ "FloodControlOutput.Forecas" [] := "ForecastMeadInflow"(  );

    DESCRIPTION          "Calculate the Mead inflow volume in excess of available space";
      $ "FloodControlOutput.Withoutrel" [] := "ForecastMeadInflow"(  ) - "AvailableSpace"( % "Mead" ) - "AvailableSpace"( % "Powell" ) + $ "MeadFloodControlData.MinSpace" [0.00000000, 0.00000000] - "DeltaBankStorage"(  ) - "FloodControlEvap"( % "Mead" ) - "FloodControlEvap"( % "Powell" ) - $ "FloodControlOutput.Consnev" [];

    END
    UUID "{233d9dc6-c094-473e-9541-54d87a8038f7}";;

    RULE                 "Set Effective Space";
    DESCRIPTION          "DESCRIPTION: This rule calculates the total effective space available in Flaming Gorge (incl. Fontenelle), Blue Mesa, and Navajo until the end of July of the current year by choosing, for each individual reservoir, the minimum of the total available space remaining (*use) or the difference between the Inflow and Outflow (*pred) for the period and summing those values. Used in ForecastMeadInflow function to calculate Mead inflow forecast for calculation of flood control releases according to the Flood Control Algorithm in Exhibit One of the Flood Control Manual.<br><br>SLOTS SET: FloodControlOutput.UBEffective<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT IsNaN $ "FloodControlOutput.UBEffective" [];
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown";
    BEGIN

      $ "FloodControlOutput.UBEffective" [] := IF ( @"t" <= @"24:00:00 July Max DayOfMonth, Current Year" )
 THEN
  "Min"( $ "FloodControlOutput.FGuse" [], $ "FloodControlOutput.FGpred" [] ) + "Min"( $ "FloodControlOutput.BMuse" [], $ "FloodControlOutput.BMpred" [] ) + "Min"( $ "FloodControlOutput.NAVuse" [], $ "FloodControlOutput.NAVpred" [] )
 ELSE
  0.00000000 "acre-feet"
 ENDIF;

    END
    UUID "{ffd0a61e-94c5-4661-9b00-3a8d117f12ea}";;

    RULE                 "Set Consnev";
    DESCRIPTION          "DESCRIPTION: This rule calculates the total diversion volume requested by SNWP from the current timestep to the end of July of the current year<br><br>SLOTS SET: FloodControlOutput.Consnev<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" <= @"24:00:00 July Max DayOfMonth, Current Year" AND IsNaN $ "FloodControlOutput.Withoutrel" [];
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>MC, 20170517: The function call in this rule can be replaced by a call to the predefined function SumFlowsToVolume <br>MC, 20180312: The above replacement was made sometime between these two comments. The MTOM changelog may have the specific month that the change was made.";
    BEGIN

      $ "FloodControlOutput.Consnev" [] := "SumFlowsToVolume"( $ "PumpingFromLakeMead:SNWP.Diversion Requested", @"t", @"24:00:00 July Max DayOfMonth, Current Year" );

    END
    UUID "{9820997f-5922-492e-801d-37a351282497}";;

    RULE                 "Set Forecast Data";
    DESCRIPTION          "DESCRIPTION: This rule calculates and stores the current available storage and expected net change in storage between the current timestep and the end of July of the current year for Flaming Gorge, Blue Mesa, Navajo, Powell and Mead. The change in bank storage and the evaporation are also calculated and stored. These storage calculations are used to determine effective upstream reservoir storage in the Mead Space Building rule. Effective UB storage is used to calculate Mead inflow forecast in the ForecastMeadInflow function for determination of flood control releases using the Flood Control Algorithmin Exhibit One of the Flood Control Manual.<br><br>SLOTS SET: FloodControlOutput.FGuse; FloodControlOutput.FGpred; FloodControlOutput.BMuse; FloodControlOutput.BMpred; FloodControlOutput.NAVuse; FloodControlOutput.NAVpred; FloodControlOutput.MeadPred; FloodControlOutput.MeadCredEff; FloodControlOutput.PowellPred; FloodControlOutput.PowellCredEff; FloodControlOutput.Deltabs; FloodControlOutput.Evapmd; FloodControlOutput.Evapow<br><br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT IsNaN $ "FloodControlOutput.Withoutrel" [];
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br><br>MC, 20170717: Replaced explicit calculations for UC reservoirs with calls to AvailableSpace function<br>MC, 20170531 - the GetLiveCapacity(reservoir) - reservoir.Storage[@&quot;t-1&quot;] calculation is codified in the function AvailableSpace; call that function here?";
    BEGIN

      WITH_STATEMENT (LIST MonthlyDatelist = "GetMonthlyDatelist"( @"t", @"24:00:00 July Max DayOfMonth, Current Year" )) DO
          DESCRIPTION          "(Inflow - Outflow) between current timestep and end of July of current year";
      $ "FloodControlOutput.FGuse" [] := IF ( @"t" <= @"24:00:00 July Max DayOfMonth, Current Year" )
 THEN
  "SumSlotVolume"( $ "FlamingGorgeInflow.Unregulated", MonthlyDatelist ) - "SumSlotVolume"( $ "FlamingGorge.Outflow", MonthlyDatelist )
 ELSE
  0.00000000 "acre-feet"
 ENDIF;

          DESCRIPTION          "Calculate additional available storage in Flaming Gorge";
      $ "FloodControlOutput.FGpred" [] := "AvailableSpace"( % "FlamingGorge" ) + "AvailableSpace"( % "Fontenelle" );

          DESCRIPTION          "(Inflow - Outflow) between current timestep and end of July of current year";
      $ "FloodControlOutput.BMuse" [] := IF ( @"t" <= @"24:00:00 July Max DayOfMonth, Current Year" )
 THEN
  "SumSlotVolume"( $ "BlueMesaInflow.Unregulated", MonthlyDatelist ) - "SumSlotVolume"( $ "BlueMesa.Outflow", MonthlyDatelist )
 ELSE
  0.00000000 "acre-feet"
 ENDIF;

          DESCRIPTION          "Calculate additional available storage in Blue Mesa";
      $ "FloodControlOutput.BMpred" [] := "AvailableSpace"( % "BlueMesa" );

          DESCRIPTION          "(Inflow - Outflow) between current timestep and end of July of current year";
      $ "FloodControlOutput.NAVuse" [] := IF ( @"t" <= @"24:00:00 July Max DayOfMonth, Current Year" )
 THEN
  "SumSlotVolume"( $ "Navajo.Inflow", MonthlyDatelist ) - "SumSlotVolume"( $ "Navajo.Outflow", MonthlyDatelist )
 ELSE
  0.00000000 "acre-feet"
 ENDIF;

          DESCRIPTION          "Calculate additional available storage in Navajo";
      $ "FloodControlOutput.NAVpred" [] := "AvailableSpace"( % "Navajo" );

          DESCRIPTION          "Calculate additional available storage in Mead";
      $ "FloodControlOutput.MeadPred" [] := "AvailableSpace"( % "Mead" );

            $ "FloodControlOutput.MeadCredEff" [] := "AvailableSpace"( % "Mead" );

          DESCRIPTION          "Calculate additional available storage in Powell";
      $ "FloodControlOutput.PowellPred" [] := "AvailableSpace"( % "Powell" );

            $ "FloodControlOutput.PowellCredEff" [] := "AvailableSpace"( % "Powell" );

          DESCRIPTION          "Calculate change in bank storage with available space";
      $ "FloodControlOutput.Deltabs" [] := "DeltaBankStorage"(  );

          DESCRIPTION          "Calculate evaporation between current timestep and end of July of current year";
      $ "FloodControlOutput.Evapmd" [] := "FloodControlEvap"( % "Mead" );

            $ "FloodControlOutput.Evapow" [] := "FloodControlEvap"( % "Powell" );

      END_WITH_STATEMENT;

    END
    UUID "{3aa54334-7508-4ad3-9e14-4ee1e37d0180}";;

    RULE                 "Set Schedule Release";
    DESCRIPTION          "DESCRIPTION: This rule copies the initial Mead release needed to meet downstream demands to the FloodControlOutput data object in slot MeadSchedRel. The value should only be reported the first time Mead calculates its outflow based on downstream demands.<br><br>SLOTS SET: Lower Basin Output.MeadSchedRel<br><br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT IsNaN $ "Lower Basin Output.MeadSchedRel" [] AND NOT IsNaN $ "Mead.Outflow" [] AND "GetRunCycleIndex"(  ) == 3.00000000;
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown";
    BEGIN

      $ "Lower Basin Output.MeadSchedRel" [] := $ "Mead.Outflow" [];

    END
    UUID "{2d2f0f91-da59-4386-8aaa-9d9d4270a686}";;

  END
  UUID "{9605f34a-8ce0-4545-8453-6df3df83363a}";;

  POLICY_GROUP   "Lower Basin Shortage ICS Adjustments";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "MX Diversion Adjustment";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( @"t" != @"Start Timestep" AND @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "This Rule" ) ) OR ( "GetRunCycleIndex"(  ) == 4.00000000 AND @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND ( $ "LowerBasinDemandVariability.ScheduleCheck" ["Dec31ofYear"( @"t" )] != $ "LowerBasinDemandVariability.LowerBasinCondition" ["Dec31ofYear"( @"t" )] OR $ "DCP BWSCP Flags.LB DCP BWSP" ["Dec31ofYear"( @"t" )] != $ "DCP BWSCP Flags.LB DCP BWSP Check" ["Dec31ofYear"( @"t" )] ) ) AND $ "MTOMRunType.RunType" [] != 1.00000000 AND NOT ( "IsQuantifiedOrFloodControl"(  ) OR ( NaNToZero ( $ "Surplus.Domestic Surplus Flag" [@"24:00:00 December 31, Current Year"] ) > 0.00000000 ) );
    NOTES                "GCAA, 20200330: Updated rule to include SetOutYearSchedules logic and to only fire in outyears.";
    BEGIN

      BREAKPOINT BEFORE_EXEC FALSE;
      WITH_STATEMENT (NUMERIC MxShortageVolume = IF ( $ "Shortage.Shortage Flag" [@"24:00:00 December 31, Current Year"] > 0.00000000 )
 THEN
  $ "Mexico Shortage and Surplus.Mexico Shortage Volumes" [$ "Shortage.Shortage Flag" [@"24:00:00 December 31, Current Year"] - 1.00000000, "Mexico"]
 ELSE
  0.00000000 "acre-ft"
 ENDIF) DO
            WITH_STATEMENT (NUMERIC BNWSCPreduction = $ "Mexico Shortage and Surplus.Mexico Recoverable Water Savings_AnnualContribution" [@"24:00:00 December Max DayOfMonth, Current Year"]) DO
            WITH_STATEMENT (NUMERIC MXdivRequested = "SumFlowsToVolume"( $ "MexicanTreatyDelivery:MexicoSched.Diversion Requested", @"t", @"24:00:00 December Max DayOfMonth, Current Year" )) DO
            $ "Mexico Shortage and Surplus.Mexico Annual Shortage" [@"24:00:00 December 31, Current Year"] := MxShortageVolume;

            FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            WITH_STATEMENT (NUMERIC MonthPercent = "FlowToVolume"( $ "MexicanTreatyDelivery:MexicoSched.Diversion Requested" [date], date ) / MXdivRequested) DO
            BREAKPOINT BEFORE_EXEC FALSE;
      $ "MexicanTreatyDelivery:MexicoSched.Diversion Requested" [date] := "VolumeToFlow"( ( MXdivRequested - BNWSCPreduction - MxShortageVolume ) * MonthPercent, date );

      END_WITH_STATEMENT;

      ENDFOREACH;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{c0ad0cb4-4363-4f0d-9b4a-f149af07515a}";;

    RULE                 "NV Diversion Adjustment";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( @"t" != @"Start Timestep" AND @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "This Rule" ) ) OR ( "GetRunCycleIndex"(  ) == 4.00000000 AND @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND ( $ "LowerBasinDemandVariability.ScheduleCheck" ["Dec31ofYear"( @"t" )] != $ "LowerBasinDemandVariability.LowerBasinCondition" ["Dec31ofYear"( @"t" )] OR $ "DCP BWSCP Flags.LB DCP BWSP" ["Dec31ofYear"( @"t" )] != $ "DCP BWSCP Flags.LB DCP BWSP Check" ["Dec31ofYear"( @"t" )] ) ) AND $ "MTOMRunType.RunType" [] != 1.00000000 AND NOT ( "IsQuantifiedOrFloodControl"(  ) OR ( NaNToZero ( $ "Surplus.Domestic Surplus Flag" [@"24:00:00 December 31, Current Year"] ) > 0.00000000 ) );
    NOTES                "";
    BEGIN

      WITH_STATEMENT (NUMERIC SNWADivVol = WITH NUMERIC shortageVolume = IF ( ( $ "Shortage.Shortage Flag" ["Dec31ofYear"( @"t" )] ) > 0.00000000 )
 THEN
  $ "Shortage.State Shortage Volumes" [( $ "Shortage.Shortage Flag" ["Dec31ofYear"( @"t" )] ) - 1.00000000, "Nevada"]
 ELSE
  0.00000000 "acre-ft"
 ENDIF DO
  WITH NUMERIC NonSNWANevadaDivReqs = FOR ( DATETIME date IN @"24:00:00 January 31, Current Year" TO @"24:00:00 December 31, Current Year" ) STAT_SUM
   "FlowToVolume"( $ "FtMohaveIndRes:NV.Diversion Requested" [date], date ) + "FlowToVolume"( $ "NvDvsToPkr:BigBend.Diversion Requested" [date], date ) + "FlowToVolume"( $ "NvDvsToPkr:SCE.Diversion Requested" [date], date ) + "FlowToVolume"( $ "OthersMeadToMohave:LMNRA Nv Mohave.Diversion Requested" [date], date )
  ENDFOR DO
   ( "Min"( $ "AnnualWaterUse.NV_BasicApportionment" [] - shortageVolume, $ "AnnualWaterUse.Nevada_Apportionment" ["Dec31ofYear"( @"t" )] ) - NonSNWANevadaDivReqs ) COMMENTED_BY "Annual SNWP volume = (NV annual allotment - Priority users diversions + Developed Shortage <br>Supplies - Shortage volume) <br>"
  ENDWITH
 ENDWITH COMMENTED_BY "Adjust SNWA by shortage volume contribution <br>") DO
          DESCRIPTION          "DCP volume reduction <br>";
      WITH_STATEMENT (NUMERIC AdditionalDCPReductionNV = ( $ "ICS Credits.AnnualSimultaneousCreationDCPICS_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] / "SystemTaxAdjustment_DCP"(  ) + $ "ICS Credits.AnnualSysWaterforDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] )) DO
          DESCRIPTION          "ICS delivery adjustment <br>";
      WITH_STATEMENT (NUMERIC NVICSDelivery = $ "ICS Credits.AnnualICSDelivery_NV" [@"24:00:00 December Max DayOfMonth, Current Year"]) DO
          DESCRIPTION          "Adjust SNWA delivery <br>";
      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December Max DayOfMonth, Current Year") DO
            WITH_STATEMENT (NUMERIC MonthPercent = $ "PumpingFromLakeMead:SNWP.Diversion Requested" [date] / "SumSlot"( $ "PumpingFromLakeMead:SNWP.Diversion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" )) DO
            FOREACH (SLOT slot IN { $ "PumpingFromLakeMead:SNWP.Diversion Requested" , $ "PumpingFromLakeMead:SNWP.Depletion Requested" }) DO
            slot [date] := "VolumeToFlow"( ( SNWADivVol + NVICSDelivery - AdditionalDCPReductionNV ) * MonthPercent, date );

      ENDFOREACH;

      END_WITH_STATEMENT;

      ENDFOREACH;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{bde8a45f-6afe-4ca8-bb72-e79b4a6c743a}";;

    RULE                 "AZ Diversion Adjustment";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( @"t" != @"Start Timestep" AND @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "This Rule" ) ) OR ( "GetRunCycleIndex"(  ) == 4.00000000 AND @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND ( $ "LowerBasinDemandVariability.ScheduleCheck" ["Dec31ofYear"( @"t" )] != $ "LowerBasinDemandVariability.LowerBasinCondition" ["Dec31ofYear"( @"t" )] OR $ "DCP BWSCP Flags.LB DCP BWSP" ["Dec31ofYear"( @"t" )] != $ "DCP BWSCP Flags.LB DCP BWSP Check" ["Dec31ofYear"( @"t" )] ) ) AND $ "MTOMRunType.RunType" [] != 1.00000000 AND NOT ( "IsQuantifiedOrFloodControl"(  ) OR ( NaNToZero ( $ "Surplus.Domestic Surplus Flag" [@"24:00:00 December 31, Current Year"] ) > 0.00000000 ) );
    NOTES                "";
    BEGIN

      WITH_STATEMENT (LIST AZFirming = "AZ Firming Agreement"(  )) DO
            WITH_STATEMENT (NUMERIC CAPShortageVolume = IF ( $ "Shortage.Shortage Flag" [@"24:00:00 December 31, Current Year"] > 0.00000000 )
 THEN
  $ "Shortage.State Shortage Volumes" [$ "Shortage.Shortage Flag" [@"24:00:00 December 31, Current Year"] - 1.00000000, "Arizona"]
 ELSE
  0.00000000 "acre-ft"
 ENDIF COMMENTED_BY "Adjust CAP for shortage <br>") DO
          DESCRIPTION          "Adjust diversion by difference of ICS delivery calculated by MTOM vs the value passed from the <br>24 MS. <br>";
      WITH_STATEMENT (NUMERIC CAWCDICSdiversionAdjustment = $ "ICS Credits.AnnualICSDelivery_CAWCD" [@"24:00:00 December Max DayOfMonth, Current Year"] - $ "ICSProjectionData.AnnualICSDelivery_CAWCD_Default" [@"24:00:00 December Max DayOfMonth, Current Year"]) DO
          DESCRIPTION          "DCP reduction volume <br>";
      WITH_STATEMENT (NUMERIC DCPreductionCAWCD = $ "ICS Credits.AnnualSimultaneousCreationDCPICS_CAWCD" [@"24:00:00 December Max DayOfMonth, Current Year"] / "SystemTaxAdjustment_DCP"(  ) + $ "ICS Credits.AnnualSysWaterforDCP_CAWCD" [@"24:00:00 December Max DayOfMonth, Current Year"]) DO
            WITH_STATEMENT (NUMERIC CAPDivRequested = $ "ForecastUse.CAPResetAnnualFC" [@"24:00:00 December Max DayOfMonth, Current Year"]) DO
            FOREACH (DATETIME date IN @"t" TO @"24:00:00 December Max DayOfMonth, Current Year") DO
            WITH_STATEMENT (NUMERIC MonthPercent = $ "CAPDiversion.Total Diversion Requested" [date] / "SumSlot"( $ "CAPDiversion.Total Diversion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" )) DO
            $ "CAPDiversion.Total Diversion Requested" [date] := "VolumeToFlow"( ( ( ( CAPDivRequested + GET @INDEX 0.00000000 FROM AZFirming ) - DCPreductionCAWCD + CAWCDICSdiversionAdjustment ) - CAPShortageVolume ) * MonthPercent, date );

      END_WITH_STATEMENT;

      ENDFOREACH;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{1574216e-dc24-4ea2-9307-60c03d96cdbb}";;

    RULE                 "CA Diversion Adjustment";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( ( @"t" == @"Start Timestep" AND @"t" < @"24:00:00 April 30, Start Year" ) AND "IsMRM"(  ) OR @"t" == @"24:00:00 January Max DayOfMonth, Current Year" ) AND "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "This Rule" ) OR ( ( "GetRunCycleIndex"(  ) == 4.00000000 AND @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND ( $ "LowerBasinDemandVariability.ScheduleCheck" ["Dec31ofYear"( @"t" )] != $ "LowerBasinDemandVariability.LowerBasinCondition" ["Dec31ofYear"( @"t" )] OR $ "DCP BWSCP Flags.LB DCP BWSP" ["Dec31ofYear"( @"t" )] != $ "DCP BWSCP Flags.LB DCP BWSP Check" ["Dec31ofYear"( @"t" )] ) ) AND NOT "HasRuleFiredSuccessfully"( "This Rule" ) ) AND $ "MTOMRunType.RunType" [] != 1.00000000 AND NOT ( ( NaNToZero ( $ "Surplus.Domestic Surplus Flag" [@"24:00:00 December 31, Current Year"] ) > 0.00000000 ) OR "IsQuantifiedOrFloodControl"(  ) );
    NOTES                "GCAA, 20181030: Replaced references to ICMA slots to Mexico Water Reserve slots<br>GCAA, 20200330: Updated rule so that PreviousMonthlySublistforAdditionalWaterDelivered does not evaluate to negative and fail in January.";
    BEGIN

      WITH_STATEMENT (NUMERIC dcpContributionCVWD = $ "ICS Credits.AnnualDCPContribution_Coachella" [@"24:00:00 December Max DayOfMonth, Current Year"]) DO
            FOREACH (DATETIME date IN @"t" TO @"24:00:00 December Max DayOfMonth, Current Year") DO
            $ "AAC:Coachella.Diversion Requested" [date] := "VolumeToFlow"( $ "California_CU_Schedules.Coachella" [date] * IF ( "GetMonth"( @"t" ) == 1.00000000 )
 THEN
  "AgUsersBelowParkerDemandVariabilityFactor"( date, "CVWD" )
 ELSE
  1.00000000
 ENDIF - dcpContributionCVWD * $ "Shortage.MonthlyPercents" ["GetMonthAsString"( date ), "Equal"], date );

      ENDFOREACH;

      END_WITH_STATEMENT;

      WITH_STATEMENT (NUMERIC IIDadjustment = $ "ICSProjectionData.AnnualDeliveryEC_IID_Default" ["Dec31ofYear"( @"t" )] + $ "ICSProjectionData.AnnualCreationEC_IID_Default" ["Dec31ofYear"( @"t" )] - ( $ "ICS Credits.AnnualDeliveryEC_IID" ["Dec31ofYear"( @"t" )] + $ "ICS Credits.AnnualCreationEC_IID" ["Dec31ofYear"( @"t" )] )) DO
            WITH_STATEMENT (NUMERIC totalDeliveryMWDICS = IF ( @"t" >= @"24:00:00 April 30, Start Year" AND @"t" <= @"24:00:00 December 31, Start Year" OR NOT "IsMRM"(  ) )
 THEN
  0.00000000 "acre-ft"
 ELSE
  $ "ICS Credits.AnnualICSDelivery_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"]
 ENDIF) DO
            WITH_STATEMENT (NUMERIC totalCreationECICS = IF ( @"t" >= @"24:00:00 April 30, Start Year" AND @"t" <= @"24:00:00 December 31, Start Year" OR NOT "IsMRM"(  ) )
 THEN
  0.00000000 "acre-ft"
 ELSE
  $ "ICS Credits.AnnualCreationEC_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"]
 ENDIF) DO
            WITH_STATEMENT (NUMERIC DCPreductionMWD = $ "ICS Credits.AnnualSimultaneousCreationDCPICS_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] / "SystemTaxAdjustment_DCP"(  ) + $ "ICS Credits.AnnualSysWaterforDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] - $ "ICS Credits.AnnualDCPContribution_Coachella" [@"24:00:00 December Max DayOfMonth, Current Year"]) DO
            WITH_STATEMENT (NUMERIC MWDDivRequested = $ "ForecastUse.MWDResetAnnualFC" [@"24:00:00 December Max DayOfMonth, Current Year"] + $ "California_CU_Forecast1.MWDReturns" [@"24:00:00 December Max DayOfMonth, Current Year"]) DO
            WITH_STATEMENT (NUMERIC DeliveryToDate = "GetDiversionToDate"( $ "California_CU_Actual.MWDDiversion" )) DO
            WITH_STATEMENT (NUMERIC AnnualAdjustedDivRequested = ( MWDDivRequested + ( totalDeliveryMWDICS - totalCreationECICS - DCPreductionMWD - DeliveryToDate ) COMMENTED_BY "Increase the MWD depletion amount by the total delivery less any over delivery that might be <br>occuring in a given scenario, or decrease the delivery if any creation of water for a given <br>scenario. TP 12/22/2017  <br>" )) DO
            WITH_STATEMENT (LIST newMWDDivDepList = FOR ( DATETIME date IN @"t" TO @"24:00:00 December Max DayOfMonth, Current Year" ) WITH LIST result = {  } DO
  WITH NUMERIC MaximumMonthlyDiv = $ "MWDDiversionData.MWDCanal_DailyCapacity" [] * "GetDaysInMonth"( date ) DO
   WITH NUMERIC newMWDDivAmount = WITH NUMERIC monthPercent = $ "MWDDiversion:MWD.Diversion Requested" [date] / "SumSlot"( $ "MWDDiversion:MWD.Diversion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) DO
    WITH NUMERIC MWDAdjustedDiv = AnnualAdjustedDivRequested * monthPercent DO
     "Min"( MaximumMonthlyDiv, MWDAdjustedDiv )
    ENDWITH
   ENDWITH DO
    WITH NUMERIC val = "DebuggerStop"(  ) DO
     WITH NUMERIC newDivReq = newMWDDivAmount - $ "Mexico_CU_Schedules.MexicoTJ" [date] DO
      WITH NUMERIC newDepReq = newDivReq - $ "California_CU_Schedules.MWDReturns" [date] DO
       WITH NUMERIC RemainingCanalSpace = MaximumMonthlyDiv - newDivReq DO
        APPEND { date , newDivReq , newDepReq , RemainingCanalSpace } ONTO result
       ENDWITH
      ENDWITH
     ENDWITH
    ENDWITH
   ENDWITH
  ENDWITH
 ENDFOR COMMENTED_BY "Adjust the MWD Diversion Request to reduce the request if there is not enough total ICS in the <br>system for the total delivery to California.  The reduction will be the difference between the <br>determined delivery to california above the state apportionment minus the availalbe ICS volume.  <br>MWD takes the reduction.   <br>") DO
            WITH_STATEMENT (NUMERIC RemainingDelivery = "Max"( AnnualAdjustedDivRequested - "SumByIndex"( newMWDDivDepList, 1.00000000 ), 0.00000000 "acre-ft" )) DO
            WITH_STATEMENT (LIST MonthlyAdjustment = FOR ( DATETIME date IN @"t" TO @"24:00:00 December Max DayOfMonth, Current Year" ) WITH LIST result = {  } DO
  WITH LIST CurrentMonthlySublist = GET @INDEX "GetMonth"( date ) - 1.00000000 - IF ( "GetYear"( date ) == "GetYear"( @"Start Timestep" ) )
  THEN
   "GetMonth"( @"Start Timestep" ) - 1.00000000
  ELSE
   0.00000000
  ENDIF FROM newMWDDivDepList DO
   WITH LIST PreviousMonthlySublistforAdditionalWaterDelivered = IF ( "GetMonth"( date ) == 1.00000000 OR date == @"Start Timestep" )
   THEN
    { 0.00000000 }
   ELSE
    GET @INDEX "GetMonth"( date ) - 2.00000000 - IF ( "GetYear"( date ) == "GetYear"( @"Start Timestep" ) AND "GetMonth"( @"Start Timestep" ) != 1.00000000 )
    THEN
     "GetMonth"( @"Start Timestep - 1" )
    ELSE
     0.00000000
    ENDIF FROM result
   ENDIF DO
    WITH NUMERIC RemainingDeliveryBalance = IF ( ( LENGTH result ) == 0.00000000 )
    THEN
     RemainingDelivery
    ELSE
     RemainingDelivery - GET @INDEX 3.00000000 FROM PreviousMonthlySublistforAdditionalWaterDelivered
    ENDIF DO
     WITH NUMERIC RemainingCanalSpace = GET @INDEX 3.00000000 FROM CurrentMonthlySublist DO
      WITH NUMERIC AdditionalDeliveryAmount = "Min"( RemainingCanalSpace, RemainingDeliveryBalance ) DO
       WITH NUMERIC AdditionalWaterDelivered = IF ( ( LENGTH result ) == 0.00000000 )
       THEN
        AdditionalDeliveryAmount
       ELSE
        ( GET @INDEX 3.00000000 FROM PreviousMonthlySublistforAdditionalWaterDelivered ) + AdditionalDeliveryAmount
       ENDIF DO
        WITH NUMERIC val1 = "DebuggerStop"(  ) DO
         APPEND { date , ( GET @INDEX 1.00000000 FROM CurrentMonthlySublist ) + AdditionalDeliveryAmount , ( GET @INDEX 2.00000000 FROM CurrentMonthlySublist ) + AdditionalDeliveryAmount , AdditionalWaterDelivered } ONTO result
        ENDWITH
       ENDWITH
      ENDWITH
     ENDWITH
    ENDWITH
   ENDWITH
  ENDWITH
 ENDFOR) DO
            FOREACH (LIST subListMonthlyAdjustment IN MonthlyAdjustment) DO
            $ "MWDDiversion:MWD.Diversion Requested" [GET @INDEX 0.00000000 FROM subListMonthlyAdjustment] := "VolumeToFlow"( GET @INDEX 1.00000000 FROM subListMonthlyAdjustment, GET @INDEX 0.00000000 FROM subListMonthlyAdjustment );

            $ "MWDDiversion:MWD.Depletion Requested" [GET @INDEX 0.00000000 FROM subListMonthlyAdjustment] := "VolumeToFlow"( GET @INDEX 2.00000000 FROM subListMonthlyAdjustment, GET @INDEX 0.00000000 FROM subListMonthlyAdjustment );

      ENDFOREACH;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

          DESCRIPTION          "Adjust IID Diversion Requested <br>";
      IF_STATEMENT ("RoundToFactor"( IIDadjustment, 1.00000000 "acre-ft" ) != 0.00000000 "acre-ft") THEN
            FOREACH (DATETIME date IN @"24:00:00 January Max DayOfMonth, Current Year" TO @"24:00:00 December Max DayOfMonth, Current Year") DO
            $ "AAC:IID.Diversion Requested" [date] := "VolumeToFlow"( $ "California_CU_Schedules.IID" [date] * IF ( "GetMonth"( @"t" ) == 1.00000000 )
 THEN
  "AgUsersBelowParkerDemandVariabilityFactor"( date, "IID" )
 ELSE
  1.00000000
 ENDIF + IIDadjustment * $ "Shortage.MonthlyPercents" ["GetMonth"( date ) - 1.00000000, "Equal"], date );

      ENDFOREACH;

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{6a54fd44-a0fc-456b-bdff-5faea9c4fc1e}";;

  END
  UUID "{f84695a6-60d5-4324-82b4-b0ea2bb85e38}";;

  POLICY_GROUP   "ICS Accounting";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Flood Control ICS Reduction";
    DESCRIPTION          "DESCRIPTION: This rule will use the Flood Control Volume to reduce the amount of Extraordinary Conservation ICS for each state. If the Flood Control Volume is greater than the volume of EC ICS water for all of the states and EC Delivery for each state, the balance of EC water is taken to 0 AF for each state. If the volume of FC water is less than the total EC volume, then the volume reduced from each state will be proportional to the volume that each state has when the Flood Control occurs. This rule assigns the new values of EC ICS water for California, Nevada, and Arizona and also re calculates and assignes the Total ICS Volumes for each state. TP 11/4/2014<br><br>SLOTS SET: ICS Credits.ExtraordinaryConservationICS_CA; ICS Credits.ExtraordinaryConservationICS_NV; ICS Credits.ExtraordinaryConservationICS_AZ; ICS Credits.TotalICS_CA; ICS Credits.TotalICS_NV; ICS Credits.TotalICS_AZ; ICS Credits.AnnualDeliveryEC_CA; ICS Credits.AnnualDeliveryEC_NV; ICS Credits.AnnualDeliveryEC_AZ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 4.00000000 AND "IsQuantifiedOrFloodControl"(  ) AND ( @"t" == @"24:00:00 December Max DayOfMonth, Current Year" OR @"t" == @"Finish Timestep" ) AND NOT "HasRuleFiredSuccessfully"( "True" );
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: TP 11/4/2014<br><br>12/11/18, AP: edited to include MWD / IID ICS CA split";
    BEGIN

    DESCRIPTION          "Recalulates ICS balances when in FC <br>";
      WITH_STATEMENT (NUMERIC floodControlVol = "SumFlowsToVolume"( $ "Lower Basin Output.MexicoExcessFlow", @"24:00:00 January Max DayOfMonth, Current Year", "DateMin"( @"24:00:00 December Max DayOfMonth, Current Year", @"Finish Timestep" ) )) DO
            WITH_STATEMENT (LIST stateECBalances = "FloodControlECICSBalance"( floodControlVol )) DO
            $ "ICS Credits.ExtraordinaryConservationICS_MWD" ["Dec31ofYear"( @"t" )] := GET @INDEX 1.00000000 FROM stateECBalances;

            $ "ICS Credits.ExtraordinaryConservationICS_IID" ["Dec31ofYear"( @"t" )] := GET @INDEX 2.00000000 FROM stateECBalances;

            $ "ICS Credits.ExtraordinaryConservationICS_CA" ["Dec31ofYear"( @"t" )] := ( GET @INDEX 1.00000000 FROM stateECBalances ) + GET @INDEX 2.00000000 FROM stateECBalances;

            $ "ICS Credits.ExtraordinaryConservationICS_NV" ["Dec31ofYear"( @"t" )] := GET @INDEX 3.00000000 FROM stateECBalances;

            $ "ICS Credits.ExtraordinaryConservationICS_CAWCD" ["Dec31ofYear"( @"t" )] := GET @INDEX 4.00000000 FROM stateECBalances;

            $ "ICS Credits.ExtraordinaryConservationICS_CRIT" ["Dec31ofYear"( @"t" )] := GET @INDEX 5.00000000 FROM stateECBalances;

            $ "ICS Credits.ExtraordinaryConservationICS_GRIC" ["Dec31ofYear"( @"t" )] := GET @INDEX 6.00000000 FROM stateECBalances;

            $ "ICS Credits.ExtraordinaryConservationICS_MVIDD" ["Dec31ofYear"( @"t" )] := GET @INDEX 7.00000000 FROM stateECBalances;

            $ "ICS Credits.ExtraordinaryConservationICS_WM" ["Dec31ofYear"( @"t" )] := GET @INDEX 8.00000000 FROM stateECBalances;

            $ "ICS Credits.ExtraordinaryConservationICS_AZ" ["Dec31ofYear"( @"t" )] := ( ( ( ( GET @INDEX 4.00000000 FROM stateECBalances ) + GET @INDEX 5.00000000 FROM stateECBalances ) + GET @INDEX 6.00000000 FROM stateECBalances ) + GET @INDEX 7.00000000 FROM stateECBalances ) + GET @INDEX 8.00000000 FROM stateECBalances;

            $ "ICS Credits.TotalICS_MWD" ["Dec31ofYear"( @"t" )] := ( GET @INDEX 9.00000000 FROM stateECBalances );

            $ "ICS Credits.TotalICS_IID" ["Dec31ofYear"( @"t" )] := ( GET @INDEX 10.00000000 FROM stateECBalances );

            $ "ICS Credits.TotalICS_CA" ["Dec31ofYear"( @"t" )] := ( GET @INDEX 9.00000000 FROM stateECBalances ) + ( GET @INDEX 10.00000000 FROM stateECBalances );

            $ "ICS Credits.Bank_MWD" ["Dec31ofYear"( @"t" )] := $ "ICS Credits.Bank_MWD" ["Dec31ofYear"( @"t" )] - ( $ "ICS Credits.ExtraordinaryConservationICS_MWD" ["Dec31ofYear"( @"t" )] - GET @INDEX 1.00000000 FROM stateECBalances );

            $ "ICS Credits.Bank_CA" ["Dec31ofYear"( @"t" )] := $ "ICS Credits.Bank_CA" ["Dec31ofYear"( @"t" )] - ( $ "ICS Credits.ExtraordinaryConservationICS_CA" ["Dec31ofYear"( @"t" )] - ( ( GET @INDEX 1.00000000 FROM stateECBalances ) + GET @INDEX 2.00000000 FROM stateECBalances ) );

            $ "ICS Credits.TotalICS_NV" ["Dec31ofYear"( @"t" )] := ( GET @INDEX 11.00000000 FROM stateECBalances );

            $ "ICS Credits.Bank_NV" ["Dec31ofYear"( @"t" )] := $ "ICS Credits.Bank_NV" ["Dec31ofYear"( @"t" )] - ( $ "ICS Credits.ExtraordinaryConservationICS_NV" ["Dec31ofYear"( @"t" )] - GET @INDEX 3.00000000 FROM stateECBalances );

            $ "ICS Credits.TotalICS_CAWCD" ["Dec31ofYear"( @"t" )] := ( GET @INDEX 12.00000000 FROM stateECBalances );

            $ "ICS Credits.TotalICS_AZ" ["Dec31ofYear"( @"t" )] := $ "ICS Credits.TotalICS_AZ" ["Dec31ofYear"( @"t" )] - ( $ "ICS Credits.ExtraordinaryConservationICS_AZ" ["Dec31ofYear"( @"t" )] - ( ( ( ( ( GET @INDEX 4.00000000 FROM stateECBalances ) + GET @INDEX 5.00000000 FROM stateECBalances ) + GET @INDEX 6.00000000 FROM stateECBalances ) + GET @INDEX 7.00000000 FROM stateECBalances ) + GET @INDEX 8.00000000 FROM stateECBalances ) );

            $ "ICS Credits.Bank_CAWCD" ["Dec31ofYear"( @"t" )] := $ "ICS Credits.Bank_CAWCD" ["Dec31ofYear"( @"t" )] - ( $ "ICS Credits.ExtraordinaryConservationICS_CAWCD" ["Dec31ofYear"( @"t" )] - GET @INDEX 4.00000000 FROM stateECBalances );

            $ "ICS Credits.Bank_AZ" ["Dec31ofYear"( @"t" )] := $ "ICS Credits.Bank_AZ" ["Dec31ofYear"( @"t" )] - ( $ "ICS Credits.ExtraordinaryConservationICS_AZ" ["Dec31ofYear"( @"t" )] - ( ( ( ( ( GET @INDEX 4.00000000 FROM stateECBalances ) + GET @INDEX 5.00000000 FROM stateECBalances ) + GET @INDEX 6.00000000 FROM stateECBalances ) + GET @INDEX 7.00000000 FROM stateECBalances ) + GET @INDEX 8.00000000 FROM stateECBalances ) );

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{1d4c55e4-42ce-4d4d-a961-8d71f2ad62f0}";;

    RULE                 "MX Accounting";
    DESCRIPTION          "DESCRIPTION: This rule calculates the value of the ICMA balance for Mexico<br><br>SLOTS SET: Mexico Shortage and Surplus.ICMA Balance";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( ( @"t" == @"Start Timestep" OR @"t" == @"24:00:00 January Max DayOfMonth, Current Year" ) AND "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "This Rule" ) ) OR ( "GetRunCycleIndex"(  ) == 4.00000000 AND "IsMRM"(  ) AND @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND ( $ "LowerBasinDemandVariability.ScheduleCheck" ["Dec31ofYear"( @"t" )] != $ "LowerBasinDemandVariability.LowerBasinCondition" ["Dec31ofYear"( @"t" )] OR $ "DCP BWSCP Flags.LB DCP BWSP Check" ["Dec31ofYear"( @"t" )] != $ "DCP BWSCP Flags.LB DCP BWSP" ["Dec31ofYear"( @"t" )] OR ( ( NaNToZero ( $ "Surplus.Domestic Surplus Flag" [@"24:00:00 December 31, Current Year"] ) > 0.00000000 ) OR "IsQuantifiedOrFloodControl"(  ) ) ) );
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE;<br>MC, 20160908: Moved slot Mexico Shortage and Surplus.AnnualCreationICMA inside parentheses so it is subject to 0.97 factor per Shana T. email on 20160831<br><br>GCAA, 20181030: Replaced references to ICMA slots to Mexico Water Reserve slots<br>GCAA, 20200330: Updated execution constraint to be consistent with other ICS Accounting rules";
    BEGIN

      WITH_STATEMENT (NUMERIC WaterReserveBal = $ "Mexico Shortage and Surplus.Mexico Water Reserve Balance" [@"24:00:00 December 31, Previous Year"] COMMENTED_BY "Calculate MX water reserve balance <br>" - $ "Mexico Shortage and Surplus.AnnualDeliveryMexicoWaterReserve" [@"24:00:00 December 31, Current Year"] - $ "ICS Credits.AnnualCreationBiNat_AZ" [@"24:00:00 December 31, Current Year"] - $ "ICS Credits.AnnualCreationBiNat_CA" [@"24:00:00 December 31, Current Year"] - $ "ICS Credits.AnnualCreationBiNat_NV" [@"24:00:00 December 31, Current Year"] + $ "Mexico Shortage and Surplus.AnnualCreationMexicoWaterReserve" [@"24:00:00 December 31, Current Year"] * "SystemTaxAdjustment_DCP"(  )) DO
            $ "Mexico Shortage and Surplus.Mexico Water Reserve Balance" [@"24:00:00 December 31, Current Year"] := WaterReserveBal;

            WITH_STATEMENT (NUMERIC RecoverableWater_prelim = ( $ "Mexico Shortage and Surplus.Mexico Recoverable Water Savings Balance" [@"24:00:00 December 31, Previous Year"] - $ "Mexico Shortage and Surplus.AnnualDeliveryMXRecoverableWaterSavings" [@"24:00:00 December 31, Current Year"] ) COMMENTED_BY "Amount of RecovWaterSavings less delivery <br>") DO
            WITH_STATEMENT (NUMERIC MXBank_prelim = ( RecoverableWater_prelim + WaterReserveBal ) COMMENTED_BY "Calculate prelim bank space <br>") DO
            WITH_STATEMENT (NUMERIC MXRemainingBankSpace = $ "ICS Credits.MeadBankParameters" ["Mexico", "Max Capacity"] - MXBank_prelim) DO
            WITH_STATEMENT (NUMERIC MXRemainingBankSpace_PreTax = MXRemainingBankSpace / "SystemTaxAdjustment_DCP"(  )) DO
            WITH_STATEMENT (NUMERIC annualBWSPcontribution = $ "Mexico Shortage and Surplus.Mexico Recoverable Water Savings_AnnualContribution" [@"24:00:00 December 31, Current Year"]) DO
            WITH_STATEMENT (NUMERIC recoverablewaterBWSCPcontribution = "Max"( "Min"( MXRemainingBankSpace_PreTax, annualBWSPcontribution ), 0.00000000 "acre-ft" ) COMMENTED_BY "Recoverable water savings contribution up to allowable bank space.Rest will be system water <br>") DO
            WITH_STATEMENT (NUMERIC syswaterBWSCPcontribution = ( annualBWSPcontribution - recoverablewaterBWSCPcontribution ) COMMENTED_BY "Sys Water Calculation <br>") DO
            WITH_STATEMENT (NUMERIC RecoverableWaterSavingsBalance = RecoverableWater_prelim + recoverablewaterBWSCPcontribution * "SystemTaxAdjustment_DCP"(  )) DO
          DESCRIPTION          "Set slots <br>";
      $ "Mexico Shortage and Surplus.AnnualBWSCP_SysWater" [@"24:00:00 December 31, Current Year"] := syswaterBWSCPcontribution;

            $ "Mexico Shortage and Surplus.AnnualCreationMXRecoverableWaterSavings" [@"24:00:00 December 31, Current Year"] := recoverablewaterBWSCPcontribution;

            $ "Mexico Shortage and Surplus.Mexico Recoverable Water Savings Balance" [@"24:00:00 December 31, Current Year"] := RecoverableWaterSavingsBalance;

            $ "Mexico Shortage and Surplus.Mexico Water Reserve Balance" [@"24:00:00 December 31, Current Year"] := WaterReserveBal;

            $ "Mexico Shortage and Surplus.Total Combined MX Savings and Reserve" [@"24:00:00 December 31, Current Year"] := RecoverableWaterSavingsBalance + WaterReserveBal;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{3cf25486-9222-4d9a-9f7b-d151fe589f1b}";;

    RULE                 "NV Accounting";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( ( @"t" == @"Start Timestep" OR @"t" == @"24:00:00 January Max DayOfMonth, Current Year" ) AND "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "This Rule" ) ) OR ( "GetRunCycleIndex"(  ) == 4.00000000 AND "IsMRM"(  ) AND @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND ( $ "LowerBasinDemandVariability.ScheduleCheck" ["Dec31ofYear"( @"t" )] != $ "LowerBasinDemandVariability.LowerBasinCondition" ["Dec31ofYear"( @"t" )] OR $ "DCP BWSCP Flags.LB DCP BWSP Check" ["Dec31ofYear"( @"t" )] != $ "DCP BWSCP Flags.LB DCP BWSP" ["Dec31ofYear"( @"t" )] OR ( ( NaNToZero ( $ "Surplus.Domestic Surplus Flag" [@"24:00:00 December 31, Current Year"] ) > 0.00000000 ) OR "IsQuantifiedOrFloodControl"(  ) ) ) );
    NOTES                "";
    BEGIN

      BREAKPOINT BEFORE_EXEC FALSE;
      WITH_STATEMENT (LIST ICSAccounting = "ICSAccountingForNV"(  )) DO
            $ "ICS Credits.SystemEfficiencyICS_NV" [@"24:00:00 December 31, Current Year"] := GET @INDEX 0.00000000 FROM ICSAccounting;

            $ "ICS Credits.BiNationalICS_NV" [@"24:00:00 December 31, Current Year"] := GET @INDEX 1.00000000 FROM ICSAccounting;

            $ "ICS Credits.ImportedICS_NV" [@"24:00:00 December 31, Current Year"] := GET @INDEX 2.00000000 FROM ICSAccounting;

            $ "ICS Credits.TributaryICS_NV" [@"24:00:00 December 31, Current Year"] := GET @INDEX 3.00000000 FROM ICSAccounting;

            $ "ICS Credits.AnnualSimultaneousCreationDCPICS_NV" [@"24:00:00 December 31, Current Year"] := GET @INDEX 4.00000000 FROM ICSAccounting;

            $ "ICS Credits.AnnualCreationEC_NV" [@"24:00:00 December 31, Current Year"] := GET @INDEX 5.00000000 FROM ICSAccounting;

            $ "ICS Credits.AnnualSysWaterforDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 6.00000000 FROM ICSAccounting;

            $ "ICS Credits.ExtraordinaryConservationICS_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 7.00000000 FROM ICSAccounting;

            $ "ICS Credits.DCPICS_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 8.00000000 FROM ICSAccounting;

            $ "ICS Credits.AnnualCreationDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := $ "ICS Credits.AnnualConversionPreviousECtoDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] + GET @INDEX 4.00000000 FROM ICSAccounting;

            $ "ICS Credits.Bank_NV" [@"24:00:00 December 31, Current Year"] := GET @INDEX 9.00000000 FROM ICSAccounting;

            $ "ICS Credits.TotalICS_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 10.00000000 FROM ICSAccounting;

      END_WITH_STATEMENT;

    END
    UUID "{6a434372-0c7e-459f-babc-5eb600511d40}";;

    RULE                 "CA Accounting";
    DESCRIPTION          "DESCRIPTION: This Rule assigns the values for the California ICS.  The function &quot;ICSAccountingForCA&quot; calculates the delivery and annual values based on input<br>creation values, and assigns the appropriate slots for California ICS.  The rule also re-sets the MWD Diversion request each month to the percentage<br>that is applied each month to an average Shortage delivery pattern for a year.  The rule only fires in January or the Start timestep. TP 9/10/2014<br><br>SLOTS SET: ICS Credits.AnnualDeliveryEC_MWD; ICS Credits.AnnualDeliverySysEff_MWD; ICS Credits.AnnualDeliveryBiNat_MWD; ICS Credits.AnnualCreationEC_MWD; ICS Credits.ExtraordinaryConservationICS_MWD; ICS Credits.ExtraordinaryConservationICS_IID: ICS Credits.SystemEfficiencyICS_MWD; ICS Credits.BiNationalICS_MWD; ICS Credits.BiNationalICS_IID; ICS Credits.TotalICS_CA; ICS Credits.TotalICS_MWD; ICS Credits.TotalICS_IID; MWDDiversion:MWD.Diversion Requested; MWDDiversion:MWD.Depletion Requested; MWDDiversion:Tijuana.Depletion Requested<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( ( @"t" == @"Start Timestep" OR @"t" == @"24:00:00 January Max DayOfMonth, Current Year" ) AND "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "This Rule" ) ) OR ( "GetRunCycleIndex"(  ) == 4.00000000 AND "IsMRM"(  ) AND @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND ( $ "LowerBasinDemandVariability.ScheduleCheck" ["Dec31ofYear"( @"t" )] != $ "LowerBasinDemandVariability.LowerBasinCondition" ["Dec31ofYear"( @"t" )] OR ( ( NaNToZero ( $ "Surplus.Domestic Surplus Flag" [@"24:00:00 December 31, Current Year"] ) > 0.00000000 ) OR "IsQuantifiedOrFloodControl"(  ) ) ) );
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: TP 9/10/2014<br><br>MC, 20180125: Made changes to newMWDDivAmount local variable and subsequent assignments based on changes USBR made in their ruleset<br>CH, 5/10/18: Added assignments for: IID EC ICS balance, IID Binat ICS balance, and total IID ICS (binat + EC) and edited total CA ICS assignment to include total MWD and total IID in order to distinguish MWD ICS creation/delivery/balance from IID ICS creation/delivery/balance ";
    BEGIN

      WITH_STATEMENT (LIST iidICSValues = "ICSAccountingForIID"(  )) DO
            WITH_STATEMENT (LIST mwdICSValues = "ICSAccountingForMWD"(  )) DO
          DESCRIPTION          "Annual Delivery BiNatational ICS  <br>";
      $ "ICS Credits.AnnualDeliveryBiNat_IID" ["Dec31ofYear"( @"t" )] := GET @INDEX 0.00000000 FROM iidICSValues;

            $ "ICS Credits.AnnualDeliveryBiNat_CA" ["Dec31ofYear"( @"t" )] := $ "ICS Credits.AnnualDeliveryBiNat_MWD" ["Dec31ofYear"( @"t" )] + GET @INDEX 0.00000000 FROM iidICSValues;

          DESCRIPTION          "Annual Extraordinary ICS Delivery  <br>";
      $ "ICS Credits.AnnualDeliveryEC_IID" ["Dec31ofYear"( @"t" )] := GET @INDEX 1.00000000 FROM iidICSValues;

            $ "ICS Credits.AnnualDeliveryEC_CA" ["Dec31ofYear"( @"t" )] := $ "ICS Credits.AnnualDeliveryEC_MWD" ["Dec31ofYear"( @"t" )] + GET @INDEX 1.00000000 FROM iidICSValues;

          DESCRIPTION          "Annual Delivery System Efficiency ICS <br>";
      $ "ICS Credits.AnnualDeliverySysEff_CA" ["Dec31ofYear"( @"t" )] := $ "ICS Credits.AnnualDeliverySysEff_MWD" ["Dec31ofYear"( @"t" )];

          DESCRIPTION          "Annual Delivery DCP ICS  <br>";
      $ "ICS Credits.AnnualDeliveryDCP_CA" ["Dec31ofYear"( @"t" )] := $ "ICS Credits.AnnualDeliveryDCP_MWD" ["Dec31ofYear"( @"t" )] + $ "ICS Credits.AnnualDeliveryDCP_Coachella" ["Dec31ofYear"( @"t" )];

          DESCRIPTION          "Annual Creation Extraordinary Conservation ICS  <br>";
      $ "ICS Credits.AnnualCreationEC_IID" ["Dec31ofYear"( @"t" )] := GET @INDEX 2.00000000 FROM iidICSValues;

            $ "ICS Credits.AnnualCreationEC_MWD" ["Dec31ofYear"( @"t" )] := GET @INDEX 3.00000000 FROM mwdICSValues;

            $ "ICS Credits.AnnualCreationEC_CA" ["Dec31ofYear"( @"t" )] := ( GET @INDEX 3.00000000 FROM mwdICSValues ) + GET @INDEX 2.00000000 FROM iidICSValues;

          DESCRIPTION          "Annual Creation BiNational ICS <br>";
      $ "ICS Credits.AnnualCreationBiNat_CA" ["Dec31ofYear"( @"t" )] := $ "ICS Credits.AnnualCreationBiNat_IID" ["Dec31ofYear"( @"t" )] + $ "ICS Credits.AnnualCreationBiNat_MWD" ["Dec31ofYear"( @"t" )];

          DESCRIPTION          "Annual Creation System Efficiency ICS <br>";
      $ "ICS Credits.AnnualCreationSysEff_CA" ["Dec31ofYear"( @"t" )] := $ "ICS Credits.AnnualCreationSysEff_MWD" ["Dec31ofYear"( @"t" )];

          DESCRIPTION          "Annual Creation DCP ICS  <br>";
      $ "ICS Credits.AnnualCreationDCP_MWD" ["Dec31ofYear"( @"t" )] := $ "ICS Credits.AnnualConversionPreviousECtoDCP_MWD" ["Dec31ofYear"( @"t" )] + GET @INDEX 2.00000000 FROM mwdICSValues;

            $ "ICS Credits.AnnualSimultaneousCreationDCPICS_MWD" ["Dec31ofYear"( @"t" )] := GET @INDEX 2.00000000 FROM mwdICSValues;

            $ "ICS Credits.AnnualCreationDCP_CA" ["Dec31ofYear"( @"t" )] := ( $ "ICS Credits.AnnualConversionPreviousECtoDCP_MWD" ["Dec31ofYear"( @"t" )] + GET @INDEX 2.00000000 FROM mwdICSValues ) COMMENTED_BY "Coachella DCP ICS is a sub account for MWD. MWD makes full DCP contribution for state of CA .  <br>";

          DESCRIPTION          "Extraordinary Conservation ICS Balances <br>";
      $ "ICS Credits.ExtraordinaryConservationICS_MWD" ["Dec31ofYear"( @"t" )] := GET @INDEX 6.00000000 FROM mwdICSValues;

            $ "ICS Credits.ExtraordinaryConservationICS_IID" ["Dec31ofYear"( @"t" )] := GET @INDEX 3.00000000 FROM iidICSValues;

            $ "ICS Credits.ExtraordinaryConservationICS_CA" ["Dec31ofYear"( @"t" )] := ( GET @INDEX 6.00000000 FROM mwdICSValues ) + GET @INDEX 3.00000000 FROM iidICSValues;

          DESCRIPTION          "System Efficiency ICS Balances <br>";
      $ "ICS Credits.SystemEfficiencyICS_MWD" ["Dec31ofYear"( @"t" )] := GET @INDEX 0.00000000 FROM mwdICSValues;

            $ "ICS Credits.SystemEfficiencyICS_CA" ["Dec31ofYear"( @"t" )] := GET @INDEX 0.00000000 FROM mwdICSValues;

          DESCRIPTION          "BiNational ICS  <br>";
      $ "ICS Credits.BiNationalICS_MWD" ["Dec31ofYear"( @"t" )] := GET @INDEX 1.00000000 FROM mwdICSValues;

            $ "ICS Credits.BiNationalICS_IID" ["Dec31ofYear"( @"t" )] := GET @INDEX 4.00000000 FROM iidICSValues;

            $ "ICS Credits.BiNationalICS_CA" ["Dec31ofYear"( @"t" )] := ( GET @INDEX 4.00000000 FROM iidICSValues ) + GET @INDEX 1.00000000 FROM mwdICSValues;

          DESCRIPTION          "DCP ICS <br>";
      $ "ICS Credits.DCPICS_MWD" ["Dec31ofYear"( @"t" )] := GET @INDEX 4.00000000 FROM mwdICSValues;

            $ "ICS Credits.DCPICS_CA" ["Dec31ofYear"( @"t" )] := GET @INDEX 4.00000000 FROM mwdICSValues;

          DESCRIPTION          "Total ICS Balances <br>";
      $ "ICS Credits.TotalICS_MWD" ["Dec31ofYear"( @"t" )] := GET @INDEX 7.00000000 FROM mwdICSValues;

            $ "ICS Credits.TotalICS_IID" ["Dec31ofYear"( @"t" )] := GET @INDEX 5.00000000 FROM iidICSValues;

            $ "ICS Credits.TotalICS_CA" ["Dec31ofYear"( @"t" )] := ( GET @INDEX 7.00000000 FROM mwdICSValues ) + GET @INDEX 5.00000000 FROM iidICSValues;

            $ "ICS Credits.Bank_CA" ["Dec31ofYear"( @"t" )] := ( GET @INDEX 8.00000000 FROM mwdICSValues ) + GET @INDEX 5.00000000 FROM iidICSValues;

            $ "ICS Credits.Bank_MWD" ["Dec31ofYear"( @"t" )] := ( GET @INDEX 8.00000000 FROM mwdICSValues );

          DESCRIPTION          "DCP System Water Contributions <br>";
      $ "ICS Credits.AnnualSysWaterforDCP_MWD" ["Dec31ofYear"( @"t" )] := GET @INDEX 5.00000000 FROM mwdICSValues;

            $ "ICS Credits.AnnualSysWaterforDCP_CA" ["Dec31ofYear"( @"t" )] := GET @INDEX 5.00000000 FROM mwdICSValues;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{91e7030e-d0a9-4803-abae-a6255d74df51}";;

    RULE                 "AZ Accounting";
    DESCRIPTION          "DESCRIPTION: This Rule assigns the values for the Arizona ICS.  The function &quot;ICSAccountingForAZ&quot; calculates the delivery and annual values based on input creation values, and assigns the appropriate slots for Arizona ICS. The rule only sets informative values to data object slots and not any simulation object slots, the Lower Basin Demand Variability, Surplus and Shortage Logic will reference this data in later rules.  The rule only fires in January or the Start timestep. TP 9/10/2014<br><br>SLOTS SET: ICS Credits.AnnualDeliveryEC_AZ; ICS Credits.AnnualDeliverySysEff_AZ; ICS Credits.AnnualDeliveryBiNat_AZ; ICS Credits.ExtraordinaryConservationICS_AZ; ICS Credits.SystemEfficiencyICS_AZ; ICS Credits.BiNationalICS_AZ; ICS Credits.TotalICS_AZ<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( ( ( @"t" == @"Start Timestep" OR @"t" == @"24:00:00 January Max DayOfMonth, Current Year" ) AND "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "This Rule" ) ) OR ( "GetRunCycleIndex"(  ) == 4.00000000 AND "IsMRM"(  ) AND @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND ( $ "LowerBasinDemandVariability.ScheduleCheck" ["Dec31ofYear"( @"t" )] != $ "LowerBasinDemandVariability.LowerBasinCondition" ["Dec31ofYear"( @"t" )] OR $ "DCP BWSCP Flags.LB DCP BWSP Check" ["Dec31ofYear"( @"t" )] != $ "DCP BWSCP Flags.LB DCP BWSP" ["Dec31ofYear"( @"t" )] OR ( ( NaNToZero ( $ "Surplus.Domestic Surplus Flag" [@"24:00:00 December 31, Current Year"] ) > 0.00000000 ) OR "IsQuantifiedOrFloodControl"(  ) ) ) ) ) COMMENTED_BY "Rule executes in Run Cycle 3 at the Start Timestep or January, if the rule has not already <br>executed successfully or in run cycle 4 in the LB System condition switched from run cycle 3<br>";
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: TP, 9/10/2014<br><br>AP, 9/18/2018: Added constraints to fire rule if the LB condition changed between RC 3 and RC 4";
    BEGIN

      WITH_STATEMENT (LIST azICSvalues = "ICSAccountingForAZ"(  )) DO
          DESCRIPTION          "Annual Creation ICS AZ <br>";
      $ "ICS Credits.AnnualCreationSysEff_AZ" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 0.00000000 FROM azICSvalues;

            $ "ICS Credits.AnnualCreationEC_AZ" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 1.00000000 FROM azICSvalues;

            $ "ICS Credits.AnnualCreationBiNat_AZ" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 2.00000000 FROM azICSvalues;

          DESCRIPTION          "Annual Delivery ICS AZ <br>";
      $ "ICS Credits.AnnualDeliverySysEff_AZ" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 3.00000000 FROM azICSvalues;

            $ "ICS Credits.AnnualDeliveryEC_AZ" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 4.00000000 FROM azICSvalues;

            $ "ICS Credits.AnnualDeliveryBiNat_AZ" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 5.00000000 FROM azICSvalues;

            $ "ICS Credits.AnnualDeliveryDCP_AZ" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 6.00000000 FROM azICSvalues;

          DESCRIPTION          "EC ICS Balances <br>";
      $ "ICS Credits.ExtraordinaryConservationICS_CRIT" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 7.00000000 FROM azICSvalues;

            $ "ICS Credits.ExtraordinaryConservationICS_GRIC" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 8.00000000 FROM azICSvalues;

            $ "ICS Credits.ExtraordinaryConservationICS_CAWCD" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 9.00000000 FROM azICSvalues;

            $ "ICS Credits.ExtraordinaryConservationICS_MVIDD" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 10.00000000 FROM azICSvalues;

            $ "ICS Credits.ExtraordinaryConservationICS_WM" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 11.00000000 FROM azICSvalues;

            $ "ICS Credits.ExtraordinaryConservationICS_AZ" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 12.00000000 FROM azICSvalues;

          DESCRIPTION          "BiNat Balances <br>";
      $ "ICS Credits.BiNationalICS_CAWCD" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 13.00000000 FROM azICSvalues;

            $ "ICS Credits.BiNationalICS_AZ" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 14.00000000 FROM azICSvalues;

          DESCRIPTION          "System Eff Balances <br>";
      $ "ICS Credits.SystemEfficiencyICS_CAWCD" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 15.00000000 FROM azICSvalues;

            $ "ICS Credits.SystemEfficiencyICS_AZ" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 16.00000000 FROM azICSvalues;

          DESCRIPTION          "DCP <br>";
      $ "ICS Credits.AnnualSimultaneousCreationDCPICS_CAWCD" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 17.00000000 FROM azICSvalues;

            $ "ICS Credits.AnnualSysWaterforDCP_CAWCD" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 18.00000000 FROM azICSvalues;

            $ "ICS Credits.AnnualCreationDCP_CAWCD" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 19.00000000 FROM azICSvalues;

            $ "ICS Credits.AnnualCreationDCP_AZ" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 20.00000000 FROM azICSvalues;

            $ "ICS Credits.AnnualSysWaterforDCP_AZ" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 21.00000000 FROM azICSvalues;

          DESCRIPTION          "DCP Balances <br>";
      $ "ICS Credits.DCPICS_CAWCD" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 22.00000000 FROM azICSvalues;

            $ "ICS Credits.TotalICS_CAWCD" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 23.00000000 FROM azICSvalues;

            $ "ICS Credits.DCPICS_AZ" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 24.00000000 FROM azICSvalues;

          DESCRIPTION          "State of AZ Balance and Bank <br>";
      $ "ICS Credits.Bank_AZ" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 25.00000000 FROM azICSvalues;

            $ "ICS Credits.TotalICS_AZ" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 26.00000000 FROM azICSvalues;

          DESCRIPTION          "Firming Balances <br>";
      $ "ICS Credits.FirmingAgreementBalance_AZ" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 27.00000000 FROM azICSvalues;

            $ "ICS Credits.FirmingAgreementBalance_US" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 28.00000000 FROM azICSvalues;

          DESCRIPTION          "Annual Creation EC Water Users <br>";
      $ "ICS Credits.AnnualCreationEC_CRIT" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 29.00000000 FROM azICSvalues;

            $ "ICS Credits.AnnualCreationEC_GRIC" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 30.00000000 FROM azICSvalues;

            $ "ICS Credits.AnnualCreationEC_CAWCD" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 31.00000000 FROM azICSvalues;

            $ "ICS Credits.AnnualCreationEC_MVIDD" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 32.00000000 FROM azICSvalues;

            $ "ICS Credits.AnnualCreationEC_WM" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 33.00000000 FROM azICSvalues;

          DESCRIPTION          "CAWCD Bank <br>";
      $ "ICS Credits.Bank_CAWCD" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 34.00000000 FROM azICSvalues;

      END_WITH_STATEMENT;

    END
    UUID "{880fdd8a-b06f-4f83-a7c8-f99bf19d486d}";;

    RULE                 "NV ICS Delivery";
    DESCRIPTION          "Rule includes flood control conditions and includes DCP delivery constraints";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( ( @"t" == @"Start Timestep" OR @"t" == @"24:00:00 January Max DayOfMonth, Current Year" ) AND "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "This Rule" ) ) OR ( "GetRunCycleIndex"(  ) == 4.00000000 AND "IsMRM"(  ) AND @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND ( $ "LowerBasinDemandVariability.ScheduleCheck" ["Dec31ofYear"( @"t" )] != $ "LowerBasinDemandVariability.LowerBasinCondition" ["Dec31ofYear"( @"t" )] OR $ "DCP BWSCP Flags.LB DCP BWSP" ["Dec31ofYear"( @"t" )] != $ "DCP BWSCP Flags.LB DCP BWSP Check" ["Dec31ofYear"( @"t" )] ) );
    NOTES                "GCAA, 20200330: Updated rule to include delivery of Nevada's DCP ICS";
    BEGIN

      WITH_STATEMENT (NUMERIC ECICStoDCP = "Max"( 0.00000000 "acre-ft", "Min"( $ "ICS Credits.AnnualConversionPreviousECtoDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] + ( $ "ICS Credits.MeadBankParameters" ["Nevada", "Max Capacity"] - $ "ICS Credits.Bank_NV" [@"24:00:00 December Max DayOfMonth, Previous Year"] ), $ "ICS Credits.AnnualDCPContribution_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] ) ) COMMENTED_BY "The amount of EC ICS converted to DCP ICS during the current year    <br>") DO
            WITH_STATEMENT (NUMERIC SurplusICSDelivery = IF ( "IsQuantifiedOrFloodControl"(  ) )
 THEN
  ( $ "ICS Credits.AnnualCreationTrib_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] + $ "ICS Credits.AnnualCreationImp_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] ) * "SystemTaxAdjustment_DCP"(  ) + $ "ICS Credits.DCPICS_NV" [@"24:00:00 December 31, Previous Year"]
 ELSE
  0.00000000 "acre-ft"
 ENDIF COMMENTED_BY "If flood control, take delivery of any tributary or imprted ICS creation made during <br>the current year   <br>") DO
            WITH_STATEMENT (NUMERIC AnnualDelivery = "Max"( IF ( "IsQuantifiedOrFloodControl"(  ) )
 THEN
  SurplusICSDelivery
 ELSE
  "ICSDeliveryReduction_DCP"( $ "ICSProjectionData.AnnualICSDelivery_NV_Preliminary" [@"24:00:00 December Max DayOfMonth, Current Year"], "Nevada", "Max Delivery", ECICStoDCP )
 ENDIF, 0.00000000 "acre-ft" ) COMMENTED_BY "Checks desired ICS delivery amount against DCP policy restrictions   <br>") DO
            WITH_STATEMENT (NUMERIC TribSurplusDeliv = IF ( "IsQuantifiedOrFloodControl"(  ) )
 THEN
  $ "ICS Credits.AnnualCreationTrib_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] * "SystemTaxAdjustment_DCP"(  )
 ELSE
  0.00000000 "acre-ft"
 ENDIF COMMENTED_BY "Take delivery of trib ICS creation if in QS or FC <br>") DO
            WITH_STATEMENT (NUMERIC ImpSurplusDeliv = IF ( "IsQuantifiedOrFloodControl"(  ) )
 THEN
  $ "ICS Credits.AnnualCreationImp_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] * "SystemTaxAdjustment_DCP"(  )
 ELSE
  0.00000000 "acre-ft"
 ENDIF COMMENTED_BY "Take delivery of Imported ICS if in QS or FC <br>") DO
            WITH_STATEMENT (LIST DeliveryChargedList = FOR ( NUMERIC CategoryBalance IN { $ "ICS Credits.DCPICS_NV" [@"24:00:00 December Max DayOfMonth, Previous Year"] COMMENTED_BY "If there is an ICS deivery amount, take out of accounts in the following order.<br><br>DCP ICS (if above recovery elevation) [0]<br>EC ICS [1]<br>Tributary ICS[2]<br>System Efficiency[3]<br>BiNational[4]<br>Imported[5]<br><br>AP 11/19/19   <br>" , ( $ "ICS Credits.ExtraordinaryConservationICS_NV" [@"24:00:00 December Max DayOfMonth, Previous Year"] - $ "ICS Credits.AnnualConversionPreviousECtoDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] + $ "ICS Credits.TributaryICS_NV" [@"24:00:00 December Max DayOfMonth, Previous Year"] + $ "ICS Credits.ImportedICS_NV" [@"24:00:00 December Max DayOfMonth, Previous Year"] ) COMMENTED_BY "ECICS balance <br>" , ( $ "ICS Credits.AnnualCreationTrib_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] * "SystemTaxAdjustment_DCP"(  ) ) COMMENTED_BY "Current Year trib <br>" , $ "ICS Credits.SystemEfficiencyICS_NV" [@"24:00:00 December Max DayOfMonth, Previous Year"] COMMENTED_BY "SysEff <br>" , $ "ICS Credits.BiNationalICS_NV" [@"24:00:00 December Max DayOfMonth, Previous Year"] COMMENTED_BY "BiNat <br>" , ( $ "ICS Credits.AnnualCreationImp_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] * "SystemTaxAdjustment_DCP"(  ) ) COMMENTED_BY "Imported <br>" } ) WITH LIST result = {  } DO
  WITH NUMERIC RemainingBalance = IF ( ( LENGTH result ) == 0.00000000 )
  THEN
   AnnualDelivery
  ELSE
   AnnualDelivery - "Sum"( result )
  ENDIF COMMENTED_BY "Remaining ICS delivery balance   <br>" DO
   WITH NUMERIC DeliveryAmount = IF ( ( ( ( LENGTH result ) == 0.00000000 AND $ "Mead.Pool Elevation" [@"24:00:00 December Max DayOfMonth, Previous Year"] < $ "DCP.RecoveryElevation" [] ) OR ( ( LENGTH result ) == 2.00000000 OR ( LENGTH result ) == 5.00000000 AND "IsQuantifiedOrFloodControl"(  ) ) COMMENTED_BY "If surplus, do not take any ICS out of Tributary or Imported ICS accounts because they were <br>already cleared in the logic above. <br>" ) COMMENTED_BY "Don't take DCP ICS if the Mead elevation is below the recovery elevation of 1110 <br>" )
   THEN
    0.00000000 "acre-ft"
   ELSE
    "Min"( RemainingBalance, CategoryBalance )
   ENDIF DO
    APPEND DeliveryAmount ONTO result
   ENDWITH
  ENDWITH
 ENDFOR) DO
          DESCRIPTION          "Set ICS delivery slots <br>";
      $ "ICS Credits.AnnualDeliveryDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 0.00000000 FROM DeliveryChargedList;

            $ "ICS Credits.AnnualDeliveryEC_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 1.00000000 FROM DeliveryChargedList;

            $ "ICS Credits.AnnualDeliveryTrib_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := ( GET @INDEX 2.00000000 FROM DeliveryChargedList ) + TribSurplusDeliv;

            $ "ICS Credits.AnnualDeliverySysEff_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 3.00000000 FROM DeliveryChargedList;

            $ "ICS Credits.AnnualDeliveryBiNat_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 4.00000000 FROM DeliveryChargedList;

            $ "ICS Credits.AnnualDeliveryImp_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := ( GET @INDEX 5.00000000 FROM DeliveryChargedList ) + ImpSurplusDeliv;

            $ "ICS Credits.AnnualICSDelivery_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := "Sum"( DeliveryChargedList ) + TribSurplusDeliv + ImpSurplusDeliv;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{060b25bf-4fd4-45e9-a045-c846eff6827e}";;

    RULE                 "CA ICS Delivery";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( ( @"t" == @"Start Timestep" OR @"t" == @"24:00:00 January Max DayOfMonth, Current Year" ) AND "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "This Rule" ) ) OR ( "GetRunCycleIndex"(  ) == 4.00000000 AND @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND ( $ "LowerBasinDemandVariability.ScheduleCheck" ["Dec31ofYear"( @"t" )] != $ "LowerBasinDemandVariability.LowerBasinCondition" ["Dec31ofYear"( @"t" )] OR $ "DCP BWSCP Flags.LB DCP BWSP" ["Dec31ofYear"( @"t" )] != $ "DCP BWSCP Flags.LB DCP BWSP Check" ["Dec31ofYear"( @"t" )] ) ) AND $ "MTOMRunType.RunType" [] != 1.00000000;
    NOTES                "";
    BEGIN

      WITH_STATEMENT (NUMERIC ECICStoDCP = "Max"( 0.00000000 "acre-ft", "Min"( $ "ICS Credits.AnnualConversionPreviousECtoDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] + ( $ "ICS Credits.MeadBankParameters" ["California", "Max Capacity"] - $ "ICS Credits.Bank_CA" [@"24:00:00 December Max DayOfMonth, Previous Year"] ), $ "ICS Credits.AnnualDCPContribution_CA" [@"24:00:00 December Max DayOfMonth, Current Year"] ) ) COMMENTED_BY "The amount of EC ICS converted to DCP ICS during the current year   <br>") DO
            WITH_STATEMENT (NUMERIC AnnualDelivery = "ICSDeliveryReduction_DCP"( $ "ICSProjectionData.AnnualICSDelivery_MWD_Preliminary" [@"24:00:00 December Max DayOfMonth, Current Year"], "California", "Max Delivery", ECICStoDCP ) COMMENTED_BY "Checks desired ICS delivery amount against DCP policy restrictions  <br>") DO
            WITH_STATEMENT (LIST DeliveryChargedList = FOR ( NUMERIC CategoryBalance IN { ( $ "ICS Credits.DCPICS_MWD" [@"24:00:00 December Max DayOfMonth, Previous Year"] - $ "ICS Credits.AnnualDeliveryDCP_Coachella" [@"24:00:00 December Max DayOfMonth, Current Year"] ) COMMENTED_BY "If there is an ICS deivery amount, take out of accounts in the following order.<br><br>DCP ICS (if above recovery elevation)<br>EC ICS<br>System Efficiency<br>BiNational <br><br>AP 11/19/19  <br>" , "Min"( $ "ICS Credits.ExtraordinaryConservationICS_MWD" [@"24:00:00 December Max DayOfMonth, Previous Year"] - $ "ICS Credits.AnnualConversionPreviousECtoDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"], $ "ICS Credits.MeadBankParameters" ["California", "Max Delivery"] ) COMMENTED_BY "Previous years balance less any conversion for DCP ICS. No need to take current year ICS <br>creation into account because the two are mutually exclusive. Based on MWD ICS creation and <br>delivery logic, MWD is either creating OR delivering EC ICS based SAC WY Index.<br><br>AP 11/19/19     <br>" , $ "ICS Credits.SystemEfficiencyICS_MWD" [@"24:00:00 December Max DayOfMonth, Previous Year"] , $ "ICS Credits.BiNationalICS_MWD" [@"24:00:00 December Max DayOfMonth, Previous Year"] } ) WITH LIST result = {  } DO
  WITH NUMERIC RemainingBalance = IF ( ( LENGTH result ) == 0.00000000 )
  THEN
   AnnualDelivery
  ELSE
   AnnualDelivery - "Sum"( result )
  ENDIF COMMENTED_BY "Remaining ICS delivery balance  <br>" DO
   WITH NUMERIC DeliveryAmount = IF ( ( ( LENGTH result ) == 0.00000000 AND "GetProjectedPoolElevation"( "Mead", @"24:00:00 December Max DayOfMonth, Previous Year" ) < $ "DCP.RecoveryElevation" [] ) COMMENTED_BY "Don't take DCP ICS if the Mead elevation is below the recovery elevation of 1110  <br>" )
   THEN
    0.00000000 "acre-ft"
   ELSE
    "Min"( RemainingBalance, CategoryBalance )
   ENDIF DO
    APPEND DeliveryAmount ONTO result
   ENDWITH
  ENDWITH
 ENDFOR) DO
          DESCRIPTION          "Set ICS delivery slots  <br>";
      $ "ICS Credits.AnnualDeliveryDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 0.00000000 FROM DeliveryChargedList;

            $ "ICS Credits.AnnualDeliveryEC_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 1.00000000 FROM DeliveryChargedList;

            $ "ICS Credits.AnnualDeliverySysEff_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 2.00000000 FROM DeliveryChargedList;

            $ "ICS Credits.AnnualDeliveryBiNat_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX 3.00000000 FROM DeliveryChargedList;

            $ "ICS Credits.AnnualICSDelivery_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := "Sum"( DeliveryChargedList );

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{eae562f8-31fd-4638-9ba6-2f6cd97320b2}";;

    RULE                 "AZ ICS Delivery";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( ( @"t" == @"Start Timestep" OR @"t" == @"24:00:00 January Max DayOfMonth, Current Year" ) AND "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "This Rule" ) ) OR ( "GetRunCycleIndex"(  ) == 4.00000000 AND "IsMRM"(  ) AND @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND ( $ "LowerBasinDemandVariability.ScheduleCheck" ["Dec31ofYear"( @"t" )] != $ "LowerBasinDemandVariability.LowerBasinCondition" ["Dec31ofYear"( @"t" )] OR ( ( NaNToZero ( $ "Surplus.Domestic Surplus Flag" [@"24:00:00 December 31, Current Year"] ) > 0.00000000 ) OR "IsQuantifiedOrFloodControl"(  ) ) OR $ "DCP BWSCP Flags.LB DCP BWSP Check" ["Dec31ofYear"( @"t" )] != $ "DCP BWSCP Flags.LB DCP BWSP" ["Dec31ofYear"( @"t" )] ) );
    NOTES                "";
    BEGIN

      WITH_STATEMENT (NUMERIC ECICStoDCP = "Max"( 0.00000000 "acre-ft", "Min"( $ "ICS Credits.MeadBankParameters" ["Arizona", "Max Capacity"] - $ "ICS Credits.Bank_AZ" [@"24:00:00 December Max DayOfMonth, Previous Year"], $ "ICSProjectionData.AnnualConversionECtoDCP_CAWCD_Preliminary" [@"24:00:00 December Max DayOfMonth, Current Year"] ) ) COMMENTED_BY "The amount of EC ICS converted to DCP ICS during the current year <br>") DO
            WITH_STATEMENT (NUMERIC AnnualDelivery = "ICSDeliveryReduction_DCP"( $ "ICSProjectionData.AnnualICSDelivery_CAWCD_Preliminary" [@"24:00:00 December Max DayOfMonth, Current Year"], "Arizona", "Max Delivery", ECICStoDCP ) COMMENTED_BY "Checks desired ICS delivery amount against DCP policy restrictions   <br>") DO
            WITH_STATEMENT (LIST DeliveryChargedList = FOR ( NUMERIC CategoryBalance IN { $ "ICS Credits.DCPICS_CAWCD" [@"24:00:00 December Max DayOfMonth, Previous Year"] , $ "ICS Credits.ExtraordinaryConservationICS_CAWCD" [@"24:00:00 December Max DayOfMonth, Previous Year"] , $ "ICS Credits.BiNationalICS_CAWCD" [@"24:00:00 December Max DayOfMonth, Previous Year"] , $ "ICS Credits.SystemEfficiencyICS_CAWCD" [@"24:00:00 December Max DayOfMonth, Previous Year"] } COMMENTED_BY "Accounts for ICS delivery (in order) <br>" ) WITH LIST result = {  } DO
  WITH NUMERIC RemainingBalance = IF ( ( LENGTH result ) == 0.00000000 )
  THEN
   AnnualDelivery
  ELSE
   AnnualDelivery - "Sum"( result )
  ENDIF COMMENTED_BY "Remaining ICS delivery balance   <br>" DO
   WITH NUMERIC DeliveryAmount = IF ( ( ( LENGTH result ) == 0.00000000 AND "GetProjectedPoolElevation"( "Mead", @"24:00:00 December 31, Previous Year" ) < $ "DCP.RecoveryElevation" [] ) COMMENTED_BY "Don't take DCP ICS if the Mead elevation is below the recovery elevation of 1110  <br>" )
   THEN
    0.00000000 "acre-ft"
   ELSE
    "Min"( RemainingBalance, CategoryBalance )
   ENDIF DO
    APPEND DeliveryAmount ONTO result
   ENDWITH
  ENDWITH
 ENDFOR) DO
          DESCRIPTION          "Set ICS delivery slots  <br>";
      $ "ICS Credits.AnnualDeliveryDCP_CAWCD" [@"24:00:00 December 31, Current Year"] := GET @INDEX 0.00000000 FROM DeliveryChargedList;

            $ "ICS Credits.AnnualDeliveryEC_CAWCD" [@"24:00:00 December 31, Current Year"] := GET @INDEX 1.00000000 FROM DeliveryChargedList;

            $ "ICS Credits.AnnualDeliveryBiNat_CAWCD" [@"24:00:00 December 31, Current Year"] := GET @INDEX 2.00000000 FROM DeliveryChargedList;

            $ "ICS Credits.AnnualDeliverySysEff_CAWCD" [@"24:00:00 December 31, Current Year"] := GET @INDEX 3.00000000 FROM DeliveryChargedList;

            $ "ICS Credits.AnnualICSDelivery_CAWCD" [@"24:00:00 December Max DayOfMonth, Current Year"] := "Sum"( DeliveryChargedList );

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{ccb68901-761d-4298-aba0-749bec3b23f9}";;

    RULE                 "Nevada Banking";
    DESCRIPTION          "DESCRIPTION: This rule assigns the Banked Storage from NV in CA and AZ for each year.  As of implementation Unbanked water from CA and AZ is 0 af and will continue to be for the foreseable future.  The values of 0 acre-feet are input on those slots.  If logic is used to solve for those, then logic will have to go into this rule where appropriate. This rule only sets data objects and that data is used in subsequent rules in the Shortage, Surplus and LBDV logic. TP 7.28.2015<br><br>SLOTS SET: ICS Credits.AnnualNevadaUnused, ICS Credits.CumulativeNVBankedinCA, ICS Credits.CumulativeNVBankedinAZ, ICS Credits.AnnualNVBankedinCA, ICS Credits.AnnualNVBankedinAZ, ICS Credits.AnnualNVRecoverableCA, ICS Credits.AnnualNVRecoverableAZ, ICS Credits.AnnualNVUnBankedFromCA, ICS Credits.AnnualNVUnbankedFromAZ<br><br><br><br>";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT ( ( @"t" == @"Start Timestep" OR @"t" == @"24:00:00 January Max DayOfMonth, Current Year" ) AND "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "This Rule" ) ) OR ( "GetRunCycleIndex"(  ) == 4.00000000 AND "IsMRM"(  ) AND @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND $ "LowerBasinDemandVariability.ScheduleCheck" ["Dec31ofYear"( @"t" )] != $ "LowerBasinDemandVariability.LowerBasinCondition" ["Dec31ofYear"( @"t" )] );
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: TP, 7/28/2015<br><br>AP, 9/18/2018: Added constraints to fire rule if the LB condition changed between RC 3 and RC 4";
    BEGIN

      WITH_STATEMENT (NUMERIC unusedNV = IF ( NaNToZero ( $ "LowerBasinDemandVariability.LowerBasinCondition" ["Dec31ofYear"( @"t" )] ) == 1.00000000 )
 THEN
  0.00000000 "acre-ft"
 ELSE
  ( 300000.00000000 "acre-ft" - $ "AnnualWaterUse.Nevada_Apportionment" ["Dec31ofYear"( @"t" )] + IF ( "MeadPumpingDemandVariabilityFactor"( @"t" ) == 0.95000000 )
  THEN
   ( "SumAnnualSNWADivRequest"(  ) * 0.05000000 ) COMMENTED_BY "Side inflows are high"
  ELSE
   IF ( "MeadPumpingDemandVariabilityFactor"( @"t" ) == 1.05000000 )
   THEN
    ( "SumAnnualSNWADivRequest"(  ) * - 0.05000000 ) COMMENTED_BY "Side Inflows are low"
   ELSE
    0.00000000 "acre-ft" COMMENTED_BY "Normal Side inflows above Hoover"
   ENDIF
  ENDIF COMMENTED_BY "With Regard to Lower Basin Demand Variability, if the side inflows above Hoover are high, <br>then the SNWA diversion is reduced and the available unused Nevada water is increased <br>by 5% of the SNWA diversion. If the side inflows are low, then the SNWA diversion is <br>increased by 5% and the amount of unused Nevada water is decreased by that amount. <br>In a normal year, do not apply any change. TP 7/30/2015" ) COMMENTED_BY "MC, 20170512: Add in a Max&lcub; ..., 0 acre-ft&rcub; here to ensure unused never negative?"
 ENDIF) DO
          DESCRIPTION          "Right now, all unused NV water is going to CA Banking, more logic will  have to go in the following With statements <br>to get that figured out. ";
      WITH_STATEMENT (NUMERIC nvBankedCA = IF ( NaNToZero ( $ "LowerBasinDemandVariability.LowerBasinCondition" ["Dec31ofYear"( @"t" )] ) == 1.00000000 )
 THEN
  0.00000000 "acre-ft"
 ELSE
  unusedNV - $ "ICSProjectionData.NV_LeftinMead" ["Dec31ofYear"( @"t" )]
 ENDIF) DO
            WITH_STATEMENT (NUMERIC nvBankedAZ = IF ( NaNToZero ( $ "LowerBasinDemandVariability.LowerBasinCondition" ["Dec31ofYear"( @"t" )] ) == 1.00000000 )
 THEN
  0.00000000 "acre-ft"
 ELSE
  0.00000000 "acre-ft"
 ENDIF) DO
          DESCRIPTION          "Nevada is permitted to recover up to 40,000 AF from AZ and 30,000 AF from CA annually, added based on <br>an email, April 27, 2015 subject &quot;Re: MTOM Action Items&quot; from Shana Tighi to Tony Powell";
      WITH_STATEMENT (NUMERIC annNVRecoverableAZ = "Min"( 40000.00000000 "acre-ft", $ "ICS Credits.CumulativeNVBankedinAZ" [@"24:00:00 December Max DayOfMonth, Previous Year"] )) DO
            WITH_STATEMENT (NUMERIC annNVRecoverableCA = "Min"( 30000.00000000 "acre-ft", $ "ICS Credits.CumulativeNVBankedinCA" [@"24:00:00 December Max DayOfMonth, Previous Year"] )) DO
          DESCRIPTION          "When the NV unbanked to CA logic needs to be improved, the next two With statements is <br>where that should happen. Currently, the values for unbanked to CA and AZ will be 0 acre-feet.  <br>When logic is generated it needs to be limited to the Recoverable water available to NV. ";
      WITH_STATEMENT (NUMERIC nvUnbankedCA = "Min"( 0.00000000 "acre-ft", annNVRecoverableCA )) DO
            WITH_STATEMENT (NUMERIC nvUnbankedAZ = "Min"( 0.00000000 "acre-ft", annNVRecoverableAZ )) DO
          DESCRIPTION          "Annual Nevada Water not Used";
      $ "ICS Credits.AnnualNevadaUnused" ["Dec31ofYear"( @"t" )] := unusedNV;

            $ "ICS Credits.CumulativeNVBankedinCA" ["Dec31ofYear"( @"t" )] := $ "ICS Credits.CumulativeNVBankedinCA" [@"24:00:00 December Max DayOfMonth, Previous Year"] + nvBankedCA * 0.66666600 - nvUnbankedCA;

            $ "ICS Credits.CumulativeNVBankedinAZ" ["Dec31ofYear"( @"t" )] := $ "ICS Credits.CumulativeNVBankedinAZ" [@"24:00:00 December Max DayOfMonth, Previous Year"] + nvBankedAZ - nvUnbankedAZ;

            $ "ICS Credits.AnnualNVBankedinCA" ["Dec31ofYear"( @"t" )] := nvBankedCA;

            $ "ICS Credits.AnnualNVBankedinAZ" ["Dec31ofYear"( @"t" )] := nvBankedAZ;

            $ "ICS Credits.AnnualNVRecoverableCA" ["Dec31ofYear"( @"t" )] := annNVRecoverableCA;

            $ "ICS Credits.AnnualNVRecoverableAZ" ["Dec31ofYear"( @"t" )] := annNVRecoverableAZ;

            $ "ICS Credits.AnnualNVUnBankedFromCA" ["Dec31ofYear"( @"t" )] := nvUnbankedCA;

            $ "ICS Credits.AnnualNVUnbankedFromAZ" ["Dec31ofYear"( @"t" )] := nvUnbankedAZ;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{3caeca45-d10b-4123-98f1-f4aff264ea4b}";;

  END
  UUID "{3f523123-2536-4487-a732-9f06f03e16f6}";;

  POLICY_GROUP   "Lower Basin Demand Variability/ICS Creation and Delivery";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "SNWP ICS Creation and Delivery";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( ( @"t" == @"Start Timestep" OR @"t" == @"24:00:00 January Max DayOfMonth, Current Year" ) AND "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "This Rule" ) ) OR ( "GetRunCycleIndex"(  ) == 4.00000000 AND "IsMRM"(  ) AND @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND ( $ "LowerBasinDemandVariability.ScheduleCheck" ["Dec31ofYear"( @"t" )] != $ "LowerBasinDemandVariability.LowerBasinCondition" ["Dec31ofYear"( @"t" )] OR ( ( NaNToZero ( $ "Surplus.Domestic Surplus Flag" [@"24:00:00 December 31, Current Year"] ) > 0.00000000 ) OR "IsQuantifiedOrFloodControl"(  ) ) OR $ "DCP BWSCP Flags.LB DCP BWSP Check" ["Dec31ofYear"( @"t" )] != $ "DCP BWSCP Flags.LB DCP BWSP" ["Dec31ofYear"( @"t" )] ) );
    NOTES                "Sets the prliminary ICS creation and delivery volumes based on Nevada's demand and basic apporitionment during non-flood control conditions.";
    BEGIN

      BREAKPOINT BEFORE_EXEC FALSE;
    DESCRIPTION          "This rule determines Nevada ICS creation or delivery based on the annual apportionment <br>";
      WITH_STATEMENT (NUMERIC ICS = ( $ "AnnualWaterUse.NV_BasicApportionment" [] - ( $ "AnnualWaterUse.Nevada_Forecast1" [@"24:00:00 December 31, Current Year"] - $ "Nevada_CU_Forecast1.SNWP" [@"24:00:00 December 31, Current Year"] ) COMMENTED_BY "Non SNWA Water Use <br>" - IF ( $ "Shortage.Shortage Flag" [@"24:00:00 December 31, Current Year"] > 0.00000000 )
 THEN
  $ "Shortage.State Shortage Volumes" [( $ "Shortage.Shortage Flag" ["Dec31ofYear"( @"t" )] ) - 1.00000000, "Nevada"]
 ELSE
  0.00000000 "acre-ft"
 ENDIF - $ "ForecastUse.SNWPResetAnnualFC" [@"24:00:00 December Max DayOfMonth, Current Year"] * "MeadPumpingDemandVariabilityFactor"( @"24:00:00 December Max DayOfMonth, Current Year" ) ) COMMENTED_BY "Have to build diversion instead of using annual water use because SNWA can be affected by <br>demand variability <br>") DO
            $ "ICSProjectionData.AnnualICSDelivery_NV_Preliminary" [@"24:00:00 December Max DayOfMonth, Current Year"] := "MinItem"( { IF ( ( NaNToZero ( $ "Surplus.Domestic Surplus Flag" [@"24:00:00 December 31, Current Year"] ) > 0.00000000 ) )
 THEN
  "Max"( "Abs"( "Min"( ICS, 0.00000000 "acre-ft" ) ) - $ "Surplus Volume Entitlements.SNWA Domestic" ["Dec31ofYear"( @"t" )], 0.00000000 "acre-ft" ) COMMENTED_BY "If the year has domestic surplus, reduce ICS delivery by the amount of surplus entitlement for <br>SNWP<br>"
 ELSE
  "Abs"( "Min"( ICS, 0.00000000 "acre-ft" ) ) COMMENTED_BY "No surplus <br>"
 ENDIF , $ "ICS Credits.MeadBankParameters" ["Nevada", "Max Delivery"] COMMENTED_BY "Max possible delivery <br>" , IF ( "GetProjectedPoolElevation"( "Mead", @"24:00:00 December 31, Previous Year" ) > $ "DCP.RecoveryElevation" [] )
 THEN
  $ "ICS Credits.TotalICS_NV" [@"24:00:00 December 31, Previous Year"]
 ELSE
  $ "ICS Credits.TotalICS_NV" [@"24:00:00 December 31, Previous Year"] - $ "ICS Credits.DCPICS_NV" [@"24:00:00 December 31, Previous Year"]
 ENDIF COMMENTED_BY "Total available ICS to take in delivery scenario <br>" } );

            $ "ICSProjectionData.AnnualCreationEC_SNWP_Preliminary" [@"24:00:00 December Max DayOfMonth, Current Year"] := IF ( "IsQuantifiedOrFloodControl"(  ) )
 THEN
  0.00000000 "acre-ft"
 ELSE
  "MinItem"( { "Max"( ICS, 0.00000000 "acre-ft" ) , $ "ICS Credits.MeadBankParameters" ["Nevada", "Max Creation"] , "Max"( ( ( $ "ICS Credits.MeadBankParameters" ["Nevada", "Max Capacity"] - $ "ICS Credits.AnnualDeliveryEC_NV" [@"24:00:00 December Max DayOfMonth, Previous Year"] ) - ( $ "ICS Credits.Bank_NV" [@"24:00:00 December Max DayOfMonth, Previous Year"] + $ "ICS Credits.TributaryICS_NV" [@"24:00:00 December Max DayOfMonth, Previous Year"] + $ "ICS Credits.ImportedICS_NV" [@"24:00:00 December Max DayOfMonth, Previous Year"] + $ "ICS Credits.AnnualCreationBiNat_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] ) ) / "SystemTaxAdjustment_DCP"(  ) + $ "ICS Credits.AnnualDeliveryEC_NV" [@"24:00:00 December Max DayOfMonth, Previous Year"], 0.00000000 "acre-ft" ) COMMENTED_BY "Max EC ICS creation based on bank availability. ICS is not taxed if it is paid back from the <br>previous year's delivery. Max bank capacity less any delivery from previous year,  minus the <br>bank + any trib/imported ICS being converted to EC ICS + annual creation biNat (input slot) = <br>the available ICS creation that can be taxed. EC delivery amount added back in post tax <br>adjustment since any volume equal to the delivery wont be taxed.<br>" } )
 ENDIF;

      END_WITH_STATEMENT;

    END
    UUID "{5d5e351e-06c4-4fc7-995b-88253e582c4a}";;

    RULE                 "Reset Monthly Forecast SNWP LC Demand Variability";
    DESCRIPTION          "DESCRIPTION: This rule will reset the SNWP diversion request for Lower Basin Demand Variability outside of Surplus or Shortage.  If the local inflows above Hoover Dam are greater than the 90% historic local inflow volume then the pumping is reduced by 5%.  In the case that the local inflows are less than the 10% exceedence historic local inflow volume then the pumping is increased by 5%. The factor is applied to the monthly pumping requests and set by this rule. This rule also sets the data slot to show if LBDV was set for the Above Hoover local inflows in the AbvHooverTriggerSet slot. TP 7/27/2015<br><br>SLOTS SET: PumpingFromLakeMead:SNWP.Diversion Requested; PumpingFromLakeMead:SNWP.Depletion Requested; LowerBasinDemandVariability.AbvHooverTriggerSet<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( ( @"t" == @"Start Timestep" OR @"t" == @"24:00:00 January Max DayOfMonth, Current Year" ) AND "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "This Rule" ) ) OR ( "GetRunCycleIndex"(  ) == 4.00000000 AND @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND $ "LowerBasinDemandVariability.ScheduleCheck" ["Dec31ofYear"( @"t" )] != $ "LowerBasinDemandVariability.LowerBasinCondition" ["Dec31ofYear"( @"t" )] ) AND $ "LowerBasinDemandVariability.LowerBasinCondition" ["Dec31ofYear"( @"t" )] == 0.00000000 AND "IsMRM"(  ) AND $ "MTOMRunType.RunType" [] != 1.00000000;
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: TP 7/27/2015<br><br>SB 06/20/2018: Added execution constraint to simulate only in operational MTOM runs. <br>SB 07/08/2019: Updated constraints to have Run Type not equal to 1 (allows for no dependence on BHOPS during development testing). ";
    BEGIN

    DESCRIPTION          "Adjust SNWA diversion by demand variabiltiy factor <br>";
      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December Max DayOfMonth, Current Year") DO
            FOREACH (SLOT slot IN { $ "PumpingFromLakeMead:SNWP.Diversion Requested" , $ "PumpingFromLakeMead:SNWP.Depletion Requested" }) DO
            slot [date] := $ "PumpingFromLakeMead:SNWP.Diversion Requested" [date] * "MeadPumpingDemandVariabilityFactor"( date );

      ENDFOREACH;

            $ "LowerBasinDemandVariability.AbvHooverTriggerSet" ["Dec31ofYear"( date )] := IF ( "MeadPumpingDemandVariabilityFactor"( date ) == 1.00000000 )
 THEN
  0.00000000
 ELSE
  IF ( "MeadPumpingDemandVariabilityFactor"( date ) == 0.95000000 )
  THEN
   1.00000000
  ELSE
   - 1.00000000
  ENDIF
 ENDIF;

      ENDFOREACH;

    END
    UUID "{a37cf253-5fbe-4866-b617-27f9e52d0419}";;

    RULE                 "MWD ICS Creation and Delivery";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( ( @"t" == @"Start Timestep" OR @"t" == @"24:00:00 January Max DayOfMonth, Current Year" ) AND "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "This Rule" ) ) OR ( "GetRunCycleIndex"(  ) == 4.00000000 AND "IsMRM"(  ) AND @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND ( $ "LowerBasinDemandVariability.ScheduleCheck" ["Dec31ofYear"( @"t" )] != $ "LowerBasinDemandVariability.LowerBasinCondition" ["Dec31ofYear"( @"t" )] OR ( ( NaNToZero ( $ "Surplus.Domestic Surplus Flag" [@"24:00:00 December 31, Current Year"] ) > 0.00000000 ) OR "IsQuantifiedOrFloodControl"(  ) ) OR $ "DCP BWSCP Flags.LB DCP BWSP Check" ["Dec31ofYear"( @"t" )] != $ "DCP BWSCP Flags.LB DCP BWSP" ["Dec31ofYear"( @"t" )] ) );
    NOTES                "GCAA, 20200330: Updated rule to constrain MWD's ICS delivery by the normal operational maximum (1.2 maf) in non-surplus years and annual canal capacity (1.25 maf) if in surplus years";
    BEGIN

      IF_STATEMENT (@"t" >= @"24:00:00 April 30, Start Year" AND @"t" <= @"24:00:00 December 31, Start Year" OR NOT "IsMRM"(  )) THEN
          DESCRIPTION          "If after April till December of start year or not an MRM run, use default values passed from 24 MS <br>else do logic below <br>";
      $ "ICSProjectionData.AnnualCreationEC_MWD_Preliminary" ["Dec31ofYear"( @"t" )] := $ "ICSProjectionData.AnnualCreationEC_MWD_Default" ["Dec31ofYear"( @"t" )];

            $ "ICSProjectionData.AnnualICSDelivery_MWD_Preliminary" ["Dec31ofYear"( @"t" )] := $ "ICSProjectionData.AnnualDeliveryBiNat_MWD_Default" ["Dec31ofYear"( @"t" )] + $ "ICSProjectionData.AnnualDeliverySysEff_MWD_Default" ["Dec31ofYear"( @"t" )] + $ "ICSProjectionData.AnnualDeliveryEC_MWD_Default" ["Dec31ofYear"( @"t" )];

      ELSE
            WITH_STATEMENT (LIST IIDAccounting = "ICSAccountingForIID"(  )) DO
            $ "ICSProjectionData.AnnualICSDelivery_MWD_Preliminary" ["Dec31ofYear"( @"t" )] := "MinItem"( { IF ( ( NaNToZero ( $ "Surplus.Domestic Surplus Flag" [@"24:00:00 December Max DayOfMonth, Current Year"] ) > 0.00000000 ) COMMENTED_BY "If the year has domestic surplus, reduce the ICS Delivery by the amount of <br>Domestic surplus entitlement for MWD. TP 12/18/2017 <br>" )
 THEN
  "Max"( ( $ "ICS Credits.MWDICS_AnnualRequestedPutTake" [NaNToZero ( $ "ICS Credits.SacWYType" [@"24:00:00 December Max DayOfMonth, Current Year"] ) - 1.00000000, "Take Step 1"] - $ "Surplus Volume Entitlements.MWD Domestic" ["Dec31ofYear"( @"t" )] ), 0.00000000 "acre-ft" )
 ELSE
  $ "ICS Credits.MWDICS_AnnualRequestedPutTake" [NaNToZero ( $ "ICS Credits.SacWYType" [@"24:00:00 December Max DayOfMonth, Current Year"] ) - 1.00000000, "Take Step 1"] COMMENTED_BY "Not Surplus or Shortage <br>"
 ENDIF , IF ( "GetProjectedPoolElevation"( "Mead", @"24:00:00 December 31, Previous Year" ) <= $ "Surplus.Domestic Surplus Trigger Elevation" [] )
 THEN
  $ "AnnualWaterUse.MWD_NormalOpMax" [] - "SumFlowsToVolume"( $ "MWDDiversion:MWD.Depletion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" )
 ELSE
  $ "AnnualWaterUse.MWDCanal_AnnualCapacity" [] - "SumFlowsToVolume"( $ "MWDDiversion:MWD.Depletion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" )
 ENDIF COMMENTED_BY "MWD at full ditch (Conveyance Capacity)<br>" , "Min"( ( $ "ICS Credits.MeadBankParameters" ["California", "Max Delivery"] - ( ( GET @INDEX 0.00000000 FROM IIDAccounting ) + GET @INDEX 1.00000000 FROM IIDAccounting ) ) COMMENTED_BY "Available ICS delivery amount left for MWD based on other user delivery in CA <br>", IF ( "GetProjectedPoolElevation"( "Mead", @"24:00:00 December Max DayOfMonth, Previous Year" ) > $ "DCP.RecoveryElevation" [] )
 THEN
  $ "ICS Credits.TotalICS_MWD" [@"24:00:00 December Max DayOfMonth, Previous Year"]
 ELSE
  $ "ICS Credits.TotalICS_MWD" [@"24:00:00 December Max DayOfMonth, Previous Year"] - $ "ICS Credits.DCPICS_MWD" [@"24:00:00 December Max DayOfMonth, Previous Year"]
 ENDIF COMMENTED_BY "Make sure the amount of Delivery taken is within the MWD ICS bank or below the Maximum Take <br>that MWD can have. TP 12/18/2017<br><br>Total available ICS for delivery. EC ICS creation and delivery are mutually exclusive (either <br>create or deliver, not both). Max available ICS now limited based on recovery elevation for DCP <br>AP 11/19/19    <br>" ) COMMENTED_BY "Available ICS Water <br>" } );

            $ "ICSProjectionData.AnnualCreationEC_MWD_Preliminary" ["Dec31ofYear"( @"t" )] := IF ( ( ( NaNToZero ( $ "Surplus.Domestic Surplus Flag" [@"24:00:00 December 31, Current Year"] ) > 0.00000000 ) OR "IsQuantifiedOrFloodControl"(  ) ) COMMENTED_BY "If a Quantified Surplus Year, a Flood Control Year, or if the run is a deterministic Min, Max or <br>Most run, do not Create any ICS TP 12/18/2017, updated for DCP AP 10/21/19<br>" )
 THEN
  0.00000000 "acre-ft"
 ELSE
  "MinItem"( { $ "ICS Credits.MWDICS_AnnualRequestedPutTake" [NaNToZero ( $ "ICS Credits.SacWYType" [@"24:00:00 December Max DayOfMonth, Current Year"] ) - 1.00000000, "Put Step 1"] COMMENTED_BY "Annual Max <br>" , "Max"( ( ( ( ( $ "ICS Credits.MeadBankParameters" ["MWD", "Max Capacity"] - $ "ICS Credits.AnnualDeliveryEC_MWD" [@"24:00:00 December Max DayOfMonth, Previous Year"] ) - ( $ "ICS Credits.Bank_MWD" [@"24:00:00 December Max DayOfMonth, Previous Year"] + $ "ICS Credits.AnnualCreationBiNat_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] ) ) / "SystemTaxAdjustment_DCP"(  ) ) COMMENTED_BY "Taxable ICS creation space <br>" + $ "ICS Credits.AnnualDeliveryEC_MWD" [@"24:00:00 December Max DayOfMonth, Previous Year"] COMMENTED_BY "Non Taxable ICS creation space. If EC delivery is paid back the following year, creation amount <br>equal to said delivery is not taxed   <br>" ), 0.00000000 "acre-ft" ) COMMENTED_BY "Bank space <br>" , ( $ "ICS Credits.MeadBankParameters" ["California", "Max Creation"] - GET @INDEX 2.00000000 FROM IIDAccounting ) COMMENTED_BY "Maximum Creation of MWD ICS <br>" , "Max"( "SumFlowsToVolume"( $ "MWDDiversion:MWD.Diversion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) - $ "AnnualWaterUse.MWDMinimumAnnualDelivery" [], 0.00000000 "acre-ft" ) COMMENTED_BY "Difference between Diversion Requests and Minimum Required MWD Delivery <br>" } )
 ENDIF;

      END_WITH_STATEMENT;

      END_IF_STATEMENT;

    END
    UUID "{c16ff88f-1baa-46a3-9410-6ba82373f4a6}";;

    RULE                 "AZ Annual ICS Delivery";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( ( @"t" == @"Start Timestep" OR @"t" == @"24:00:00 January Max DayOfMonth, Current Year" ) AND "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "This Rule" ) ) OR ( "GetRunCycleIndex"(  ) == 4.00000000 AND "IsMRM"(  ) AND @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND ( $ "LowerBasinDemandVariability.ScheduleCheck" ["Dec31ofYear"( @"t" )] != $ "LowerBasinDemandVariability.LowerBasinCondition" ["Dec31ofYear"( @"t" )] OR ( ( NaNToZero ( $ "Surplus.Domestic Surplus Flag" [@"24:00:00 December 31, Current Year"] ) > 0.00000000 ) OR "IsQuantifiedOrFloodControl"(  ) ) OR $ "DCP BWSCP Flags.LB DCP BWSP Check" ["Dec31ofYear"( @"t" )] != $ "DCP BWSCP Flags.LB DCP BWSP" ["Dec31ofYear"( @"t" )] ) );
    NOTES                "";
    BEGIN

      IF_STATEMENT (@"t" >= @"24:00:00 April 30, Start Year" AND @"t" <= @"24:00:00 December 31, Start Year" OR NOT "IsMRM"(  )) THEN
          DESCRIPTION          "If after April but before December in start year or not a MRM run, use the default value passed <br>from the 24 MS, else do logic below  <br>";
      $ "ICSProjectionData.AnnualICSDelivery_CAWCD_Preliminary" [@"24:00:00 December Max DayOfMonth, Current Year"] := $ "ICSProjectionData.AnnualICSDelivery_CAWCD_Default" [@"24:00:00 December Max DayOfMonth, Current Year"];

      ELSE
            WITH_STATEMENT (NUMERIC AnnualICSDelivery = ( $ "ICSProjectionData.AnnualICSDelivery_CAWCD_Default" [@"24:00:00 December Max DayOfMonth, Current Year"] + "CAWCD Mitigation Water"(  ) + "CAWCD DCP ICS Delivery"(  ) + "CAWCD Post 2026 ICS Delivery"(  ) ) COMMENTED_BY "Determine Annual ICS delivery volume using default value from 24 MS  and functions for any <br>extra needed based on logic <br>") DO
            WITH_STATEMENT (NUMERIC NonCAPICSDelivery = ( $ "ICS Credits.AnnualDeliveryEC_CRIT" [@"24:00:00 December Max DayOfMonth, Current Year"] + $ "ICS Credits.AnnualDeliveryEC_GRIC" [@"24:00:00 December Max DayOfMonth, Current Year"] + $ "ICS Credits.AnnualDeliveryEC_MVIDD" [@"24:00:00 December Max DayOfMonth, Current Year"] + $ "ICS Credits.AnnualDeliveryEC_WM" [@"24:00:00 December Max DayOfMonth, Current Year"] ) COMMENTED_BY "Sum of non CAP ICS delivery for AZ. All inputs from 24MS, no delivery logic for other entities as <br>of 1/28/20 <br>") DO
            $ "ICSProjectionData.AnnualICSDelivery_CAWCD_Preliminary" [@"24:00:00 December Max DayOfMonth, Current Year"] := "MinItem"( { AnnualICSDelivery COMMENTED_BY "Annual ICS delivery calculated based on functions + value passed from 24MS <br>" , "CAWCD Available Canal Space"(  ) COMMENTED_BY "CAP at full ditch (Conveyance Capacity)<br>" , "Min"( ( $ "ICS Credits.MeadBankParameters" ["Arizona", "Max Delivery"] - NonCAPICSDelivery ) COMMENTED_BY "Available ICS delivery volume in AZ left for CAWCD based on state volume less other users <br>", IF ( "GetProjectedPoolElevation"( "Mead", @"24:00:00 December 31, Previous Year" ) > $ "DCP.RecoveryElevation" [] )
 THEN
  $ "ICS Credits.TotalICS_CAWCD" [@"24:00:00 December 31, Previous Year"]
 ELSE
  $ "ICS Credits.TotalICS_CAWCD" [@"24:00:00 December 31, Previous Year"] - $ "ICS Credits.DCPICS_CAWCD" [@"24:00:00 December 31, Previous Year"]
 ENDIF COMMENTED_BY "Available ICS for delivery. EC ICS creation and delivery are mutually exclusive (either create or <br>deliver, not both). Max available ICS now limited based on recovery elevation for DCP AP <br>11/19/19     <br>" ) } );

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_IF_STATEMENT;

    END
    UUID "{ff4606ef-0ef2-43e0-bcdf-caaa1f19fbc4}";;

    RULE                 "LB_ScheduleReset";
    DESCRIPTION          "9/18/2018, AP: This rule resets lower basin water user diversion when the lower basin condition switches between run cycles 3 and 4 (from either shortage/surplus to normal operating condition). ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( "GetRunCycleIndex"(  ) == 4.00000000 AND @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND $ "LowerBasinDemandVariability.ScheduleCheck" ["Dec31ofYear"( @"t" )] != $ "LowerBasinDemandVariability.LowerBasinCondition" ["Dec31ofYear"( @"t" )] ) AND "IsMRM"(  ) AND $ "MTOMRunType.RunType" [] != 1.00000000 AND $ "LowerBasinDemandVariability.LowerBasinCondition" ["Dec31ofYear"( @"t" )] == 0.00000000;
    NOTES                "9/18/2018, AP: The rule needs to be cleaned up at a later date when all CU_schedules slots have the same name as the diversion requested slots.<br>SB 07/08/2019: Updated constraints to have Run Type not equal to 1 (allows for no dependence on BHOPS during development testing). ";
    BEGIN

      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December Max DayOfMonth, Current Year") DO
          DESCRIPTION          "For statement resets LB_SchedCheck (non JP user and mexico) subbasin when LB condition <br>switches between run cycles   <br>";
      FOREACH (OBJECT user IN "ListSubbasin"( "LB_SchedCheck" )) DO
          DESCRIPTION          "Resets LB_SchedCheck subbasin members when LB condition switches from shortage(1) to normal <br>(0) condtions between RC3 and RC4    <br>";
      IF_STATEMENT ($ "LowerBasinDemandVariability.ScheduleCheck" ["Dec31ofYear"( @"t" )] == 1.00000000) THEN
            IF_STATEMENT (user == % "GilaAndYumaUsers:GilaMonsterFarms") THEN
            $ "GilaAndYumaUsers:GilaMonsterFarms.Diversion Requested" [date] := "VolumeToFlow"( $ "Arizona_CU_Schedules.Gila Monster Farms" [date], date );

      ELSE
            user & "Diversion Requested" [date] := "VolumeToFlow"( % "Arizona_CU_Schedules" & "GetElementName"( user ) [date], date );

      END_IF_STATEMENT
      ELSEIF_COND ( user == % "AzPkrToImp:Parker" )
      ELSEIF_CLAUSE
            $ "AzPkrToImp:Parker.Diversion Requested" [date] := "VolumeToFlow"( $ "Arizona_CU_Schedules.City of Parker" [date], date );
      END_ELSEIF
      ELSEIF_COND ( user == % "GilaAndYumaUsers:CocopahIndRes" )
      ELSEIF_CLAUSE
            $ "GilaAndYumaUsers:CocopahIndRes.Diversion Requested" [date] := "VolumeToFlow"( $ "Arizona_CU_Schedules.Cocopah Indian Res" [date], date );
      END_ELSEIF;

      END_IF_STATEMENT;

          DESCRIPTION          "Resets Users in LB_SchedCheck subbasin with surplus entitlement if there is a switch between <br>RC3 and RC4<br>";
      IF_STATEMENT ($ "LowerBasinDemandVariability.ScheduleCheck" ["Dec31ofYear"( @"t" )] == 2.00000000) THEN
            IF_STATEMENT (user == % "GilaAndYumaUsers:GilaMonsterFarms") THEN
            $ "GilaAndYumaUsers:GilaMonsterFarms.Diversion Requested" [date] := "VolumeToFlow"( $ "Arizona_CU_Schedules.Gila Monster Farms" [date], date );

      END_IF_STATEMENT;

            IF_STATEMENT (user == % "OthersBlwImp:AzPumpersBlwImp") THEN
            $ "OthersBlwImp:AzPumpersBlwImp.Diversion Requested" [date] := "VolumeToFlow"( $ "Arizona_CU_Schedules.AzPumpersBlwImp" [date], date );

      END_IF_STATEMENT;

      END_IF_STATEMENT;

      ENDFOREACH;

          DESCRIPTION          "Resets MWD diversion and depletion in model when switching from suplus to normal condition<br>";
      IF_STATEMENT ($ "LowerBasinDemandVariability.ScheduleCheck" ["Dec31ofYear"( @"t" )] == 2.00000000) THEN
            WITH_STATEMENT (NUMERIC mwdDepletionAmount = "MWD_Outyear_Schedules"( date )) DO
            $ "MWDDiversion:MWD.Depletion Requested" [date] := mwdDepletionAmount;

            $ "MWDDiversion:MWD.Diversion Requested" [date] := mwdDepletionAmount + "VolumeToFlow"( $ "California_CU_Schedules.MWDReturns" [date], date );

      END_WITH_STATEMENT;

      END_IF_STATEMENT;

          DESCRIPTION          "This resets SNWP, CAP, and Mexico if the lower basin operating condition switches for shortage <br>or surplus to normal operating cindtions between run cycles    <br>";
      FOREACH (SLOT slot IN { $ "PumpingFromLakeMead:SNWP.Diversion Requested" , $ "PumpingFromLakeMead:SNWP.Depletion Requested" , $ "CAPDiversion.Total Diversion Requested" , $ "MexicanTreatyDelivery:MexicoSched.Diversion Requested" }) DO
            slot [date] := IF ( slot == $ "CAPDiversion.Total Diversion Requested" )
 THEN
  "CAP_Outyear_Schedules"( date )
 ELSE
  "SNWP_Schedules"( date )
 ENDIF
 ELSEIF_COND ( slot == $ "MexicanTreatyDelivery:MexicoSched.Diversion Requested" )
 ELSEIF_CLAUSE ( "VolumeToFlow"( $ "Mexico_CU_Schedules.MexicoSched" [date] - $ "Mexico_CU_Schedules.MexicoTJ" [date], date ) )
 END_ELSEIF;

      ENDFOREACH;

      ENDFOREACH;

    END
    UUID "{cfa6afbc-e22d-4a75-8570-036ac0c0da10}";;

  END
  UUID "{7d23b72b-fd8b-40be-8e47-056a0c6b9de8}";;

  POLICY_GROUP   "LB Surplus";
  DESCRIPTION    "This policy group contains the rules required to simulate Lower Basin Surplus operations. Lower Basin Surplus operations are based on the 2007 Interim Guidelines as well as IBWC Minute 323. Surplus volume entitlements are based on contracts between Reclamation and the various water users, as well as the 2007 Interim Guidelines and Minute 323.";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Quantified Surplus Schedules Data Volume to Simulation Flow";
    DESCRIPTION          "DESCRIPTION: This rule converts volumes allowed under Quantified Surplus into monthly flow rates and sets associated slots. Surplus flags and LBDV.AbvHooverTriggerSet flag are also set in this rule.<br><br>SLOTS SET: Surplus.Surplus Flag; Surplus.Quantified Surplus Flag; LowerBasinDemandVariability.AbvHooverTriggerSet; PumpingFromLakeMead:SNWP.Diversion Requested; MWDDiversion:MWD.Diversion Requested; MWDDiversion:MWD.Depletion Requested; GilaAndYumaUsers:GilaMonsterFarms.Diversion Requested; OthersBlwImp:AzPumpersBlwImp.Diversion Requested; CAPDiversion.Total Diversion Requested; AAC.Coachella.Diversion Requested; AAC:IID.Diversion Requested; AzPkrToImp:CibolaValleyIID.Diversion Requested; AzPkrToImp:Parker.Diversion Requested<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) >= 3.00000000 AND @"t" == @"24:00:00 January 31, Current Year" AND $ "Surplus.Quantified Surplus Volume" [@"24:00:00 December 31, Current Year"] > 0.00000000 "acre-feet";
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br><br>MC, 20170706: Moved the setting of Surplus.Surplus Flag and Surplus.Quantified Surplus Flag slots to new rule Set Quantified Surplus Flag; removed IsNaN Surplus.Surplus Flag[] execution constraint from this rule";
    BEGIN

      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
          INACTIVE      $ "Surplus.Surplus Flag" [date] := 2.00000000;

          INACTIVE      $ "Surplus.Quantified Surplus Flag" [date] := 1.00000000;

          INACTIVE      $ "LowerBasinDemandVariability.AbvHooverTriggerSet" ["Dec31ofYear"( date )] := 2.00000000;

          INACTIVE      $ "LowerBasinDemandVariability.BlwParkerTriggerSet" ["Dec31ofYear"( date )] := 2.00000000;

            $ "PumpingFromLakeMead:SNWP.Diversion Requested" [date] := IF ( $ "Surplus Total Annual Schedules.SNWA" [@"24:00:00 December 31, Current Year"] > "SumAnnualSNWADivRequest"(  ) )
 THEN
  "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "SNWA" ), date )
 ENDIF;

            $ "PumpingFromLakeMead:SNWP.Depletion Requested" [date] := IF ( $ "Surplus Total Annual Schedules.SNWA" [@"24:00:00 December 31, Current Year"] > "SumAnnualSNWADivRequest"(  ) )
 THEN
  "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "SNWA" ), date )
 ENDIF;

            $ "MWDDiversion:MWD.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "MWD" ), date );

            $ "MWDDiversion:MWD.Depletion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "MWD" ), date ) - "VolumeToFlow"( $ "California_CU_Schedules.MWDReturns" [date], date );

            $ "AAC:Coachella.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "Coachella" ), date );

            $ "AAC:IID.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "IID" ), date );

            $ "OthersBlwImp:AzPumpersBlwImp.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "AzPumpersBlwImp" ), date );

            $ "GilaAndYumaUsers:GilaMonsterFarms.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "Gila Monster Farms" ), date );

            $ "AzPkrToImp:CibolaValleyIID.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "CibolaValleyIID" ), date );

            $ "AzPkrToImp:Parker.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "City of Parker" ), date );

            $ "CAPDiversion.Total Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "CAP" ), date );

      ENDFOREACH;

    END
    UUID "{9892870c-49e3-4be0-a878-a66a6b9c2981}";;

    RULE                 "Domestic Surplus Schedules Data Volume to Simulation Flow";
    DESCRIPTION          "DESCRIPTION: This rule converts volumes allowed under Domestic Surplus into monthly flow rates and sets associated slots. Surplus flags and LBDV.AbvHooverTriggerSet flag are also set in this rule.<br><br>SLOTS SET: Surplus.Surplus Flag; Surplus.Domestic Surplus Flag; LowerBasinDemandVariability.AbvHooverTriggerSet; PumpingFromLakeMead:SNWP.Diversion Requested; MWDDiversion:MWD.Diversion Requested; MWDDiversion:MWD.Depletion Requested; GilaAndYumaUsers:GilaMonsterFarms.Diversion Requested; OthersBlwImp:AzPumpersBlwImp.Diversion Requested; CAPDiversion.Total Diversion Requested<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) >= 3.00000000 AND "GetProjectedPoolElevation"( "Mead", @"24:00:00 December 31, Previous Year" ) >= $ "Surplus.Domestic Surplus Trigger Elevation" [];
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br><br>MC, 20170706: Moved the setting of Surplus.Surplus Flag and Surplus.Domestic Surplus Flag slots to new rule Set Domestic Surplus Flag; removed IsNaN Surplus.Surplus Flag[] execution constraint from this rule<br>S.Baker, 09/25/2018: Changed the Mead.Pool Elevation input to function GetProjectedPoolElevation() function instead of looking at Mead.Pool Elevation. This will allow MTOM to determine which Mead PE projection to use (ie. AugEOYProjectedMeadPool elevation). ";
    BEGIN

      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
          INACTIVE      $ "Surplus.Surplus Flag" [date] := 1.00000000;

          INACTIVE      $ "Surplus.Domestic Surplus Flag" [date] := 1.00000000;

          INACTIVE      $ "LowerBasinDemandVariability.AbvHooverTriggerSet" ["Dec31ofYear"( date )] := 2.00000000;

          INACTIVE      $ "LowerBasinDemandVariability.BlwParkerTriggerSet" ["Dec31ofYear"( date )] := 2.00000000;

            $ "PumpingFromLakeMead:SNWP.Diversion Requested" [date] := IF ( $ "Surplus Total Annual Schedules.SNWA" [@"24:00:00 December 31, Current Year"] > "SumAnnualSNWADivRequest"(  ) )
 THEN
  "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "SNWA" ), date )
 ENDIF;

            $ "PumpingFromLakeMead:SNWP.Depletion Requested" [date] := IF ( $ "Surplus Total Annual Schedules.SNWA" [@"24:00:00 December 31, Current Year"] > "SumAnnualSNWADivRequest"(  ) )
 THEN
  "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "SNWA" ), date )
 ENDIF;

            $ "MWDDiversion:MWD.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "MWD" ), date );

            $ "MWDDiversion:MWD.Depletion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "MWD" ), date ) - "VolumeToFlow"( $ "California_CU_Schedules.MWDReturns" [date], date );

            $ "GilaAndYumaUsers:GilaMonsterFarms.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "Gila Monster Farms" ), date );

            $ "OthersBlwImp:AzPumpersBlwImp.Diversion Requested" [date] := "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "AzPumpersBlwImp" ), date );

            $ "CAPDiversion.Total Diversion Requested" [date] := IF ( $ "Surplus Total Annual Schedules.CAP" [@"24:00:00 December 31, Current Year"] > "SumAnnualCAPDivRequest"(  ) )
 THEN
  "VolumeToFlow"( "Set Monthly Surplus Schedule"( date, "CAP" ), date )
 ENDIF;

      ENDFOREACH;

    END
    UUID "{31928722-6d2a-45c1-8fa7-5172286d140a}";;

    RULE                 "Set Flood Control Surplus Schedules";
    DESCRIPTION          "DESCRIPTION: If a the Flood Control or Exclusive Space Flag is on (greater than 0) this rule will fire and set the Surplus Schedules for all water users impacted by Flood Control Surplus. The computed schedules are the Total Annual Schedules for each water user, meaning Normal and Surplus schedules.  Flood Control Surplus is in priority over Quantified Surplus Volumes. -HMG 8/2/11<br><br>SLOTS SET: Surplus Total Annual Schedules.AzPumpersBlwImp; Surplus Total Annual Schedules.CAP; Surplus Total Annual Schedules.CibolaValleyIID; Surplus Total Annual Schedules.City of Parker; Surplus Total Annual Schedules.Gila Monster Farms; Surplus Total Annual Schedules.SNWA; Surplus Total Annual Schedules.MWD; Surplus Total Annual Schedules.Coachella; Surplus Total Annual Schedules.IID; Surplus Total Annual Schedules.Needles; Surplus Total Annual Schedules.CaPumpersAbvImp; Surplus Total Annual Schedules.Mexico<br><br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT $ "FloodControlOutput.Flood Control Flag" [] > 0.00000000 OR $ "FloodControlOutput.Exclusive Space Flag" [] > 0.00000000 AND "GetRunCycleIndex"(  ) >= 3.00000000;
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: HMG, 8/2/2011<br>S.Baker 06/20/2018: Added constraint to only allow historical water use in surplus by CAP prior to 2008.<br><br>GCAA, 10302018: Replaced hardcoded values for MWDCanal_AnnualCapacity and Mexico Flood Control Delivery.  Corrected references to Forecast1 slots for CAP and SNWP to the Reset slots<br><br>GCAA, 20200330: Updated rule to allow SNWA to take DCP ICS during flood control";
    BEGIN

      $ "Surplus Total Annual Schedules.AzPumpersBlwImp" [@"24:00:00 December 31, Current Year"] := $ "Arizona_CU_Forecast1.AzPumpersBlwImp" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.AzPumpersBlwImp" [@"24:00:00 December 31, Current Year"];

      BREAKPOINT BEFORE_EXEC TRUE;
    DESCRIPTION          "Testbed Hindcast Simulation - Allow CAP to only take water up to capacity prior to 2008  <br>";
      $ "Surplus Total Annual Schedules.CAP" [@"24:00:00 December 31, Current Year"] := IF ( "GetYear"( @"24:00:00 January 31, Current Year" ) > 2008.00000000 )
 THEN
  $ "AnnualWaterUse.CAPCanal_AnnualCapacity" []
 ELSE
  $ "ForecastUse.CAPResetAnnualFC" [@"24:00:00 December 31, Current Year"]
 ENDIF;

      $ "Surplus Total Annual Schedules.CibolaValleyIID" [@"24:00:00 December 31, Current Year"] := $ "Arizona_CU_Forecast1.CibolaValleyIID" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.CibolaValleyIID" [@"24:00:00 December 31, Current Year"];

      $ "Surplus Total Annual Schedules.City of Parker" [@"24:00:00 December 31, Current Year"] := $ "Arizona_CU_Forecast1.City of Parker" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.City of Parker" [@"24:00:00 December 31, Current Year"];

      $ "Surplus Total Annual Schedules.Gila Monster Farms" [@"24:00:00 December 31, Current Year"] := $ "Arizona_CU_Forecast1.Gila Monster Farms" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.Gila Monster Farms" [@"24:00:00 December 31, Current Year"];

      BREAKPOINT BEFORE_EXEC TRUE;
      $ "Surplus Total Annual Schedules.SNWA" [@"24:00:00 December 31, Current Year"] := $ "ForecastUse.SNWPResetAnnualFC" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.SNWA FC" [@"24:00:00 December 31, Current Year"] + ( ( $ "ICS Credits.AnnualCreationTrib_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] + $ "ICS Credits.AnnualCreationImp_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] ) * "SystemTaxAdjustment_DCP"(  ) + $ "ICS Credits.DCPICS_NV" [@"24:00:00 December 31, Previous Year"] );

      $ "Surplus Total Annual Schedules.MWD" [@"24:00:00 December 31, Current Year"] := $ "AnnualWaterUse.MWDCanal_AnnualCapacity" [];

      $ "Surplus Total Annual Schedules.Coachella" [@"24:00:00 December 31, Current Year"] := ( $ "California_CU_Forecast1.Coachella" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.CA Ag" [@"24:00:00 December 31, Current Year"] * $ "Surplus.Share of CA Ag Surplus" [0.00000000, 0.00000000] + 100000.00000000 "acre-ft" ) COMMENTED_BY "100 KAF comes from Coachella surplus contract <br>";

      BREAKPOINT BEFORE_EXEC FALSE;
      $ "Surplus Total Annual Schedules.IID" [@"24:00:00 December 31, Current Year"] := $ "California_CU_Forecast1.IID" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.CA Ag" [@"24:00:00 December 31, Current Year"] * $ "Surplus.Share of CA Ag Surplus" [0.00000000, 1.00000000];

      $ "Surplus Total Annual Schedules.Needles" [@"24:00:00 December 31, Current Year"] := $ "California_CU_Forecast1.Needles" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.Needles" [@"24:00:00 December 31, Current Year"];

      $ "Surplus Total Annual Schedules.CaPumpersAbvImp" [@"24:00:00 December 31, Current Year"] := $ "California_CU_Forecast1.CaPumpersAbvImp" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.CaPumpersAbvImp" [@"24:00:00 December 31, Current Year"];

      $ "Surplus Total Annual Schedules.Mexico" [@"24:00:00 December 31, Current Year"] := $ "Mexico Shortage and Surplus.Mexico Flood Control Delivery" [];

    END
    UUID "{9d2289ac-3985-4175-a06c-3adeab09ca45}";;

    RULE                 "Set Quantified Surplus Schedules";
    DESCRIPTION          "DESCRIPTION: If there is a positive Quantified Surplus Volume this rule will fire and set the Total Annual Schedules for all water Users Impacted by Quantified Surplus. The Total Annual Schedules include both the Normal and Surplus Schedules. Rule fires only once per year during January. Quantified Surplus is higher in priority than Domestic Surplus, but lower in priority than Flood Control Surplus. Therefore, this rule will override any Domestic Surplus Schedules, but may then be overriden by Flood Control Surplus Schedules if a Flood Control Surplus exists. -HMG 8/2/11<br><br>SLOTS SET: Surplus Total Annual Schedules.MWD; Surplus Total Annual Schedules.Coachella; Surplus Total Annual Schedules.IID; Surplus Total Annual Schedules.AzPumpersBlwImp; Surplus Total Annual Schedules.Gila Monster Farms; Surplus Total Annual Schedules.City of Parker; Surplus Total Annual Schedules.CibolaValleyIID; Surplus Total Annual Schedules.CAP; Surplus Total Annual Schedules.SNWA<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) >= 3.00000000 AND $ "Surplus.Quantified Surplus Volume" [@"24:00:00 December 31, Current Year"] > 0.00000000 "acre-feet" AND @"t" == @"24:00:00 January 31, Current Year";
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: HMG, 8/2/11<br><br>GCAA, 20181030: Corrected reference to the Forecast1 SNWP slot to the SNWPResetAnnualFC slot.  Removed &quot;- Minute 323&quot; from rule name.<br><br>GCAA, 20200330: Updated execution constraint to only fire on Jan 31, Current year. Updated rule to allow SNWA to take DCP ICS during a quantified surplus.";
    BEGIN

      BREAKPOINT BEFORE_EXEC FALSE;
      $ "Surplus Total Annual Schedules.MWD" [@"24:00:00 December 31, Current Year"] := $ "ForecastUse.MWDResetAnnualFC" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.MWD Quantified" [@"24:00:00 December 31, Current Year"];

      $ "Surplus Total Annual Schedules.Coachella" [@"24:00:00 December 31, Current Year"] := IF ( $ "Surplus.California Quantified Surplus Volume" [@"24:00:00 December 31, Current Year"] > $ "Surplus Volume Entitlements.MWD Quantified" [@"24:00:00 December 31, Current Year"] )
 THEN
  $ "California_CU_Forecast1.Coachella" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.CA Ag" [@"24:00:00 December 31, Current Year"] * $ "Surplus.Share of CA Ag Surplus" [0.00000000, 0.00000000]
 ELSE
  $ "California_CU_Forecast1.Coachella" [@"24:00:00 December 31, Current Year"]
 ENDIF;

      $ "Surplus Total Annual Schedules.IID" [@"24:00:00 December 31, Current Year"] := IF ( $ "Surplus.California Quantified Surplus Volume" [@"24:00:00 December 31, Current Year"] > $ "Surplus Volume Entitlements.MWD Quantified" [@"24:00:00 December 31, Current Year"] )
 THEN
  $ "California_CU_Forecast1.IID" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.CA Ag" [@"24:00:00 December 31, Current Year"] * $ "Surplus.Share of CA Ag Surplus" [0.00000000, 1.00000000]
 ELSE
  $ "California_CU_Forecast1.IID" [@"24:00:00 December 31, Current Year"]
 ENDIF;

      $ "Surplus Total Annual Schedules.AzPumpersBlwImp" [@"24:00:00 December 31, Current Year"] := $ "Arizona_CU_Forecast1.AzPumpersBlwImp" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.AzPumpersBlwImp" [@"24:00:00 December 31, Current Year"];

      $ "Surplus Total Annual Schedules.Gila Monster Farms" [@"24:00:00 December 31, Current Year"] := $ "Arizona_CU_Forecast1.Gila Monster Farms" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.Gila Monster Farms" [@"24:00:00 December 31, Current Year"];

      $ "Surplus Total Annual Schedules.City of Parker" [@"24:00:00 December 31, Current Year"] := $ "Arizona_CU_Forecast1.City of Parker" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.City of Parker" [@"24:00:00 December 31, Current Year"];

      $ "Surplus Total Annual Schedules.CibolaValleyIID" [@"24:00:00 December 31, Current Year"] := $ "Arizona_CU_Forecast1.CibolaValleyIID" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.CibolaValleyIID" [@"24:00:00 December 31, Current Year"];

    INACTIVE      $ "Surplus Total Annual Schedules.CAP" [@"24:00:00 December 31, Current Year"] := 1835000.00000000 "acre-ft" COMMENTED_BY "<assumes CAP will take a full ditch even lacking full surplus volume for interstate banking. Surplus Volume Entitlement contains actual CAP quantified surplus volume>";

      $ "Surplus Total Annual Schedules.CAP" [@"24:00:00 December 31, Current Year"] := ( $ "ForecastUse.CAPResetAnnualFC" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.CAP Quantified" [@"24:00:00 December 31, Current Year"] ) COMMENTED_BY "CAP Diversion Request plus Quantified CAP entitlement plus ICS Available";

      $ "Surplus Total Annual Schedules.SNWA" [@"24:00:00 December 31, Current Year"] := $ "ForecastUse.SNWPResetAnnualFC" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.SNWA Quantified" [@"24:00:00 December 31, Current Year"] + ( ( $ "ICS Credits.AnnualCreationTrib_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] + $ "ICS Credits.AnnualCreationImp_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] ) * "SystemTaxAdjustment_DCP"(  ) + $ "ICS Credits.DCPICS_NV" [@"24:00:00 December 31, Previous Year"] );

    END
    UUID "{e12f7e26-7b0d-4a0b-8ca3-55b0125684cf}";;

    RULE                 "Set Domestic Surplus Schedules";
    DESCRIPTION          "DESCRIPTION: If a Domestic Surplus exists, meaning that Mead's Pool Elevation is greater than the Domestic Surplus Trigger, then this rule will fire in January of the Current Year and set the Total Annual Schedules for all water users impacted by Domestic Surplus. Domestic Surplus is the lowest priority surplus, meaning that a Quantified or Flood Control Surplus will override these values.  -HMG 8/2/11<br><br>SLOTS SET: Surplus Total Annual Schedules.SNWA; Surplus Total Annual Schedules.MWD; Surplus Total Annual Schedules.Gila Monster Farms; Surplus Total Annual Schedules.AzPumpersBlwImp; Surplus Total Annual Schedules.CAP<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetProjectedPoolElevation"( "Mead", @"24:00:00 December 31, Previous Year" ) >= $ "Surplus.Domestic Surplus Trigger Elevation" [] AND @"t" == @"24:00:00 January 31, Current Year" AND "GetRunCycleIndex"(  ) >= 3.00000000;
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br>MC, 20170512: No execution constraint that forces execution in January (i.e., could happen in Start Timestep or any timestep)?<br>S.Baker, 09/25/2018: Changed the Mead.Pool Elevation input to function GetProjectedPoolElevation() function instead of looking at Mead.Pool Elevation. This will allow MTOM to determine which Mead PE projection to use (ie. AugEOYProjectedMeadPool elevation). <br><br>GCAA, 20181030: Changed reference from the Forecast1 slots to ResetAnnualFC slots and replaced hardcoded MWD annual canal capacity with the MWDCanal_AnnualCapacity slot. Removed &quot;- Minute 323&quot; from rule name.<br><br>GCAA, 20200330: Updated execution constraint to only fire on Jan 31, Current yea in the third run cycle. Updated rule to allow SNWA to take DCP ICS if their demand is greater than the basic apportionment";
    BEGIN

      BREAKPOINT BEFORE_EXEC FALSE;
      $ "Surplus Total Annual Schedules.SNWA" [@"24:00:00 December 31, Current Year"] := $ "AnnualWaterUse.Nevada_Apportionment" [@"24:00:00 December 31, Current Year"] + "Min"( $ "ICS Credits.TotalICS_NV" [@"24:00:00 December 31, Previous Year"] + $ "Surplus Volume Entitlements.SNWA Domestic" [@"24:00:00 December 31, Current Year"], "Max"( $ "ForecastUse.SNWPResetAnnualFC" [@"24:00:00 December 31, Current Year"] - $ "AnnualWaterUse.NV_BasicApportionment" [], 0.00000000 "acre-ft" ) );

      $ "Surplus Total Annual Schedules.MWD" [@"24:00:00 December 31, Current Year"] := "Min"( $ "ForecastUse.MWDResetAnnualFC" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.MWD Domestic" [@"24:00:00 December 31, Current Year"] - $ "Mexico_CU_Forecast1.MexicoTJ" [@"24:00:00 December 31, Current Year"], $ "AnnualWaterUse.MWDCanal_AnnualCapacity" [] - $ "Mexico_CU_Forecast1.MexicoTJ" [@"24:00:00 December 31, Current Year"] );

      $ "Surplus Total Annual Schedules.Gila Monster Farms" [@"24:00:00 December 31, Current Year"] := $ "Arizona_CU_Forecast1.Gila Monster Farms" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.Gila Monster Farms" [@"24:00:00 December 31, Current Year"];

      $ "Surplus Total Annual Schedules.AzPumpersBlwImp" [@"24:00:00 December 31, Current Year"] := $ "Arizona_CU_Forecast1.AzPumpersBlwImp" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.AzPumpersBlwImp" [@"24:00:00 December 31, Current Year"];

      $ "Surplus Total Annual Schedules.CAP" [@"24:00:00 December 31, Current Year"] := $ "ForecastUse.CAPResetAnnualFC" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.CAP Domestic" [@"24:00:00 December 31, Current Year"];

    END
    UUID "{9621c0f9-717b-412a-93e9-d568c632783b}";;

    RULE                 "Set Quantified Surplus Entitlement Vols MWD, CAP, SNWA";
    DESCRIPTION          "DESCRIPTION: This rule distributes the volume of quantified surplus available between MWD and CAP<br><br>SLOTS SET: Surplus Volume Entitlements.MWD Quantified; Surplus Volume Entitlements.CAP Quantified<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) >= 3.00000000 AND $ "Surplus.Quantified Surplus Volume" [@"24:00:00 December 31, Current Year"] > 0.00000000 "acre-feet" AND NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br><br>S.Baker 06/20/2018: Added constraint to not allow Quantified surplus to be taken by CPAT prior to 1992.<br><br>GCAA, 20181030: Removed &quot;- Minute 323&quot; from rule name. Replaced hardcoded MWD surplus entitlement values with reference to DefaultSurplusEntitlement slot<br><br>GCAA, 20200330: Added logic to determine SNWA's Quantified Surplus Entitlement.";
    BEGIN

      BREAKPOINT BEFORE_EXEC FALSE;
      $ "Surplus Volume Entitlements.MWD Quantified" [@"24:00:00 December 31, Current Year"] := IF ( $ "Surplus.California Quantified Surplus Volume" [@"24:00:00 December 31, Current Year"] > $ "Surplus Volume Entitlements.MWD Domestic" [@"24:00:00 December 31, Current Year"] )
 THEN
  $ "AnnualWaterUse.MWDCanal_AnnualCapacity" [] - FOR ( DATETIME date IN @"24:00:00 January Max DayOfMonth, Current Year" TO @"24:00:00 December Max DayOfMonth, Current Year" ) STAT_SUM
   "FlowToVolume"( $ "MWDDiversion:MWD.Diversion Requested" [date], date )
  ENDFOR COMMENTED_BY "Total current year MWD diversion request volume"
 ELSE
  $ "Surplus Volume Entitlements.MWD Domestic" [@"24:00:00 December 31, Current Year"]
 ENDIF;

      $ "Surplus Volume Entitlements.CAP Quantified" [@"24:00:00 December 31, Current Year"] := IF ( "GetYear"( @"24:00:00 January 31, Current Year" ) > 1992.00000000 )
 THEN
  WITH NUMERIC RemainingCanalCapacity = $ "AnnualWaterUse.CAPCanal_AnnualCapacity" [] - "SumAnnualCAPDivRequest"(  ) - $ "ICS Credits.AnnualDeliverySysEff_AZ" [@"24:00:00 December 31, Current Year"] DO
   WITH NUMERIC RemainingQS_AZ = $ "Surplus.Arizona Quantified Surplus Volume" [@"24:00:00 December 31, Current Year"] - ( $ "Surplus Volume Entitlements.AzPumpersBlwImp" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.Gila Monster Farms" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.CAP Domestic" [@"24:00:00 December 31, Current Year"] ) DO
    IF ( RemainingQS_AZ > 0.00000000 "acre-feet" )
    THEN
     "Min"( RemainingQS_AZ, RemainingCanalCapacity )
    ELSE
     $ "Surplus Volume Entitlements.CAP Domestic" [@"24:00:00 December 31, Current Year"]
    ENDIF
   ENDWITH
  ENDWITH
 ELSE
  0.00000000 "acre-ft"
 ENDIF COMMENTED_BY "Testbed Hindcast Simulations - Prior to 1992 do not allow CAP to take water since canal was not built  <br>";

      $ "Surplus Volume Entitlements.SNWA Quantified" [@"24:00:00 December 31, Current Year"] := IF ( $ "Surplus.Nevada Quantified Surplus Volume" [@"24:00:00 December 31, Current Year"] > $ "Surplus Volume Entitlements.SNWA Domestic" [@"24:00:00 December 31, Current Year"] )
 THEN
  "Min"( $ "Surplus.Nevada Quantified Surplus Volume" [@"24:00:00 December 31, Current Year"], "Max"( $ "AnnualWaterUse.Nevada_Apportionment" [@"24:00:00 December 31, Current Year"] - $ "AnnualWaterUse.NV_BasicApportionment" [], 0.00000000 "acre-ft" ) )
 ELSE
  $ "Surplus Volume Entitlements.SNWA Domestic" [@"24:00:00 December 31, Current Year"]
 ENDIF;

    END
    UUID "{662dfa55-5c5c-49c7-9015-5ad6055fd735}";;

    RULE                 "Set Domestic and FC Surplus Entitlement Vols for MWD";
    DESCRIPTION          "DESCRIPTION: In Domestic Surplus then MWD gets 1,250 KAF less the MWD Diversion to date, less 1/3 the Mexico Shortage and surplus volume if the year is prior to 2017, after 2017 then the calculation is 250 KAF less 1/3 the Mexico annual surplus value. In a flood control year MWD is entitled to a Full Canal so their entitlement is the current diversion plus what it takes to fill the canal. TP 7/28/2015<br><br>SLOTS SET: Surplus Volume Entitlements.MWD Domestic; Surplus Volume Entitlements.MWD FC<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: TP, 7/28/2015<br><br>GCAA, 20181030: Removed &quot;- Minute 323&quot; from name, replaced hardcoded CAP surplus entitlement value with reference to Surplus Volume Entitlements.CAP Domestic slot, replaced hardcoded share of surplus by state value with ShareofMexicoSurplusbyState() function, and replaced CAP surplus entitlement value with reference to Surplus.Default Surplus Entitlements slot.";
    BEGIN

      IF_STATEMENT (IsNaN $ "Surplus Volume Entitlements.MWD Domestic" [@"24:00:00 December 31, Current Year"]) THEN
            $ "Surplus Volume Entitlements.MWD Domestic" [@"24:00:00 December 31, Current Year"] := IF ( "GetYear"( @"24:00:00 January 31, Current Year" ) < 2017.00000000 )
 THEN
  $ "AnnualWaterUse.MWDCanal_AnnualCapacity" [] - FOR ( DATETIME date IN @"24:00:00 January Max DayOfMonth, Current Year" TO @"24:00:00 December Max DayOfMonth, Current Year" ) STAT_SUM
   "FlowToVolume"( $ "MWDDiversion:MWD.Diversion Requested" [date], date )
  ENDFOR - "ShareofMexicoSurplusbyState"(  ) * $ "Mexico Shortage and Surplus.Mexico Annual Surplus" [@"24:00:00 December 31, Current Year"]
 ELSE
  IF ( $ "Surplus Volume Entitlements.CAP Domestic" [@"24:00:00 December 31, Current Year"] > 0.00000000 "acre-ft" AND $ "Surplus Volume Entitlements.SNWA Domestic" [@"24:00:00 December 31, Current Year"] > 0.00000000 "acre-ft" )
  THEN
   $ "Surplus.Default Surplus Entitlements" [0.00000000, 1.00000000] - "ShareofMexicoSurplusbyState"(  ) * $ "Mexico Shortage and Surplus.Mexico Annual Surplus" [@"24:00:00 December 31, Current Year"]
  ELSE
   $ "Surplus.Default Surplus Entitlements" [0.00000000, 1.00000000]
  ENDIF
 ENDIF;

      END_IF_STATEMENT;

      IF_STATEMENT (IsNaN $ "Surplus Volume Entitlements.MWD FC" [@"24:00:00 December 31, Current Year"]) THEN
            $ "Surplus Volume Entitlements.MWD FC" [@"24:00:00 December 31, Current Year"] := $ "AnnualWaterUse.MWDCanal_AnnualCapacity" [] - "SumAnnualMWDDivRequest"(  );

      END_IF_STATEMENT;

    END
    UUID "{aff04063-da50-435d-872e-1a22a0d7fad4}";;

    RULE                 "Set Domestic and FC Surplus Entitlement Vols for SNWA";
    DESCRIPTION          "DESCRIPTION:  If the year is after 2017 and if Nevada's apportionment is greater than the Nevada basic apportionment (300 kaf) and less than Nevada's share of Mexico's surplus (1/3) then set the domestic surplus entitlement equal to that volume. If it is before 2017 or Nevada's apportionment is less than the basic apportionment then the domestic surplus entitlement is 0 acre-ft. If Nevada's apportionment is greater than the basic apportionment then that difference is the surplus flood control entitlement, otherwise it is 0 acre-ft.<br><br><br>SLOTS SET: Surplus Volume Entitlements.SNWA Domestic; Surplus Volume Entitlements.SNWA FC";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: GCAA, 20200330";
    BEGIN

      BREAKPOINT BEFORE_EXEC FALSE;
      IF_STATEMENT (IsNaN $ "Surplus Volume Entitlements.SNWA Domestic" [@"24:00:00 December 31, Current Year"]) THEN
            $ "Surplus Volume Entitlements.SNWA Domestic" [@"24:00:00 December 31, Current Year"] := IF ( "GetYear"( @"24:00:00 January 31, Current Year" ) < 2017.00000000 )
 THEN
  0.00000000 "acre-ft"
 ELSE
  "Min"( $ "Surplus.Default Surplus Entitlements" [0.00000000, 2.00000000] - "ShareofMexicoSurplusbyState"(  ) * $ "Mexico Shortage and Surplus.Mexico Annual Surplus" [@"24:00:00 December 31, Current Year"], "Max"( $ "AnnualWaterUse.Nevada_Apportionment" [@"24:00:00 December 31, Current Year"] - $ "AnnualWaterUse.NV_BasicApportionment" [], 0.00000000 "acre-ft" ) )
 ENDIF;

      END_IF_STATEMENT;

      IF_STATEMENT (IsNaN $ "Surplus Volume Entitlements.SNWA FC" [@"24:00:00 December 31, Current Year"]) THEN
            $ "Surplus Volume Entitlements.SNWA FC" [@"24:00:00 December 31, Current Year"] := "Max"( $ "AnnualWaterUse.Nevada_Apportionment" [@"24:00:00 December 31, Current Year"] - $ "AnnualWaterUse.NV_BasicApportionment" [], 0.00000000 "acre-ft" );

      END_IF_STATEMENT;

    END
    UUID "{416415a3-c8b7-4225-8922-dc0e84b338d0}";;

    RULE                 "Set Domestic and FC Surplus Entitlement Vols for CAP";
    DESCRIPTION          "DESCRIPTION: If the year is greater than 2017, then determine the Domestic Surplus entitlement for CAP which is calculated as 100 KAF - 1/3*Mexico Annual Surplus - (Surplus entitlements for Gila Monster Farms + AZ pumpers blw Imp).  If the system is in Flood Control, the CAP FC volume is set to 1,835 KAF less the current CAP Diversion Request so that they are entitled to a full canal volume of 1,835 KAF in a year of Flood Control. TP 7/28/2015<br><br>SLOTS SET: Surplus Volume Entitlements.CAP Domestic, Surplus Volume Entitlements.CAP FC<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: TP, 7/28/2015<br><br>GCAA, 20181030: Replaced hardcoded CAP default surplus entitlement value with reference to Surplus.Default Surplus Entitlements slot, replaced share of Mexico surplus by state value with ShareofMexicoSurplusbyState() function, and removed &quot;-Minute 323&quot; from rule name.";
    BEGIN

      IF_STATEMENT (IsNaN $ "Surplus Volume Entitlements.CAP Domestic" [@"24:00:00 December 31, Current Year"]) THEN
            $ "Surplus Volume Entitlements.CAP Domestic" [@"24:00:00 December 31, Current Year"] := IF ( "GetYear"( @"24:00:00 January 31, Current Year" ) < 2017.00000000 )
 THEN
  0.00000000 "acre-ft"
 ELSE
  $ "Surplus.Default Surplus Entitlements" [0.00000000, 0.00000000] - "ShareofMexicoSurplusbyState"(  ) * $ "Mexico Shortage and Surplus.Mexico Annual Surplus" [@"24:00:00 December 31, Current Year"] - ( $ "Surplus Volume Entitlements.Gila Monster Farms" [@"24:00:00 December 31, Current Year"] + $ "Surplus Volume Entitlements.AzPumpersBlwImp" [@"24:00:00 December 31, Current Year"] )
 ENDIF;

      END_IF_STATEMENT;

      IF_STATEMENT (IsNaN $ "Surplus Volume Entitlements.CAP FC" [@"24:00:00 December 31, Current Year"]) THEN
            $ "Surplus Volume Entitlements.CAP FC" [@"24:00:00 December 31, Current Year"] := $ "AnnualWaterUse.CAPCanal_AnnualCapacity" [] - "SumAnnualCAPDivRequest"(  );

      END_IF_STATEMENT;

    END
    UUID "{cb1d29bd-a1c6-4f53-9311-a9939da062ea}";;

    RULE                 "Set Quantified Volumes by State";
    DESCRIPTION          "DESCRIPTION: If there is a positive Quantified Surplus volume, this rule will distribute it among the lower basin states of AZ, CA, and NV. The distribution amounts (shares) are stored in a slot on the Surplus object. If there is not a positive Quantified Surplus, the execution contraints will prevent this rule from firing. -HMG 8/2/11<br><br>SLOTS SET: Surplus.<state> Quantified Surplus Volume<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) >= 3.00000000 AND $ "Surplus.Quantified Surplus Volume" [@"24:00:00 December 31, Current Year"] > 0.00000000 "acre-feet";
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: HMG, 8/2/2011";
    BEGIN

      FOREACH (STRING state IN { "California" , "Arizona" , "Nevada" }) DO
            % "Surplus" & ( state CONCAT " Quantified Surplus Volume" ) [@"24:00:00 December 31, Current Year"] := $ "Surplus.Quantified Surplus Volume" [@"24:00:00 December 31, Current Year"] * $ "Surplus.Share of Quantified Surplus by State" [0.00000000, state];

      ENDFOREACH;

    END
    UUID "{5b328700-3564-4714-b5ad-22cdf863945f}";;

    RULE                 "Set Outyear Surplus Schedules for Mexico";
    DESCRIPTION          "DESCRIPTION: This rule uses the volume associated with the Mexico Surplus Flag to set the Mexico diversion request for surplus according to the Mexico Surplus Table TP 7/28/2015<br><br>SLOTS SET: MexicanTreatyDelivery:MexicoSched.Diversion Requested, Mexico Shortage and Surplus.Mexico Annual Surplus<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND @"t" != @"Start Timestep" AND $ "Mexico Shortage and Surplus.Mexico Surplus Flag" [@"24:00:00 December 31, Current Year"] > 0.00000000;
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br><br>GCAA, 20181030: Removed &quot;- Minute 323&quot; from rule name";
    BEGIN

      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            $ "MexicanTreatyDelivery:MexicoSched.Diversion Requested" [date] := "VolumeToFlow"( $ "Mexico_CU_Schedules.MexicoSched" [date] - $ "Mexico_CU_Schedules.MexicoTJ" [date] + $ "Mexico Shortage and Surplus.Mexico Surplus Table" [$ "Mexico Shortage and Surplus.Mexico Surplus Flag" [@"24:00:00 December 31, Current Year"] - 1.00000000, "Volume"] * $ "Shortage.MonthlyPercents" ["GetMonthAsString"( date ), "Mexico"], date );

      ENDFOREACH;

      $ "Mexico Shortage and Surplus.Mexico Annual Surplus" [@"24:00:00 December 31, Current Year"] := $ "Mexico Shortage and Surplus.Mexico Surplus Table" [$ "Mexico Shortage and Surplus.Mexico Surplus Flag" [@"24:00:00 December 31, Current Year"] - 1.00000000, "Volume"];

    END
    UUID "{f3dbd19c-a6c1-48f9-84f5-897b39f6ea58}";;

  END
  UUID "{cbb72186-2e5b-4e67-b3cf-19fc35925e1c}";;

  POLICY_GROUP   "DCP and BWSCP";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "California DCP";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( @"t" == @"Start Timestep" OR @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "This Rule" ) ) OR ( "GetRunCycleIndex"(  ) == 4.00000000 AND @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND $ "DCP BWSCP Flags.LB DCP BWSP Check" ["Dec31ofYear"( @"t" )] != $ "DCP BWSCP Flags.LB DCP BWSP" ["Dec31ofYear"( @"t" )] );
    NOTES                "";
    BEGIN

      IF_STATEMENT ($ "ICS Credits.AnnualDCPContribution_CA" [@"24:00:00 December Max DayOfMonth, Current Year"] > 0.00000000 "acre-ft") THEN
          DESCRIPTION          "This assignment calculates whether MWD's DCP contribution will be made as schedule <br>reduction or conversion of existing EC ICS to DCP ICS. Determination of system water or <br>simultaneous conversion occurs in the accounting rule for this will happen in the ICS <br>Accounting policy group.<br><br>Check EC ICS balance, check current year EC creation, else reduce schedule to create EC ICS<br>which will then be converted to DCP ICS<br><br>AP, 7/11/19<br><br>Coachella can not &quot;officially&quot; create DCP ICS. Instead DCP creation for Coachella will be done <br>&quot;unofficially&quot; and held in MWD account. Coachella will reduce diversion by 7% to help CA meet <br>DCP contribution and will be stored store in MWD's system. MWD to pay tax for now. No logic <br>for Coachella besides 7% reduction to diversion to create water for MWD. CVWD account in <br>MWD system will not be tracked, all DCP ICS will be assumed to be MWD.<br><br>AP 7/31/19          <br>";
      WITH_STATEMENT (NUMERIC dcpContribution = $ "ICS Credits.AnnualDCPContribution_CA" [@"24:00:00 December Max DayOfMonth, Current Year"]) DO
            WITH_STATEMENT (NUMERIC PreviousECtoDCP = "Min"( dcpContribution, $ "ICS Credits.ExtraordinaryConservationICS_MWD" [@"24:00:00 December Max DayOfMonth, Previous Year"] )) DO
            WITH_STATEMENT (NUMERIC RemainingContribution = IF ( dcpContribution == PreviousECtoDCP )
 THEN
  0.00000000 "acre-ft"
 ELSE
  dcpContribution - PreviousECtoDCP
 ENDIF) DO
            $ "ICS Credits.AnnualConversionPreviousECtoDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := PreviousECtoDCP;

            $ "ICS Credits.AnnualRemainingDCPContribution_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := RemainingContribution;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      ELSE
            $ "ICS Credits.AnnualConversionPreviousECtoDCP_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

            $ "ICS Credits.AnnualRemainingDCPContribution_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

            $ "ICS Credits.AnnualSimultaneousCreationDCPICS_MWD" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

            $ "ICS Credits.AnnualSysWaterforDCP_MWD" [@"24:00:00 December 31, Current Year"] := 0.00000000 "acre-feet";

      END_IF_STATEMENT;

    END
    UUID "{c862f2bd-77c9-4b9d-957d-8c1f3f2b3bfe}";;

    RULE                 "Nevada DCP";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( @"t" == @"Start Timestep" OR @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "This Rule" ) ) OR ( "GetRunCycleIndex"(  ) == 4.00000000 AND @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND $ "DCP BWSCP Flags.LB DCP BWSP Check" ["Dec31ofYear"( @"t" )] != $ "DCP BWSCP Flags.LB DCP BWSP" ["Dec31ofYear"( @"t" )] );
    NOTES                "";
    BEGIN

    DESCRIPTION          "This rule calculates whether NV's DCP contribution will be made as conversion of existing EC ICS <br>(including previous year Imported and Tributary ICS creation) to DCP or as a schedule reduction <br>(simultaneuos conversion vs system water). Determination if a schedule reduction will count as <br>system water or simultaneous conversion occurs in the NV accounting rule.     <br>";
      IF_STATEMENT ($ "ICS Credits.AnnualDCPContribution_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] > 0.00000000 "acre-feet") THEN
            WITH_STATEMENT (NUMERIC dcpContribution = $ "ICS Credits.AnnualDCPContribution_NV" [@"24:00:00 December Max DayOfMonth, Current Year"]) DO
            WITH_STATEMENT (NUMERIC PreviousECtoDCP = "Min"( dcpContribution, $ "ICS Credits.ExtraordinaryConservationICS_NV" [@"24:00:00 December Max DayOfMonth, Previous Year"] + ( $ "ICS Credits.ImportedICS_NV" [@"24:00:00 December 31, Previous Year"] + $ "ICS Credits.TributaryICS_NV" [@"24:00:00 December 31, Previous Year"] ) COMMENTED_BY "Imported and Tributary from the previous year included in the calculation because the balance <br>will be converted to EC ICS at EOCY   <br>" )) DO
            WITH_STATEMENT (NUMERIC RemainingContribution = IF ( dcpContribution == PreviousECtoDCP )
 THEN
  0.00000000 "acre-ft"
 ELSE
  dcpContribution - PreviousECtoDCP
 ENDIF) DO
            $ "ICS Credits.AnnualConversionPreviousECtoDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := PreviousECtoDCP;

            $ "ICS Credits.AnnualRemainingDCPContribution_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := RemainingContribution;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      ELSE
            $ "ICS Credits.AnnualConversionPreviousECtoDCP_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

            $ "ICS Credits.AnnualRemainingDCPContribution_NV" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

      END_IF_STATEMENT;

    END
    UUID "{6e31581a-a7c2-4a0d-b9ae-34e4ae15b347}";;

    RULE                 "Arizona DCP";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep" OR @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND ( ( "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "This Rule" ) ) OR ( "GetRunCycleIndex"(  ) == 4.00000000 AND $ "DCP BWSCP Flags.LB DCP BWSP Check" ["Dec31ofYear"( @"t" )] != $ "DCP BWSCP Flags.LB DCP BWSP" ["Dec31ofYear"( @"t" )] ) );
    NOTES                "";
    BEGIN

    DESCRIPTION          "Rule sets AZ DCP contribution. AnnualCreationDCPICS_CAWCD_Default is an input from the <br>24MS (desired DCP ICS creation). The desired DCP ICS creation is set here and will be adjusted <br>down in the AZ accounting rule based on bank space. AZ system water for DCP contribution is <br>also calculated in the AZ accounting rule.  <br>";
      IF_STATEMENT ($ "ICS Credits.AnnualDCPContribution_AZ" [@"24:00:00 December Max DayOfMonth, Current Year"] > 0.00000000 "acre-ft") THEN
            $ "ICSProjectionData.AnnualConversionECtoDCP_CAWCD_Preliminary" [@"24:00:00 December Max DayOfMonth, Current Year"] := $ "ICSProjectionData.AnnualCreationDCPICS_CAWCD_Default" [@"24:00:00 December Max DayOfMonth, Current Year"] * "SystemTaxAdjustment_DCP"(  );

      ELSE
            $ "ICSProjectionData.AnnualConversionECtoDCP_CAWCD_Preliminary" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

      END_IF_STATEMENT;

    END
    UUID "{0ae60bc0-928a-4151-b115-4a58787c56dd}";;

    RULE                 "Determine DCP and BWSCP Contrib";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( @"t" != @"Start Timestep" AND @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND "GetRunCycleIndex"(  ) >= 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "This Rule" ) );
    NOTES                "";
    BEGIN

    DESCRIPTION          "This rule determines DCP contributions in outyears. Rule fires in run cycles 3 and 4. Does not fire <br>in the first year (start timestep) since DCP condition is already known. DCP contributions in the <br>first year are DMI inputs from the 24 MS. <br>";
      WITH_STATEMENT (NUMERIC MeadPoolElevation = "GetProjectedPoolElevation"( "Mead", @"24:00:00 December 31, Previous Year" )) DO
          DESCRIPTION          "Determine the DCP contribion needed for AZ, CA, NV and MX based on Meads previous EOCY <br>projection <br>";
      FOREACH (STRING user IN "DCP Users"(  )) DO
            IF_STATEMENT (user == "MX") THEN
            $ "Mexico Shortage and Surplus.Mexico Recoverable Water Savings_AnnualContribution" [@"24:00:00 December 31, Current Year"] := "TableLookupDefaultTol"( $ "DCP.Contributions", 0.00000000, "GetColumnIndex"( $ "DCP.Contributions", user ), MeadPoolElevation, @"t", FALSE );

      ELSE
            % "ICS Credits" & "AnnualDCPContribution_" CONCAT user [@"24:00:00 December 31, Current Year"] := "TableLookupDefaultTol"( $ "DCP.Contributions", 0.00000000, "GetColumnIndex"( $ "DCP.Contributions", user ), MeadPoolElevation, @"t", FALSE );

      END_IF_STATEMENT;

      ENDFOREACH;

          DESCRIPTION          "DCP flag. Set in both run cycle 3 and run cycle 4 <br>";
      $ "DCP BWSCP Flags.LB DCP BWSP" [@"24:00:00 December 31, Current Year"] := "GetRowIndex"( $ "DCP.Contributions", STRINGIFY "TableLookupDefaultTol"( $ "DCP.Contributions", 0.00000000, 0.00000000, MeadPoolElevation, @"t", FALSE ) );

          DESCRIPTION          "DCP flag check. This is only set in run cycle 3. This flag is used in run cycle 4 to refire rules if the <br>DCP condition changed between run cycle 3 and run cycle 4. <br>";
      IF_STATEMENT ("GetRunCycleIndex"(  ) == 3.00000000) THEN
            $ "DCP BWSCP Flags.LB DCP BWSP Check" [@"24:00:00 December 31, Current Year"] := "GetRowIndex"( $ "DCP.Contributions", STRINGIFY "TableLookupDefaultTol"( $ "DCP.Contributions", 0.00000000, 0.00000000, MeadPoolElevation, @"t", FALSE ) );

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{938b73ef-6bd0-48ac-9cf9-a371f9ad9e95}";;

  END
  UUID "{9e01eacb-5079-4b62-90bd-edea3c9a6313}";;

  POLICY_GROUP   "Mead and Lower Basin Condition Determination";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Set Quantified Surplus Flags";
    DESCRIPTION          "DESCRIPTION: This rule sets the flags that indicate a Quantified Surplus condition<br><br>SLOTS SET: Surplus.Surplus Flag; Surplus.Quantified Surplus Flag; LowerBasinDemandVariability.AbvHooverTriggerSet<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) >= 3.00000000 AND @"t" == @"24:00:00 January 31, Current Year" AND IsNaN $ "Surplus.Surplus Flag" [] AND $ "Surplus.Quantified Surplus Volume" [@"24:00:00 December 31, Current Year"] > 0.00000000 "acre-feet";
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: MC, 20170706<br><br>MC, 20170706: The setting of these flags was moved from the rule Quantified Surplus Schedules Data Volume to Simulation Flow at the suggestion of Shana T. to consolidate setting of flags related to Mead condition. Note that the Execution Constraints for this rule depend on the Surplus.Quantified Surplus Volume slot, which isn't set until Rule 39-Copute Quantified Surplus Volume - Minute 323; so, this rule will not fire successfully until after that rule<br><br>A.Pivarnik, 20180921: Disabled statement setting LowerBasinDemandVariability.AbvHooverTriggerSet. Was causing MTOM to fail in August run when trying to set Mead operations. ";
    BEGIN

      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            $ "Surplus.Surplus Flag" [date] := 2.00000000;

            $ "Surplus.Quantified Surplus Flag" [date] := 1.00000000;

      ENDFOREACH;

    INACTIVE      $ "LowerBasinDemandVariability.AbvHooverTriggerSet" [@"24:00:00 December 31, Current Year"] := 2.00000000;

    END
    UUID "{daaf29da-016c-4ea8-966c-f83cf3956b4d}";;

    RULE                 "Set Domestic Surplus Flags";
    DESCRIPTION          "DESCRIPTION: This rule sets the flags that indicate a Domestic Surplus condition<br><br>SLOTS SET: Surplus.Surplus Flag; Surplus.Domestic Surplus Flag; LowerBasinDemandVariability.AbvHooverTriggerSet<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) >= 3.00000000 AND "GetProjectedPoolElevation"( "Mead", @"24:00:00 December 31, Previous Year" ) >= $ "Surplus.Domestic Surplus Trigger Elevation" [] AND IsNaN $ "Surplus.Surplus Flag" [];
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: MC, 20170706<br><br>MC, 20170706: The setting of these flags was moved from the rule Domestic Surplus Schedules Data Volume to Simulation Flow at the suggestion of Shana T. to consolidate setting of flags related to Mead condition<br><br>A.Pivarnik, 20180921: Disabled statement setting LowerBasinDemandVariability.AbvHooverTriggerSet. Was causing MTOM to fail in August run when trying to set Mead operations. <br>S.Baker, 09/25/2018: Changed the Mead.Pool Elevation input to function GetProjectedPoolElevation() function instead of looking at Mead.Pool Elevation. This will allow MTOM to determine which Mead PE projection to use (ie. AugEOYProjectedMeadPool elevation). ";
    BEGIN

      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            $ "Surplus.Surplus Flag" [date] := 1.00000000;

            $ "Surplus.Domestic Surplus Flag" [date] := 1.00000000;

      ENDFOREACH;

    INACTIVE      $ "LowerBasinDemandVariability.AbvHooverTriggerSet" [@"24:00:00 December 31, Current Year"] := 2.00000000;

    END
    UUID "{80df0f7b-b6ae-4c02-86da-f2fcd9a0bff8}";;

    RULE                 "Compute Quantified Surplus Volume";
    DESCRIPTION          "DESCRIPTION: This rule computes the total volume of Quantified Surplus water for the year. This slot only computes once per year in January and is NOT recalculated if Lower Basin demands are revised. If this value is postitive, there is a Quantified Surplus determination and water use schedules are revised as appropriate. <br>Equation:   Surplus Volume = (Powell Storage + Mead Storage - maxstorage - previous year ICS credits)*(1+avgBankStorcoef) + runoff - UBDemand - LBDemand <br>Variable Definitions:<br>  Powell Storage = Powell storage at beginning of the year (December month-end) <br>  Mead Storage = Mead storage at the beginning of the year (December month-end) <br>  Max Storage = 47.96 maf <br>  Previous year ICS credits - cumulative ICS credits over entire Lower Basin over all years <br>  avgBankStorcoef = average of Powell and Mead bank storage coefficients <br>  Runoff = 17.4 maf (70th percentile non-exceedence flow) <br>  UBDemand = Upper Basin depletion scheduled for the year + average evaporation loss in the Upper Basin (same as in 602a calculation, 560 kaf) <br>  LBDemand = sum of depletions below Powell + evaporation losses in the Lower Basin (avg 900 kaf) ? avg gains below Powell (Powell to Mead and below Mead) <br><br>-HMG 8/2/11<br><br>SLOTS SET: Surplus.Quantified Surplus Volume<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT IsNaN $ "Surplus.Quantified Surplus Volume" [@"24:00:00 December 31, Current Year"] AND @"t" == @"24:00:00 January Max DayOfMonth, Current Year";
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: HMG, 8/2/11<br>MC, 20160114: There is a function, QuantifiedSurplusVolume, with the same calculation in it.  Are both necessary?<br>MC, 20170512: Need to edit Execution Constraints to ensure execution in January?<br>GCAA, 20181030: Removed &quot;- Minute 323&quot; from rule name";
    BEGIN

      $ "Surplus.Quantified Surplus Volume" [@"24:00:00 December 31, Current Year"] := "QuantifiedSurplusVolume"(  );

    END
    UUID "{ad6802dc-2ef8-4a9b-be08-65b9452a4fe8}";;

    RULE                 "Determine Mead and Lower Basin Condition";
    DESCRIPTION          "DESCRIPTION: This rule sets a slot that determines the Condition of Lake Mead and the Lower Basin. A setting of 0 means a normal year, a 1 means shortage, a 2 means Domestic Surplus and a 3 is Quantified Surplus.  In the condition of anything that is not normal. TP 7/28/2015<br>                         Sets LBDV.schedulecheck to something other than 0 if the LB condition changes in RC 3. AP 9/18/2018<br><br>SLOTS SET: LowerBasinDemandVariability.LowerBasinCondition<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" OR @"t" == @"Start Timestep" AND "GetRunCycleIndex"(  ) >= 3.00000000;
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: TP, 7/28/2015<br><br>9/18/2018, AP: Removed logic to determine LB operating condition and moved it into LBConditionDetermination function. Rule now sets LBDV.Schedule check value to either a 1 (shortage) or 2 (surplus) if the LB condition switches to something other than normal in run cycle 3. This value does not change after run cycle 3.<br>S.Baker, 20180925: Changed execution constraint to allow rule to execute in start timestep since 24MS projected Mead PE is known. Edited time in function to Dec Previous year. This will allow the rule to execute correctly in start timestep. Edited date input in second assignment to be consistent with the first assignment (shouldnt change how rule works). ";
    BEGIN

      $ "LowerBasinDemandVariability.LowerBasinCondition" [@"24:00:00 December 31, Current Year"] := "LBConditionDetermination"(  );

      $ "LowerBasinDemandVariability.ScheduleCheck" [@"24:00:00 December 31, Current Year"] := IF ( "GetRunCycleIndex"(  ) == 3.00000000 AND "LBConditionDetermination"(  ) != 0.00000000 )
 THEN
  IF ( "LBConditionDetermination"(  ) == 1.00000000 )
  THEN
   1.00000000
  ELSE
   2.00000000
  ENDIF
 ENDIF;

    END
    UUID "{f22ba73e-2bb4-4e47-83d8-d6a0aaf4321a}";;

    RULE                 "Set Mexico Surplus Flag";
    DESCRIPTION          "DESCRIPTION: This rule sets the Mexico Surplus flag as a function of Mead compared to the Mexico Surplus Table. A Mead elevation of >= 1,200 ft. receives a value of 3, a value greater than 1,170 ft and less than the level 3 elevation, receives a value of 2, a value of 1,145 ft and less than a level 2 receives a value of 0 and any other condition receives a value of 0. This flag is used in subsequent Mexico Surplus rules. TP 7/28/2015<br><br>SLOTS SET: Mexico Shortage and Surplus.Mexico Surplus Flag<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" OR @"t" == @"Start Timestep";
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br><br>MC, 20170706: Moved from Priority 41 while consolidating Mead conditions flag-setting per Shana T. suggestion<br>S.Baker, 09/25/2018: Changed the Mead.Pool Elevation input to function GetProjectedPoolElevation() function instead of looking at Mead.Pool Elevation. This will allow MTOM to determine which Mead PE projection to use (ie. AugEOYProjectedMeadPool elevation). Changed execution constraint to allow execution in start timestep.<br><br>GCAA, 20181030: Removed &quot;- Minute 323&quot; from rule name";
    BEGIN

      BREAKPOINT BEFORE_EXEC FALSE;
      $ "Mexico Shortage and Surplus.Mexico Surplus Flag" [@"24:00:00 December 31, Current Year"] := IF ( "GetProjectedPoolElevation"( "Mead", @"24:00:00 December 31, Previous Year" ) >= $ "Mexico Shortage and Surplus.Mexico Surplus Table" [2.00000000, "Elevation"] )
 THEN
  3.00000000
 ELSE
  IF ( "GetProjectedPoolElevation"( "Mead", @"24:00:00 December 31, Previous Year" ) >= $ "Mexico Shortage and Surplus.Mexico Surplus Table" [1.00000000, "Elevation"] )
  THEN
   2.00000000
  ELSE
   IF ( "GetProjectedPoolElevation"( "Mead", @"24:00:00 December 31, Previous Year" ) >= $ "Mexico Shortage and Surplus.Mexico Surplus Table" [0.00000000, "Elevation"] )
   THEN
    1.00000000
   ELSE
    0.00000000
   ENDIF
  ENDIF
 ENDIF;

    END
    UUID "{e61bbf9a-a73d-4513-953d-9bf386f620cd}";;

    RULE                 "Set Shortage Flag";
    DESCRIPTION          "DESCRIPTION: In the event that a Lower Basin shortage is projected, this rule sets the Shortage Flag slot to indicate the level of shortage. No shortage = 0. Most severe shortage (Mead < 1025 feet) = 3. Mead < 1050 ft = 2, Mead < 1075 ft = 1. If there is a shortage or surplus then the Abv Hoover Trigger is set to a 2 and no LBDV will occur for the parties that look at the Above Hoover Trigger Set for LBDV.  (SNWP)<br><br>SLOTS SET: Shortage.Shortage Flag, LowerBasinDemandVariability.AbvHooverTriggerSet<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" OR @"t" == @"Start Timestep" AND "GetRunCycleIndex"(  ) >= 3.00000000;
    NOTES                "AUTHOR, DATE: Unknown<br><br>MC, 20170706: Moved from Priority 46 while consolidating Mead conditions flag-setting per Shana T. suggestion<br>S.Baker, 20180925: Changed IF statements to use function 'GetProjectedPoolElevation' instead of looking at Mead.Pool Elevation. This will allow MTOM to determine which Mead PE projection to use (ie. AugEOYProjectedMeadPool elevation). Changed execution constraint to allow rule to execute in start timestep since 24MS projected Mead PE is known. Edited time in function to Dec Previous year. This will allow the rule to execute correctly in start timestep.";
    BEGIN

      $ "Shortage.Shortage Flag" [@"24:00:00 December 31, Current Year"] := IF ( "GetProjectedPoolElevation"( "Mead", @"24:00:00 December 31, Previous Year" ) < $ "Shortage.Mead Shortage Elevations" [2.00000000, 0.00000000] )
 THEN
  3.00000000
 ELSE
  IF ( "GetProjectedPoolElevation"( "Mead", @"24:00:00 December 31, Previous Year" ) < $ "Shortage.Mead Shortage Elevations" [1.00000000, 0.00000000] )
  THEN
   2.00000000
  ELSE
   IF ( "GetProjectedPoolElevation"( "Mead", @"24:00:00 December 31, Previous Year" ) <= $ "Shortage.Mead Shortage Elevations" [0.00000000, 0.00000000] )
   THEN
    1.00000000
   ELSE
    0.00000000
   ENDIF
  ENDIF
 ENDIF;

    INACTIVE      $ "LowerBasinDemandVariability.AbvHooverTriggerSet" [@"24:00:00 December 31, Current Year"] := IF ( "GetProjectedPoolElevation"( "Mead", @"24:00:00 December 31, Previous Year" ) <= $ "Shortage.Mead Shortage Elevations" [0.00000000, 0.00000000] )
 THEN
  2.00000000
 ENDIF;

    END
    UUID "{9d0ab11a-d5e2-4e62-80df-1c527c3532f9}";;

  END
  UUID "{59a47bfe-f3f4-40f3-814a-1b05921b744f}";;

  POLICY_GROUP   "Powell Steady Flow Experiment";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Set Steady Flow Experiment Release";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT $ "PowellData.SteadyFlowExperimentFlag" [] == 1.00000000 AND "GetRunCycleIndex"(  ) == 3.00000000;
    NOTES                "";
    BEGIN

      IF_STATEMENT ("MonthIs"( { "September" } )) THEN
            $ "Powell.Outflow" [] := "GetSeptemberSteadyFlowRelease"( $ "PowellData.TargetAnnualReleaseVolume" [] );

      END_IF_STATEMENT;

      IF_STATEMENT ("MonthIs"( { "October" } )) THEN
            $ "Powell.Outflow" [] := $ "Powell.Outflow" [@"t - 1"];

      END_IF_STATEMENT;

      IF_STATEMENT ("MonthIs"( { "April" } )) THEN
            $ "Powell.Outflow" [] := $ "Powell.Outflow" [] - $ "PowellSteadyFlowExperiment.5_ReduceApril" ["CurrentYear"(  )] / "GetDaysInMonth"( @"t" );

      END_IF_STATEMENT;

      IF_STATEMENT ("MonthIs"( { "May" } )) THEN
            $ "Powell.Outflow" [] := $ "Powell.Outflow" [] - $ "PowellSteadyFlowExperiment.6_ReduceMay" ["CurrentYear"(  )] / "GetDaysInMonth"( @"t" );

      END_IF_STATEMENT;

      IF_STATEMENT ("MonthIs"( { "June" } )) THEN
            $ "Powell.Outflow" [] := $ "Powell.Outflow" [] - ( $ "PowellSteadyFlowExperiment.4_ReduceJune_2" ["CurrentYear"(  )] + $ "PowellSteadyFlowExperiment.3_ReduceJune_1" ["CurrentYear"(  )] ) / "GetDaysInMonth"( @"t" );

      END_IF_STATEMENT;

      IF_STATEMENT ("MonthIs"( { "July" } )) THEN
            $ "Powell.Outflow" [] := $ "Powell.Outflow" [] - $ "PowellSteadyFlowExperiment.2_ReduceAugust" ["CurrentYear"(  )] / "GetDaysInMonth"( @"t" );

      END_IF_STATEMENT;

      IF_STATEMENT ("MonthIs"( { "July" } )) THEN
            $ "Powell.Outflow" [] := $ "Powell.Outflow" [] - $ "PowellSteadyFlowExperiment.1_ReduceJuly" ["CurrentYear"(  )] / "GetDaysInMonth"( @"t" );

      END_IF_STATEMENT;

    END
    UUID "{ea5d36ab-9eb5-48a7-ba12-c5e217d176de}";;

    RULE                 "Set Steady Flow Reductions";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT "MonthIs"( { "April" } ) AND "GetRunCycleIndex"(  ) == 3.00000000;
    NOTES                "";
    BEGIN

      $ "PowellSteadyFlowExperiment.1_ReduceJuly" ["CurrentYear"(  )] := "SteadyFlowReduce_1_July"(  );

      $ "PowellSteadyFlowExperiment.2_ReduceAugust" ["CurrentYear"(  )] := "SteadyFlowReduce_2_August"(  );

      $ "PowellSteadyFlowExperiment.3_ReduceJune_1" ["CurrentYear"(  )] := "SteadyFlowReduce_3_June1"(  );

      $ "PowellSteadyFlowExperiment.4_ReduceJune_2" ["CurrentYear"(  )] := "SteadyFlowReduce_4_June2"(  );

      $ "PowellSteadyFlowExperiment.5_ReduceApril" ["CurrentYear"(  )] := "SteadyFlowReduce_5_April"(  );

      $ "PowellSteadyFlowExperiment.6_ReduceMay" ["CurrentYear"(  )] := "SteadyFlowReduce_6_May"(  );

    END
    UUID "{00b3bf07-1db5-40af-b0f4-59929943fad1}";;

  END
  UUID "{8b1f28ea-1166-42a1-b266-40f95b9da449}";;

  POLICY_GROUP   "PowellAfterLBDV";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Set Lower Balancing Release Volume post-LBDV";
    DESCRIPTION          "DESCRIPTION: This rule sets the Target Annual Release Volume (TARV) when the Release Tier is set to Lower Elevation Balancing Tier. This version of the rule executes in Run Cycle 4.<br><br>SLOTS SET: PowellData.TargetAnnualReleaseVolume<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 4.00000000 AND ( "StartMonthIsSeptember"(  ) OR "MonthIs"( { "August" } ) ) AND "TierIs"( "Lower", @"t", FALSE ) AND NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br><br>S.Baker, 20180925: Rule should not fire in the start timestep (execution constraint removed and IF statement removed). This is done in a separate rule. Removed IsYearDemandVariabilityandRunCycle4() since rule should always execute in Run Cycle 4. Added TierIs() to execution constraint.";
    BEGIN

    DESCRIPTION          "For August timestep with Lower Balancing Release Tier in next outyear";
      $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := "Min"( "Max"( "EqualizationReleaseWithCarryover"( "RelativeEOWYDate"( @"t + 2" ) ), $ "PowellData.LowerTierMinAnnualRelease" [] ), $ "PowellData.LowerTierMaxAnnualRelease" [] );

      $ "PowellData.ReleaseVolumeSetFlag" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := 1.00000000;

    END
    UUID "{852392ad-b511-4677-b6e1-4d10704c4210}";;

    RULE                 "Set Mid-Elevation Release Volume post-LBDV";
    DESCRIPTION          "DESCRIPTION: This rule sets the Target Annual Release Volume (TARV) when the Release Tier is set to Mid-Elevation Tier. This version of the rule executes in Run Cycle 4.<br><br>SLOTS SET: PowellData.TargetAnnualReleaseVolume<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetRunCycleIndex"(  ) == 4.00000000 AND ( "StartMonthIsSeptember"(  ) OR "MonthIs"( { "August" } ) ) AND "TierIs"( "Mid", @"t", FALSE ) AND NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br><br>S.Baker, 20180925: Rule should not fire in the start timestep (execution constraint removed and IF statement removed). This is done in a separate rule. Removed IsYearDemandVariabilityandRunCycle4() since rule should always execute in Run Cycle 4. Added TierIs() to execution constraint.<br>S.Baker, 09/25/2018: Changed the Mead.Pool Elevation input to function GetProjectedPoolElevation() function instead of looking at Mead.Pool Elevation. This will allow MTOM to determine which Mead PE projection to use (ie. AugEOYProjectedMeadPool elevation).";
    BEGIN

    DESCRIPTION          "In August with Mid-elevation tier for the next outyear";
      $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := IF ( "StorageToElevation"( % "Mead", "ElevationToStorage"( % "Mead", "GetProjectedPoolElevation"( "Mead", @"24:00:00 December 31, Current Year" ) ) + NaNToZero ( $ "PowellToMeadData.CarryoverVolume" [@"24:00:00 December 31, Current Year"] ) ) >= 1025.00000000 "ft" )
 THEN
  7480.00000000 "1000 acre-ft"
 ELSE
  8230.00000000 "1000 acre-ft"
 ENDIF;

      $ "PowellData.ReleaseVolumeSetFlag" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := 1.00000000;

    END
    UUID "{c2dfcd2b-d19d-46fd-9838-08812e43404f}";;

    RULE                 "Refine Equalization Release Volume post-LBDV";
    DESCRIPTION          "DESCRIPTION: This rule refines the annual release volume from Powell when either the Equalization Tier or Upper Elevation Balancing Tier B3 branch is operative for setting the annual release from Powell.  The release needs to be refined by this rule because when it is originally set, it is a preliminary &quot;guess&quot; for the volume it will take to arrive at the appropriate final (end of water year) condition (Equalized storage volumes, or Powell at a specific pool elevation at the end of the year - see Equalization Tier logic for more details as to what the final eowy condition should be).  This volume is then released and the end of year condition is checked against what it is supposed to be.  The first guess will almost always be off by some amount because of the non-linear elements in the water balance in both Powell and Mead of Evaporation and Bank Storage.  So rather than trying to set up a calculation or mini-simulation to calculate the exact right release volume to hit the end of water year condtion the first time, the guess volume is actually released and then this rule, because it can see the results of the original release, adjusts the release volume to eliminate the deviation from the target that it observes as a result of the initial guess release.  This rule is allowed to fire multiple times in a timestep and may do so in order to hit exactly the end of water year target condition. - sc 06/21/12<br><br>This version of the rule executes in Run Cycle 4 with Lower Basin Demand Variability in effect.<br><br>SLOTS SET: PowellData.TargetAnnualReleaseVolume<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT WITH DATETIME eoyDate = IF ( "MonthIs"( { "August" } ) OR "StartMonthIsSeptember"(  ) )
 THEN
  "Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )
 ELSE
  "Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )
 ENDIF DO
  "HasRuleFiredSuccessfully"( "Set Equalization Release Volume post-LBDV" ) OR ( "HasRuleFiredSuccessfully"( "Set Upper Balancing Release Volume post-LBDV" ) AND $ "PowellData.UpperElevBalBranch" [eoyDate] == 1.30000000 ) AND ( @"t" == @"Start Timestep" OR "MonthIs"( { "August" } ) OR "StartMonthIsSeptember"(  ) ) AND "GetRunCycleIndex"(  ) == 4.00000000 AND ( "TierIs"( "Upper", @"t", TRUE ) OR "TierIs"( "Equalization", @"t", TRUE ) )
 ENDWITH;
    NOTES                "S.Baker, 2018/10/17: Copied from normal Powell policy set and changed execution constraints for Run Cycle 4 and LBDV. Go to original rule for development details prior to this date. <br>S.Baker, 2018/11/26: [edited to match normal Powell rule for RC #3] Added WITH statement to store TARV and use in IF statement to look if solved TARV was equal to previous TARV. Then, allow for setting of the PowellData.ReleaseVolumeSetFlag when TARV solved in the current iteration is equal to the previously set TARV. This is necessary for solving for the carryover release pattern from Powell. This occurs normally when TARV is not changed from 8.23 MAF. ";
    BEGIN

      IF_STATEMENT (( @"t" == @"Start Timestep" AND NOT "IsInput"( $ "PowellData.TargetAnnualReleaseVolume", "Dec31ofYear"( "RelativeEOWYDate"( @"t" ) ) ) ) COMMENTED_BY "At Start Timestep for initial water year when release tier is either Upper Elevation Balancing or Equalization") THEN
            WITH_STATEMENT (NUMERIC VolumeDeviation = "VolumeDeviationFromEOWYTarget"( "RelativeEOWYDate"( @"t" ) )) DO
            WITH_STATEMENT (NUMERIC ReleaseAdjustment = "ReleaseAdjustment"( VolumeDeviation, "RelativeEOWYDate"( @"t" ) )) DO
            IF_STATEMENT ("Abs"( ReleaseAdjustment ) > $ "PowellData.TARVTolerance" [] * $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )]) THEN
            WITH_STATEMENT (NUMERIC PowellnewTARV = "MaxItem"( { $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] + ReleaseAdjustment , NaNToZero ( $ "PowellData.UserInput_MinAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] ) , IF ( $ "PowellData.UpperElevBalBranch" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] == 1.27000000 OR $ "PowellData.UpperElevBalBranch" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] == 1.29000000 )
 THEN
  7000000.00000000 "acre-feet"
 ELSE
  8230000.00000000 "acre-feet"
 ENDIF COMMENTED_BY "If in UEB 1.2, the Min annual release is 7.0 MAF <br>" } )) DO
            $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] := PowellnewTARV;

          DESCRIPTION          "If TARV solved in this rule is equal to the previous TARV solved, then set the <br>ReleaseVolumeSetFlag. This allow carryover releases to be set if necessary.  <br>";
      IF_STATEMENT (PowellnewTARV == $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )]) THEN
            $ "PowellData.ReleaseVolumeSetFlag" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] := 1.00000000;

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

      ELSE
            $ "PowellData.ReleaseVolumeSetFlag" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] := 1.00000000;

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

          INACTIVE    DESCRIPTION          "MC, 20180111: This is now handled in ReleaseAdjustment function<br>If UEB Branch is 1.4, make sure release is within limits <br>";
      IF_STATEMENT ($ "PowellData.UpperElevBalBranch" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] == 1.40000000) THEN
            $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] := "Max"( "EnsureReleaseLimits"( "EqualizationRelease"( "DateToCheckEOWYElevation"( @"t", TRUE ) ), 8230.00000000 "1000 acre-ft", 9000.00000000 "1000 acre-ft" ), NaNToZero ( $ "PowellData.UserInput_MinAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"Start Timestep" ) )] ) );

      END_IF_STATEMENT;

      END_IF_STATEMENT;

    DESCRIPTION          "Check in August timestep or StartMonth of September with UEBT or Equalization for outyear";
      IF_STATEMENT ("MonthIs"( { "August" } ) OR "StartMonthIsSeptember"(  )) THEN
            WITH_STATEMENT (NUMERIC VolumeDeviation = "VolumeDeviationFromEOWYTarget"( "RelativeEOWYDate"( @"t + 2" ) )) DO
            WITH_STATEMENT (NUMERIC ReleaseAdjustment = "ReleaseAdjustment"( VolumeDeviation, "RelativeEOWYDate"( @"t + 2" ) )) DO
            IF_STATEMENT ("Abs"( VolumeDeviation ) > 0.00000000 "acre-feet") THEN
            WITH_STATEMENT (NUMERIC CurrentAnnualRelease = FOR ( DATETIME dates IN "GetDates"( "OffsetDate"( @"24:00:00 September Max DayOfMonth, Next Year", - 11.00000000, "1 months" ), @"24:00:00 September Max DayOfMonth, Next Year", "1 months" ) ) STAT_SUM
  "FlowToVolume"( $ "Powell.Outflow" [dates], dates )
 ENDFOR) DO
          DESCRIPTION          "MC, 20171102: This version added to handle carryover situation by setting ReleaseVolumeSetFlag <br>";
      IF_STATEMENT ("Abs"( $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] - ( CurrentAnnualRelease + VolumeDeviation ) - NaNToZero ( $ "PowellToMeadData.CarryoverVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) + 1.00000000 "year" )] ) + NaNToZero ( $ "PowellToMeadData.CarryoverVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] ) ) > ( $ "PowellData.TARVTolerance" [] * $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] ) COMMENTED_BY "The tolerance of the TARV slot; if the proposed change is less than this value the slot value won't change <br>") THEN
            WITH_STATEMENT (NUMERIC PowellnewTARV = "MaxItem"( { IF ( "Abs"( ReleaseAdjustment ) > 0.00000000 "acre-ft" )
 THEN
  ( CurrentAnnualRelease - IF ( $ "PowellData.UpperElevBalBranch" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] == 999.00000000 )
  THEN
   0.00000000 "acre-ft"
  ELSE
   NaNToZero ( $ "PowellToMeadData.CarryoverVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] )
  ENDIF COMMENTED_BY "Remove the Carryover That has been Added from last year Unless an Equalization Tier is the <br>current tier. <br>" ) + ReleaseAdjustment + NaNToZero ( $ "PowellToMeadData.CarryoverVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) + 1.00000000 "year" )] )
 ELSE
  $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] + ReleaseAdjustment
 ENDIF , NaNToZero ( $ "PowellData.UserInput_MinAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] ) , IF ( $ "PowellData.UpperElevBalBranch" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] == 1.27000000 OR $ "PowellData.UpperElevBalBranch" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] == 1.29000000 )
 THEN
  7000000.00000000 "acre-feet"
 ELSE
  8230000.00000000 "acre-feet"
 ENDIF COMMENTED_BY "If in UEB 1.2, the Min annual release is 7.0 MAF <br>" } )) DO
            $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := PowellnewTARV;

            IF_STATEMENT (PowellnewTARV == $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )]) THEN
            $ "PowellData.ReleaseVolumeSetFlag" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := 1.00000000;

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

      ELSE
            $ "PowellData.ReleaseVolumeSetFlag" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := 1.00000000;

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

      ELSE
            $ "PowellData.ReleaseVolumeSetFlag" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := 1.00000000;

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

          INACTIVE    DESCRIPTION          "MC, 20180111: This is now handled in ReleaseAdjustment function<br>If UEB Branch is 1.4, make sure release is within limits <br>";
      IF_STATEMENT ($ "PowellData.UpperElevBalBranch" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] == 1.40000000) THEN
            $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := "EnsureReleaseLimits"( "EqualizationRelease"( "DateToCheckEOWYElevation"( @"t", FALSE ) ), 8230.00000000 "1000 acre-ft", 9000.00000000 "1000 acre-ft" );

      END_IF_STATEMENT;

      END_IF_STATEMENT;

    END
    UUID "{6f4bc009-d2e0-4fbb-a2ec-a66a7ffe29ec}";;

    RULE                 "Set Upper Balancing Release Volume post-LBDV";
    DESCRIPTION          "DESCRIPTION: This rule sets the Target Annual Release Volume (TARV) when the Release Tier is set to Upper Elevation Balancing Tier. It also sets the Upper Elevation Balancing Branch, which indicates the conditions controlling the release volume, and resets the Release Tier and the Controlling Equalization Condition if necessary (UEB Branch = 1.3). This version of the rule executes in Run Cycle 4.<br><br>SLOTS SET: PowellData.TargetAnnualReleaseVolume; PowellData.UpperElevBalBranch; PowellData.ReleaseTier; PowellData.ControllingEqualizationCondition<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( "StartMonthIsSeptember"(  ) OR "MonthIs"( { "August" } ) ) AND @"t + 2" <= @"Finish Timestep" AND "TierIs"( "Upper", @"t", FALSE ) AND "GetRunCycleIndex"(  ) == 4.00000000 AND NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "AUTHOR, DATE: Unknown<br>MC, 20161215: In the conditional statement checking for EqualizationTeirCalculationForRelease, changed PowellToMeadData.AugEOYPowellPEProjection[meadProjectionDate] to Powell.Pool Elevation[DateToCheckEOWYElevation(@&quot;t&quot;,TRUE)]. The check needs to be on the EOWY pool elevation, not the previous year's projected EOY pool elevation, because this is checking to see if the decision tree should follow the branch from Upper Elevation Balancing to Equalization. I had incorrectly changed the date used when adding the carryover functionality.<br><br>MC, 20170511: The GetRunCycleIndex()==3 condition will never be satisfied due to the Execution Constraints. Compare with initial version of rule for Run Cycle 4 and correct<br><br>S.Baker, 20180829: Edited the function 'UpperEleavationBalancingBranchCalculation' to have the correct number of inputs. <br><br>S.Baker, 20180925: Rule should not fire in the start timestep (execution constraint removed and IF statement removed). This is done in a separate rule. Removed IsYearDemandVariabilityandRunCycle4() since rule should always execute in Run Cycle 4. Added TierIs() to execution constraint.<br>S.Baker, 09/25/2018: Changed the Mead.Pool Elevation input to function GetProjectedPoolElevation() function instead of looking at Mead Pool Elevation. This will allow MTOM to determine which PE projection to use (ie. AugEOYProjectedMeadPE).";
    BEGIN

    DESCRIPTION          "In August or September start month with UEBT for outyear";
      $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := IF ( "StorageToElevation"( % "Powell", "ElevationToStorage"( % "Powell", $ "Powell.Pool Elevation" ["DateToCheckEOWYElevation"( @"t", FALSE )] ) - NaNToZero ( $ "PowellToMeadData.CarryoverVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] ) ) > "EqLevel"( "DateToCheckEOWYElevation"( @"t", FALSE ) ) )
 THEN
  ( GET @INDEX 0.00000000 FROM "EqualizationTierCalculationForRelease"( "DateToCheckEOWYElevation"( @"t", FALSE ) ) ) - NaNToZero ( $ "PowellToMeadData.CarryoverVolume" ["Dec31ofYear"( "DateToCheckEOWYElevation"( @"t", FALSE ) )] )
 ELSE
  IF ( ( "StorageToElevation"( % "Mead", "ElevationToStorage"( % "Mead", "GetProjectedPoolElevation"( "Mead", @"24:00:00 December 31, Current Year" ) ) + NaNToZero ( $ "PowellToMeadData.CarryoverVolume" [@"24:00:00 December 31, Current Year"] ) ) >= 1075.00000000 "ft" ) COMMENTED_BY "Determine which branch of UEBT to follow" )
  THEN
   "B1_Branch_UpperBalancingTierVolume"( "DateToCheckEOWYElevation"( @"t", FALSE ) )
  ELSE
   "B2_Branch_UpperBalancingTierVolume"( "DateToCheckEOWYElevation"( @"t", FALSE ) )
  ENDIF
 ENDIF COMMENTED_BY "Check EOWY Powell Elevation.  If above equalization level then go to equalization teir calculation.  If not, continue...";

    DESCRIPTION          "Set Upper Elevation Balancing branch, and, if necessary, Release Tier and <br>Controlling Equalization Condition";
      WITH_STATEMENT (NUMERIC upperElevBranch = "UpperElevationBalancingBranchCalculation"( "DateToCheckEOWYElevation"( @"t", FALSE ) )) DO
            $ "PowellData.UpperElevBalBranch" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := upperElevBranch;

            IF_STATEMENT (upperElevBranch == 1.30000000) THEN
            $ "PowellData.ReleaseTier" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := 0.00000000;

            $ "PowellData.ControllingEqualizationCondition" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := GET @INDEX 1.00000000 FROM "EqualizationTierCalculationForRelease"( "DateToCheckEOWYElevation"( @"t", FALSE ) );

            $ "PowellData.ReleaseVolumeSetFlag" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := 1.00000000;

      ELSE
            $ "PowellData.ReleaseVolumeSetFlag" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := 1.00000000;

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{1eba6ddb-8796-468b-9d12-fa2dc80da02c}";;

    RULE                 "Set Equalization Release Volume post-LBDV";
    DESCRIPTION          "DESCRIPTION: This rule sets the Target Annual Release Volume (TARV) for years when the Release Tier is Equalization. It also calculates and sets the Controlling Equalization Condition slot, which indicates the equalization condition that dictated the volume to be released. This version executes in Run Cycle 4 if Lower Basin Demand Variability is in effect.<br><br>SLOTS SET: PowellData.TargetAnnualReleaseVolume; PowellData.ControllingEqualizationCondition<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( ( "StartMonthIsSeptember"(  ) OR "MonthIs"( { "August" } ) ) AND @"t + 2" <= @"Finish Timestep" AND "TierIs"( "Equalization", @"t", FALSE ) AND $ "PowellData.ReleaseTier" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] == 0.00000000 AND "GetRunCycleIndex"(  ) == 4.00000000 AND NOT "HasRuleFiredSuccessfully"( "Current Rule" ) ) COMMENTED_BY "This rule only fires in Run Cycle 4 with demand variability in effect, it is August, and the model has selected the Equalization teir for the current year. - sc 02/02/11; TP 08/20/2014; MC, 20170511";
    NOTES                "DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br><br>S.Baker, 20180925: Rule should not fire in the start timestep (execution constraint removed and IF statement removed). This is done in a separate rule. Removed IsYearDemandVariabilityandRunCycle4() since rule should always execute in Run Cycle 4. Added TierIs() to execution constraint. Disabled PowellData.ReleaseVolumeSetFlag since this flag should be set in the Refine Equalization rule. <br>S.Baker, 2018/10/17: updated run cycle execution constraint to RC == 4 (was 3 which was incorrect).";
    BEGIN

    DESCRIPTION          "Outyear with Equalization";
      $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := GET @INDEX 0.00000000 FROM "EqualizationTierCalculationForRelease"( "DateToCheckEOWYElevation"( @"t", FALSE ) );

      $ "PowellData.ControllingEqualizationCondition" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := GET @INDEX 1.00000000 FROM "EqualizationTierCalculationForRelease"( "DateToCheckEOWYElevation"( @"t", FALSE ) );

    INACTIVE      $ "PowellData.ReleaseVolumeSetFlag" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := 1.00000000;

    END
    UUID "{796178cf-8f6b-44cf-83f1-7b016f6d805b}";;

    RULE                 "Set Release Tier post-LBDV";
    DESCRIPTION          "DESCRIPTION: This rule fires at the Start Timestep and in August timesteps to set the Powell Release tier, as well as preliminarily setting the Upper Elevation Balancing Branch and Controlling Equalization Condition values to 999<br><br>SLOTS SET: PowellData.ReleaseTier; PowellData.UpperElevBalBranch; PowellData.ControllingEqualizationCondition<br><br>DEVELOPMENT NOTES:<br>AUTHOR, DATE: SC, 02/02/2011<br>MC, 20160802: Added EffectivePoolElevation variable for incorporating unreleased carryover volume into the release tier determination";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( "StartMonthIsSeptember"(  ) OR "MonthIs"( { "August" } ) ) AND @"t + 2" <= @"Finish Timestep" AND NOT "IsInput"( $ "PowellData.ReleaseTier", "Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) ) ) AND "GetRunCycleIndex"(  ) == 4.00000000 AND NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "AUTHOR, DATE: SC, 02/02/2011 (copied to LBDV from Powell policy group)<br><br>S.Baker, 20180925: Added rule to post-LBDV since rule in Powell policy set wont fire in Run Cycle 4 due to condiditon of HasRuleFiredSucessfully() constraint. <br>S.Baker, 20180925: Changed order of rules. Moved &quot;Set Release Tier post-LBDV&quot; to a higher priority than &quot;Preliminary Set Out Year Release Volume to 8.23MAF post-LBDV&quot;. The priority issue was causing incorrectly calculated Release Tiers in the post-LBDV rules. When the ruleset got to the rule &quot;Set Release Tier post-LBDV&quot; the release for the water year was still set to a higher TARV (9.0MAF). This caused the rules to calculate the wrong release. MTOM then reset the TARV to 8.23MAF in &quot;Preliminary Set Out Year Release Volume to 8.23MAF post-LBDV&quot;. Switching the order of the rules allows for the TARV to be reset to 8.23MAF before calculating the release tier. ";
    BEGIN

    DESCRIPTION          "Model needs to set the teir for the following water year if current timestep is August. <br>";
      IF_STATEMENT ("MonthIs"( { "August" } ) OR "StartMonthIsSeptember"(  ) AND @"t + 2" IN "WaterYearDatesByGroup"( 2.00000000 )) THEN
            WITH_STATEMENT (NUMERIC Carryover = NaNToZero ( $ "PowellToMeadData.CarryoverVolume" [@"24:00:00 December 31, Next Year"] )) DO
            WITH_STATEMENT (NUMERIC EffectivePoolElevation = "StorageToElevation"( % "Powell", $ "Powell.Storage" [@"24:00:00 December 31, Current Year"] - Carryover )) DO
            $ "PowellData.ReleaseTier" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := "PowellReleaseTier"( IF ( @"t" == @"Start Timestep" )
 THEN
  $ "PowellToMeadData.AugEOYPowellPEProjection" ["DateToCheckJan1Elevation"( @"t + 2", TRUE )]
 ELSE
  EffectivePoolElevation
 ENDIF, "RelativeEOWYDate"( @"t + 2" ) );

            $ "PowellData.UpperElevBalBranch" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := 999.00000000;

            $ "PowellData.ControllingEqualizationCondition" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := 999.00000000;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_IF_STATEMENT;

    DESCRIPTION          "The model will set the tier for the third year of the model run (second out year)";
      IF_STATEMENT ("MonthIs"( { "August" } ) AND @"t + 2" IN "WaterYearDatesByGroup"( 3.00000000 )) THEN
            WITH_STATEMENT (NUMERIC EffectivePoolElevation = "StorageToElevation"( % "Powell", $ "Powell.Storage" [@"24:00:00 December 31, Current Year"] - NaNToZero ( $ "PowellToMeadData.CarryoverVolume" [@"24:00:00 December 31, Next Year"] ) )) DO
            $ "PowellData.ReleaseTier" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := "PowellReleaseTier"( EffectivePoolElevation, "RelativeEOWYDate"( @"t + 2" ) );

            $ "PowellData.UpperElevBalBranch" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := 999.00000000;

            $ "PowellData.ControllingEqualizationCondition" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := 999.00000000;

      END_WITH_STATEMENT;

      END_IF_STATEMENT;

    DESCRIPTION          "Third out year of the model run";
      IF_STATEMENT ("MonthIs"( { "August" } ) AND @"t + 2" IN "WaterYearDatesByGroup"( 4.00000000 )) THEN
            WITH_STATEMENT (NUMERIC EffectivePoolElevation = "StorageToElevation"( % "Powell", $ "Powell.Storage" [@"24:00:00 December 31, Current Year"] - NaNToZero ( $ "PowellToMeadData.CarryoverVolume" [@"24:00:00 December 31, Next Year"] ) )) DO
            $ "PowellData.ReleaseTier" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := "PowellReleaseTier"( EffectivePoolElevation, "RelativeEOWYDate"( @"t + 2" ) );

            $ "PowellData.UpperElevBalBranch" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := 999.00000000;

            $ "PowellData.ControllingEqualizationCondition" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := 999.00000000;

      END_WITH_STATEMENT;

      END_IF_STATEMENT;

    DESCRIPTION          "Fourth out year of model run";
      IF_STATEMENT ("MonthIs"( { "August" } ) AND @"t + 2" IN "WaterYearDatesByGroup"( 5.00000000 )) THEN
            WITH_STATEMENT (NUMERIC EffectivePoolElevation = "StorageToElevation"( % "Powell", $ "Powell.Storage" [@"24:00:00 December 31, Current Year"] - NaNToZero ( $ "PowellToMeadData.CarryoverVolume" [@"24:00:00 December 31, Next Year"] ) )) DO
            $ "PowellData.ReleaseTier" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := "PowellReleaseTier"( EffectivePoolElevation, "RelativeEOWYDate"( @"t + 2" ) );

            $ "PowellData.UpperElevBalBranch" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := 999.00000000;

            $ "PowellData.ControllingEqualizationCondition" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := 999.00000000;

      END_WITH_STATEMENT;

      END_IF_STATEMENT;

    DESCRIPTION          "Fifth out year of model run if it exists in the forecast";
      IF_STATEMENT ("MonthIs"( { "August" } ) AND @"t + 2" IN "WaterYearDatesByGroup"( 6.00000000 )) THEN
            WITH_STATEMENT (NUMERIC EffectivePoolElevation = "StorageToElevation"( % "Powell", $ "Powell.Storage" [@"24:00:00 December 31, Current Year"] - NaNToZero ( $ "PowellToMeadData.CarryoverVolume" [@"24:00:00 December 31, Next Year"] ) )) DO
            $ "PowellData.ReleaseTier" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := "PowellReleaseTier"( EffectivePoolElevation, "RelativeEOWYDate"( @"t + 2" ) );

            $ "PowellData.UpperElevBalBranch" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := 999.00000000;

            $ "PowellData.ControllingEqualizationCondition" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := 999.00000000;

      END_WITH_STATEMENT;

      END_IF_STATEMENT;

    END
    UUID "{1e37ef40-8fde-4d4e-9d5c-09507136bf11}";;

    RULE                 "Preliminary Set Out Year Release Volume To 8.23MAF post-LBDV";
    DESCRIPTION          "DESCRIPTION: This rule preliminarily sets outflows from Powell in order to evaluate the projections of Powell and Mead elevations used for tierthe  selection calculation.  It sets the release volume to 8.23 MAF unless doing so will cause the model to fail by overfilling Powell.  In that case it sets the annual release volumes to the amount needed to just keep Powell below its max elevation.  The rule fires on the first timestep of run cycle 3 and should allow the whole model to solve for this preliminary condition.  Subsequent rules will then calculate the appropriate tier values for each water year in the run and then set the releases from Powell on a monthly basis. - sc 03/25/11<br><br>SLOTS SET: PowellData.TargetAnnualReleaseVolume<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( "StartMonthIsSeptember"(  ) OR "MonthIs"( { "August" } ) ) AND @"t + 2" <= @"Finish Timestep" AND "GetRunCycleIndex"(  ) == 4.00000000 AND NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "AUTHOR, DATE: SC, 03/25/2011<br><br>S.Baker, 20190710: Edited the Max() statement to match the normal rule. The rule was using a function used in the Equalization rule instead of setting initial TARV to 8.23 (or close). <br>S.Baker, 20180925: Removed IsYearDemandVariabilityandRunCycle4() since rule should always execute in Run Cycle 4. <br>S.Baker, 20180925: Changed order of rules. Moved &quot;Set Release Tier post-LBDV&quot; to a higher priority than &quot;Preliminary Set Out Year Release Volume to 8.23MAF post-LBDV&quot;. The priority issue was causing incorrectly calculated Release Tiers in the post-LBDV rules. When the ruleset got to the rule &quot;Set Release Tier post-LBDV&quot; the release for the water year was still set to a higher TARV (9.0MAF). This caused the rules to calculate the wrong release. MTOM then reset the TARV to 8.23MAF in &quot;Preliminary Set Out Year Release Volume to 8.23MAF post-LBDV&quot;. Switching the order of the rules allows for the TARV to be reset to 8.23MAF before calculating the release tier. ";
    BEGIN

      WITH_STATEMENT (NUMERIC waterYearNumber = "GetYear"( @"t" ) - "GetYear"( @"Start Timestep" ) + IF ( "GetMonth"( @"Start Timestep" ) > 9.00000000 )
 THEN
  1.00000000
 ELSE
  2.00000000
 ENDIF) DO
            WITH_STATEMENT (NUMERIC AvailablePowellWater = ( IF ( "GetMonth"( @"Start Timestep" ) == 9.00000000 )
 THEN
  $ "Powell.Storage" [@"t - 1"]
 ELSE
  $ "Powell.Storage" [@"t + 1"]
 ENDIF COMMENTED_BY "MC, 20170511: I don't understand the below conditions" + FOR ( DATETIME date IN "WaterYearDatesByGroup"( waterYearNumber ) ) STAT_SUM
  "FlowToVolume"( $ "Powell.Inflow" [date], date )
 ENDFOR ) COMMENTED_BY "This is added to check that in years when Powell might go very low, the model won't bomb out <br>when setting the preliminary release when Powell is low. TP 1/22/2013<br>") DO
            WITH_STATEMENT (DATETIME WY_EndOfCalendarYearDate = "Dec31ofYear"( "OffsetDate"( "RelativeEOWYDate"( @"Start Timestep" ), waterYearNumber - 1.00000000, "1 years" ) )) DO
            WITH_STATEMENT (NUMERIC VolumeToRelease = "Min"( "MaxItem"( { 8230.00000000 "1000 acre-feet" , WITH SLOT releaseTable = IF ( "GetYear"( @"Start Timestep" ) >= 2017.00000000 )
 THEN
  $ "PowellData.PowellMonthlyReleaseTable"
 ELSE
  $ "PowellData.PowellMonthlyReleaseTable_preJan2017"
 ENDIF DO
  "Min"( 8230.00000000 "1000 acre-feet", releaseTable ["AnnualTotal", "NumColumns"( releaseTable ) - 2.00000000] )
 ENDWITH COMMENTED_BY "Ensure release enough so Powell doesn't exceed max pool elevation" , NaNToZero ( $ "PowellData.UserInput_MinAnnualReleaseVolume" [WY_EndOfCalendarYearDate] ) COMMENTED_BY "User input minimum annual release volume" } ), AvailablePowellWater )) DO
            IF_STATEMENT (NOT "IsInput"( $ "PowellData.TargetAnnualReleaseVolume", WY_EndOfCalendarYearDate )) THEN
            $ "PowellData.TargetAnnualReleaseVolume" [WY_EndOfCalendarYearDate] := VolumeToRelease;

          DESCRIPTION          "These flags have to be reset and set again if go to LBDV <br>";
      $ "PowellData.ReleaseVolumeSetFlag" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := 0.00000000;

          INACTIVE      $ "PowellData.CarryoverSetFlag" ["Dec31ofYear"( "GetWaterYearEndDate"( @"t + 2" ) )] := 0.00000000;

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{00ac8008-5e6e-42a9-b9c2-8c5d6d8671a9}";;

    RULE                 "Set WY1 Release Volume post-LBDV";
    DESCRIPTION          "DESCRIPTION: This rule sets the Target Annual Release Volume (TARV) for the first WY for any release Tier designation. It also calculates and sets the Controlling Equalization Condition slot, which indicates the condition that dictated the volume to be released based on which Tier has been set. <br><br>SLOTS SET: Some combination of the following - PowellData.TargetAnnualReleaseVolume; PowellData.ControllingEqualizationCondition; PowellData.UpperElevBalBranch<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( @"t" == @"Start Timestep" AND NOT "IsInput"( $ "PowellData.TargetAnnualReleaseVolume", "Dec31ofYear"( "RelativeEOWYDate"( @"t" ) ) ) AND "GetRunCycleIndex"(  ) == 4.00000000 AND NOT "HasRuleFiredSuccessfully"( "Current Rule" ) ) COMMENTED_BY "This rule only executes in Run Cycle 4; at the Start Timestep for only the first <br>WY;  and if the rule has not already fired successfully for the timestep   <br>";
    NOTES                "AUTHOR, DATE: Unknown (copied rule from Powell policy group)<br><br>S.Baker, 20180925: Added rule to post-LBDV since rule in Powell policy set wont fire in Run Cycle 4 due to condiditon of HasRuleFiredSucessfully() constraint. <br>AP, 2019/04/11: Added contstraint where it sets TARV to make sure the model won't equalize when the upper elevation balan branch is an input";
    BEGIN

      IF_STATEMENT ("TierIs"( "Equalization", @"t", TRUE ) COMMENTED_BY "Initial water year, in an Equalization Condition in Start Year <br>") THEN
            $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] := "MaxItem"( { GET @INDEX 0.00000000 FROM "EqualizationTierCalculationForRelease"( "DateToCheckEOWYElevation"( @"t", TRUE ) ) , NaNToZero ( $ "PowellData.UserInput_MinAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] ) , 8230000.00000000 "acre-feet" } );

            $ "PowellData.ControllingEqualizationCondition" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] := GET @INDEX 1.00000000 FROM "EqualizationTierCalculationForRelease"( "DateToCheckEOWYElevation"( @"t", TRUE ) );

      END_IF_STATEMENT;

    DESCRIPTION          "For Start Timestep in Run Cycle 3 with UEBT in Start Year";
      IF_STATEMENT ("TierIs"( "Upper", @"t", TRUE )) THEN
            $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] := WITH DATETIME meadProjectionDate = IF ( @"t" <= @"September 30" )
 THEN
  @"24:00:00 December 31, Previous Year"
 ELSE
  @"24:00:00 December 31, Current Year"
 ENDIF DO
  IF ( "StorageToElevation"( % "Powell", "ElevationToStorage"( % "Powell", $ "Powell.Pool Elevation" ["DateToCheckEOWYElevation"( @"t", TRUE )] ) - NaNToZero ( $ "PowellToMeadData.CarryoverVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] ) ) > "EqLevel"( "DateToCheckEOWYElevation"( @"t", TRUE ) ) AND NOT "IsInput"( $ "PowellData.UpperElevBalBranch", "Dec31ofYear"( "RelativeEOWYDate"( @"t" ) ) ) OR ( "IsInput"( $ "PowellData.UpperElevBalBranch", "Dec31ofYear"( "RelativeEOWYDate"( @"t" ) ) ) AND $ "PowellData.UpperElevBalBranch" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] == 1.30000000 ) )
  THEN
   GET @INDEX 0.00000000 FROM "EqualizationTierCalculationForRelease"( "DateToCheckEOWYElevation"( @"t", TRUE ) )
  ELSE
   IF ( "StorageToElevation"( % "Mead", "ElevationToStorage"( % "Mead", $ "PowellToMeadData.AugEOYMeadPEProjection" [meadProjectionDate] ) + NaNToZero ( $ "PowellToMeadData.CarryoverVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] ) ) >= 1075.00000000 "ft" OR ( "IsInput"( $ "PowellData.UpperElevBalBranch", "Dec31ofYear"( "RelativeEOWYDate"( @"t" ) ) ) AND NOT $ "PowellData.UpperElevBalBranch" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] == 1.20000000 ) )
   THEN
    "Max"( "B1_Branch_UpperBalancingTierVolume"( "DateToCheckEOWYElevation"( @"t", TRUE ) ), NaNToZero ( $ "PowellData.UserInput_MinAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"Start Timestep" ) )] ) )
   ELSE
    "Max"( "B2_Branch_UpperBalancingTierVolume"( "DateToCheckEOWYElevation"( @"t", TRUE ) ), NaNToZero ( $ "PowellData.UserInput_MinAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"Start Timestep" ) )] ) )
   ENDIF COMMENTED_BY "Determine which branch of UEBT to follow"
  ENDIF COMMENTED_BY "Check EOWY Powell Elevation.  If above equalization level then go to equalization teir calculation.  If not, continue..."
 ENDWITH;

          DESCRIPTION          "Set Upper Elevation Balancing branch, and, if necessary, Release Tier and <br>Controlling Equalization Condition";
      WITH_STATEMENT (NUMERIC upperElevBranch = IF ( "IsInput"( $ "PowellData.UpperElevBalBranch", "Dec31ofYear"( "RelativeEOWYDate"( @"t" ) ) ) )
 THEN
  $ "PowellData.UpperElevBalBranch" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )]
 ELSE
  "UpperElevationBalancingBranchCalculation"( "DateToCheckEOWYElevation"( @"t", TRUE ) )
 ENDIF) DO
          DESCRIPTION          "Check if branch is input before trying to set slot <br>";
      IF_STATEMENT (NOT "IsInput"( $ "PowellData.UpperElevBalBranch", "Dec31ofYear"( "RelativeEOWYDate"( @"t" ) ) )) THEN
            $ "PowellData.UpperElevBalBranch" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] := upperElevBranch;

      END_IF_STATEMENT;

            IF_STATEMENT (upperElevBranch == 1.30000000) THEN
            $ "PowellData.ReleaseTier" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] := 0.00000000;

            IF_STATEMENT (NOT "IsInput"( $ "PowellData.ControllingEqualizationCondition", "Dec31ofYear"( "RelativeEOWYDate"( @"t" ) ) )) THEN
            $ "PowellData.ControllingEqualizationCondition" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] := GET @INDEX 1.00000000 FROM "EqualizationTierCalculationForRelease"( "DateToCheckEOWYElevation"( @"t", TRUE ) );

      END_IF_STATEMENT;

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

      END_IF_STATEMENT;

    DESCRIPTION          "For Start Timestep with Mid-Elevation tier in initial water year";
      IF_STATEMENT ("TierIs"( "Mid", @"t", TRUE )) THEN
            $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] := "Max"( IF ( "StorageToElevation"( % "Mead", "ElevationToStorage"( % "Mead", $ "PowellToMeadData.AugEOYMeadPEProjection" ["DateToCheckJan1Elevation"( @"t", TRUE )] ) + NaNToZero ( $ "PowellToMeadData.CarryoverVolume" ["DateToCheckJan1Elevation"( @"t", TRUE )] ) ) >= 1025.00000000 "ft" )
 THEN
  7480.00000000 "1000 acre-ft"
 ELSE
  8230.00000000 "1000 acre-ft"
 ENDIF, NaNToZero ( $ "PowellData.UserInput_MinAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"Start Timestep" ) )] ) );

      END_IF_STATEMENT;

    DESCRIPTION          "For Start Timestep with Lower Balancing Release Tier in initial water year";
      IF_STATEMENT ("TierIs"( "Lower", @"t", TRUE )) THEN
            $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] := "Min"( "Max"( "EqualizationReleaseWithCarryover"( "RelativeEOWYDate"( @"t" ) ), $ "PowellData.LowerTierMinAnnualRelease" [] ), $ "PowellData.LowerTierMaxAnnualRelease" [] );

      END_IF_STATEMENT;

    END
    UUID "{be04a389-6176-4607-9ddf-1d26fb5a16f9}";;

    RULE                 "Set WY1 Release Tier post-LBDV";
    DESCRIPTION          "DESCRIPTION: This rule fires at the Start Timestep and in August timesteps to set the Powell Release tier, as well as preliminarily setting the Upper Elevation Balancing Branch and Controlling Equalization Condition values to 999, for the First Water Year<br><br>SLOTS SET: PowellData.ReleaseTier; PowellData.UpperElevBalBranch; PowellData.ControllingEqualizationCondition";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep" AND ( "GetRunCycleIndex"(  ) == 4.00000000 AND NOT "HasRuleFiredSuccessfully"( "Current Rule" ) ) AND IsNaN $ "PowellData.ReleaseTier" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )];
    NOTES                "AUTHOR, DATE: SC, 02/02/2011 (copied rule from Powell policy group)<br><br>S.Baker, 20180925: Added rule to post-LBDV since rule in Powell policy set wont fire in Run Cycle 4 due to condiditon of HasRuleFiredSucessfully() constraint";
    BEGIN

    DESCRIPTION          "Model needs to set the teir for the current year if at the start timestep, regardless of month. <br>";
      $ "PowellData.ReleaseTier" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] := "PowellReleaseTier"( $ "PowellToMeadData.AugEOYPowellPEProjection" ["DateToCheckJan1Elevation"( @"t", TRUE )], "RelativeEOWYDate"( @"t" ) );

      IF_STATEMENT (IsNaN $ "PowellData.UpperElevBalBranch" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )]) THEN
            $ "PowellData.UpperElevBalBranch" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] := 999.00000000;

      END_IF_STATEMENT;

      IF_STATEMENT (IsNaN $ "PowellData.ControllingEqualizationCondition" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )]) THEN
            $ "PowellData.ControllingEqualizationCondition" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] := 999.00000000;

      END_IF_STATEMENT;

    END
    UUID "{b7ba1dd0-7e9c-4d59-ada8-66d94dffa65d}";;

    RULE                 "Preliminary Set WY1 Release Volume To 8.23MAF post-LBDV";
    DESCRIPTION          "DESCRIPTION: This rule preliminarily sets outflows from Powell in order to evaluate the projections of Powell and Mead elevations used for tierthe  selection calculation.  It sets the release volume to 8.23 MAF unless doing so will cause the model to fail by overfilling Powell.  In that case it sets the annual release volumes to the amount needed to just keep Powell below its max elevation.  The rule fires on the first timestep of run cycle 3 and should allow the whole model to solve for this preliminary condition.  Subsequent rules will then calculate the appropriate tier values for each water year in the run and then set the releases from Powell on a monthly basis. - sc 03/25/11<br><br>SLOTS SET: PowellData.TargetAnnualReleaseVolume<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep" AND "GetRunCycleIndex"(  ) == 4.00000000 AND NOT "HasRuleFiredSuccessfully"( "Current Rule" ) AND NOT "IsInput"( $ "PowellData.TargetAnnualReleaseVolume", "Dec31ofYear"( "RelativeEOWYDate"( @"t" ) ) );
    NOTES                "AUTHOR, DATE: SC, 03/25/2011<br><br>S.Baker, 20180925: Edited execution constraints to match Powell policy group rule. Changed rule TARV calculation to match Powell policy set rule. <br><br>S.Baker, 2018/10/17: Changed column number in releaseTable[AnnualVolume, Ncol - 3]<br>MTOM was failing in testbed runs in this rule in high inflow years when Powell was trying to release a large volume. In the historical run of 1983-06, the model aborted since it sets the initial TARV to 30 MAF based on the condition releaseTable[AnnualVolume, Ncol ? 2].  This caused the model to look for too high of upper bound in the function ?CalculatePowellMonthlyRelease?.  The upper bound was being reset in function 'FindRemainingReleaseUpperBoundColumn' by adding + 1 index which cause model to look for table index that didn?t exist. When we use Ncol ? 3, the TARV is initially set to 20 MAF and MTOM runs successfully finding a realistic TARV (18 MAF). ";
    BEGIN

      IF_STATEMENT (NOT "IsInput"( $ "PowellData.TargetAnnualReleaseVolume", "Dec31ofYear"( "RelativeEOWYDate"( @"t" ) ) )) THEN
            $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] := "MaxItem"( { 8230.00000000 "1000 acre-feet" , WITH SLOT releaseTable = IF ( "GetYear"( @"Start Timestep" ) >= 2017.00000000 )
 THEN
  $ "PowellData.PowellMonthlyReleaseTable"
 ELSE
  $ "PowellData.PowellMonthlyReleaseTable_preJan2017"
 ENDIF DO
  "Min"( "CalcReleaseForMaxPoolElevation"( "WaterYearDatesByGroup"( 1.00000000 ) ), releaseTable ["AnnualTotal", "NumColumns"( releaseTable ) - 3.00000000] )
 ENDWITH COMMENTED_BY "Ensure enough water released so Powell does not exceed max pool elevation" , NaNToZero ( $ "PowellData.UserInput_MinAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] ) COMMENTED_BY "User input min annual volume was added to allow overriding automatic determination" , IF ( "GetMonth"( @"t" ) != 10.00000000 )
 THEN
  "SumFlowsToVolume"( $ "Powell.Outflow", "OffsetDate"( @"t", "MonthsSinceEOWY"( @"t" ), "-1 months" ), @"Start Timestep - 1" )
 ELSE
  0.00000000 "acre-foot"
 ENDIF COMMENTED_BY "Ensure TARV is not less than volume already released in water year" } );

          DESCRIPTION          "These flags have to be reset and set again if go to LBDV <br>";
      $ "PowellData.ReleaseVolumeSetFlag" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] := 0.00000000;

          INACTIVE      $ "PowellData.CarryoverSetFlag" ["Dec31ofYear"( "GetWaterYearEndDate"( @"t" ) )] := 0.00000000;

      END_IF_STATEMENT;

    END
    UUID "{c0de35a8-26d3-43b9-9349-a5c393b3de46}";;

  END
  UUID "{2b602780-8fa0-4012-8cf3-2c6a6ec1bdd2}";;

  POLICY_GROUP   "Powell";
  DESCRIPTION    "Annual operations of Lake Powell follow the guidelines specified in the 2007 Record of Decision for the Colorado River Interim Guidelines for Lower Basin Shortages and the Coordinated Operations for Lake Powell and Lake Mead (2007 Interim Guidelines). The 2007 Interim Guidelines specify several requirements that coordinate annual operations between Lake Powell and Lake Mead. The objective of coordinated operations is to avoid curtailment of uses in the Upper Basin, minimize shortages in the Lower Basin, and not adversely affect the yield for development available in the Upper Basin.<br>The 2007 Interim Guidelines specify annual release volumes for each of the four tiers, described herein. Operating tiers are set based upon the August projection of the following January 1 elevation, but in some cases are subject to an April adjustment.   <br>Equalization Tier <br>In water years when the Lake Powell January 1 pool elevation is projected to be greater than or equal to the Equalization elevation for the water year (see the 2007 Interim Guidelines), an amount of water greater than 8.23 MAF will be released from Lake Powell to the extent necessary to avoid spills or equalize the storage in the two reservoirs, otherwise to remain at 8.23 MAF. If, however, Lake Powell reaches the Equalization elevation and the September 30 projected Lake Mead elevation is below 1,105 feet, then additional water will be released until the first of the following occur: (i) Lake Powell and Lake Mead storages equalize, (ii) Lake Mead pool elevation reaches 1,105 feet, or (iii) Lake Powell pool elevation is equal to 20 feet less than the Equalization level for that year. <br>Upper Elevation Balancing Tier <br>If the August 24-Month Study projects the Lake Powell pool elevation for January 1 to be less than the elevation stated in the Lake Powell Equalization Elevation Table and at or above 3,575 feet, then the tier is Upper Elevation Balancing Tier. If the August 24-Month Study also projects the Lake Mead January 1 pool elevation to be greater than 1,075 feet, then 8.23 MAF will be released from Lake Powell. <br>If the August 24-Month Study projects the January 1 Lake Powell elevation to be below the elevation stated in the Lake Powell Equalization Elevation Table and at or above 3,575 feet, and the projected January 1 Lake Mead elevation is below 1,075 feet, the release from Lake Powell shall balance the contents of Lake Mead and Lake Powell, but shall be not more than 9.0 MAF and not less than 7.0 MAF in the water year. <br>When operating in the Upper Elevation Balancing Tier, if the April 24-Month Study projects the September 30 Lake Powell elevation to be greater than the elevation in the Lake Powell Equalization Elevation Table, the Equalization Tier will govern the operation of Lake Powell for the remainder of the water year (through September). <br>When operating under the Upper Elevation Balancing Tier with an 8.23 MAF release, if the April 24-Month Study projects the September 30 Lake Mead elevation to be below 1,075 feet and the September 30 Lake Powell elevation to be at or above 3,575 feet, the releases from Lake Powell shall balance the contents of Lake Mead and Lake Powell, but shall not be more than 9.0 MAF and not less than 8.23 MAF in the water year. <br>Mid-Elevation Release Tier <br>If the August 24-Month Study projects the January 1 Lake Powell pool elevation to be less than 3,575 feet and greater than or equal to 3,525 feet, the operating tier is the Mid-Elevation Release Tier. Within this tier, if the August 24-Month Study projects the Lake Mead January 1 pool elevation to be greater than 1,025 feet, Lake Powell will release 7.48 MAF. If the August 24-Month Study projects the Lake Mead January 1 pool elevation to be less than or equal to 1,025 feet, Lake Powell will release 8.23 MAF. Once established in August, this Lake Powell annual release volume is set for the duration of the upcoming water year. <br>Lower Elevation Balancing Tier <br>If the August 24-Month Study projects the Lake Powell January 1 pool elevation to be less than 3,525 feet, the operating tier is Lower Elevation Balancing Tier. The release from Lake Powell is set to balance the contents of Lakes Powell and Mead by the end of the upcoming water year, but will not be greater than 9.5 MAF and not less than 7.0 MAF. ";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Set Lower Balancing Release Volume";
    DESCRIPTION          "DESCRIPTION: This rule sets the Target Annual Release Volume (TARV) when the Release Tier is set to Lower Elevation Balancing Tier. <br><br>SLOTS SET: PowellData.TargetAnnualReleaseVolume<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( "StartMonthIsSeptember"(  ) OR "MonthIs"( { "August" } ) ) AND "TierIs"( "Lower", @"t", FALSE ) AND "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "AUTHOR, DATE: Unknown<br><br>TP 20171017: Removed Setting the volume for the first water year, only sets outyear volumes now<br>S.Baker, 20180924: Added new Execution Constraint that looks at TierIs(). This allows the removal of the IF statement.";
    BEGIN

    DESCRIPTION          "For August timestep with Lower Balancing Release Tier in next outyear";
      $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := "Min"( "Max"( "EqualizationReleaseWithCarryover"( "RelativeEOWYDate"( @"t + 2" ) ), $ "PowellData.LowerTierMinAnnualRelease" [] ), $ "PowellData.LowerTierMaxAnnualRelease" [] );

      $ "PowellData.ReleaseVolumeSetFlag" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := 1.00000000;

    END
    UUID "{e337f335-de97-4570-b3be-44b2ff132897}";;

    RULE                 "Set Mid-Elevation Release Volume";
    DESCRIPTION          "DESCRIPTION: This rule sets the Target Annual Release Volume (TARV) when the Release Tier is set to Mid-Elevation Tier for Out Years. <br><br>SLOTS SET: PowellData.TargetAnnualReleaseVolume<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( "StartMonthIsSeptember"(  ) OR "MonthIs"( { "August" } ) ) AND "TierIs"( "Mid", @"t", FALSE ) AND "GetRunCycleIndex"(  ) == 3.00000000 AND NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "AUTHOR, DATE: Unknown<br><br>MC, 20170718: Added &quot;OR StartMonthIsSeptember()&quot; to condition originally for August; Sarah B. discovered this error and proposed the fix<br><br>TP, 20171017: Removed any setting of the First water year from this Rule<br><br>S.Baker, 20180924: Added new Execution Constraint that looks at TierIs(). This allows the removal of the IF statement.<br>S.Baker, 09/25/2018: Changed the Mead.Pool Elevation input to function GetProjectedPoolElevation() function instead of looking at Mead.Pool Elevation. This will allow MTOM to determine which Mead PE projection to use (ie. AugEOYProjectedMeadPool elevation).";
    BEGIN

    DESCRIPTION          "In August with Mid-elevation tier for the next outyear";
      $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := IF ( "StorageToElevation"( % "Mead", "ElevationToStorage"( % "Mead", "GetProjectedPoolElevation"( "Mead", @"24:00:00 December 31, Current Year" ) ) + NaNToZero ( $ "PowellToMeadData.CarryoverVolume" [@"24:00:00 December 31, Current Year"] ) ) >= 1025.00000000 "ft" )
 THEN
  7480.00000000 "1000 acre-ft"
 ELSE
  8230.00000000 "1000 acre-ft"
 ENDIF;

      $ "PowellData.ReleaseVolumeSetFlag" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := 1.00000000;

    END
    UUID "{0842e232-37ba-4aec-a27b-581fe16ea9aa}";;

    RULE                 "Refine Equalization Release Volume";
    DESCRIPTION          "DESCRIPTION: This rule refines the annual release volume from Powell when either the Equalization Tier or Upper Elevation Balancing Tier B3 branch is operative for setting the annual release from Powell.  The release needs to be refined by this rule because when it is originally set, it is a preliminary &quot;guess&quot; for the volume it will take to arrive at the appropriate final (end of water year) condition (Equalized storage volumes, or Powell at a specific pool elevation at the end of the year - see Equalization Tier logic for more details as to what the final eowy condition should be).  This volume is then released and the end of year condition is checked against what it is supposed to be.  The first guess will almost always be off by some amount because of the non-linear elements in the water balance in both Powell and Mead of Evaporation and Bank Storage.  So rather than trying to set up a calculation or mini-simulation to calculate the exact right release volume to hit the end of water year condtion the first time, the guess volume is actually released and then this rule, because it can see the results of the original release, adjusts the release volume to eliminate the deviation from the target that it observes as a result of the initial guess release.  This rule is allowed to fire multiple times in a timestep and may do so in order to hit exactly the end of water year target condition. - sc 06/21/12<br><br>SLOTS SET: PowellData.TargetAnnualReleaseVolume<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT WITH DATETIME eoyDate = IF ( "MonthIs"( { "August" } ) OR "StartMonthIsSeptember"(  ) )
 THEN
  "Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )
 ELSE
  "Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )
 ENDIF COMMENTED_BY "Make sure using appropriate year value" DO
  ( "TierIs"( "Upper", @"t", TRUE ) OR "TierIs"( "Equalization", @"t", TRUE ) ) AND ( "GetRunCycleIndex"(  ) == 3.00000000 AND ( "HasRuleFiredSuccessfully"( "Set Equalization Release Volume" ) OR ( "HasRuleFiredSuccessfully"( "Set Upper Balancing Release Volume" ) AND $ "PowellData.UpperElevBalBranch" [eoyDate] == 1.30000000 ) ) ) AND ( @"t" == @"Start Timestep" OR "MonthIs"( { "August" } ) OR "StartMonthIsSeptember"(  ) )
 ENDWITH;
    NOTES                "AUTHOR, DATE: SC, 06/21/2012<br><br>MC, 20171102: Added use of new slot PowellData.TARVTolerance to determine when refinement of TARV will stop.<br><br>S.Baker, 20180924: Added new Execution Constraint that looks at TierIs(). This allows the removal of the IF statement. Add time step run constraint to match IFs in rule.<br><br>S.Baker, 2018/10/17 & 2018/11/26: (edited #1 at later date)<br>(1) Added WITH statement to store TARV and use in IF statement to look if solved TARV was equal to previous TARV. Then, allow for setting of the PowellData.ReleaseVolumeSetFlag when TARV solved in the current iteration is equal to the previously set TARV. This is necessary for solving for the carryover release pattern from Powell. This occurs normally when TARV is not changed from 8.23 MAF. <br>(2) When calculating if the [ TARV - (CurrentAnnualRelease + VolumeDeviation) ] is within the TARV tolerance, carryover needs to be subtracted from the calculated volume. If there was a carryover volume calculated from the current year, the CurrentAnnualRelease would not account for this carryover volume that could not be released from Powell. <br>(3) When taking the MaxItem, the first IF statement needs to account for negative values for ReleaseAdjustment. This is done by taking the absolute value of ReleaseAdjustment. <br>(4) The calculation resulting from a true IF statement (in the MaxItem function) needs to account for carryover. The new TARV calculation should account be: [ CurrentAnnualRelease - Carryover(from last year if not UEB) + Release Adjust + Carryover(from current year) ] ";
    BEGIN

      IF_STATEMENT (( @"t" == @"Start Timestep" AND NOT "IsInput"( $ "PowellData.TargetAnnualReleaseVolume", "Dec31ofYear"( "RelativeEOWYDate"( @"t" ) ) ) ) COMMENTED_BY "At Start Timestep for initial water year when release tier is either Upper Elevation Balancing or Equalization") THEN
            WITH_STATEMENT (NUMERIC VolumeDeviation = "VolumeDeviationFromEOWYTarget"( "RelativeEOWYDate"( @"t" ) )) DO
            WITH_STATEMENT (NUMERIC ReleaseAdjustment = "ReleaseAdjustment"( VolumeDeviation, "RelativeEOWYDate"( @"t" ) )) DO
            IF_STATEMENT ("Abs"( ReleaseAdjustment ) > $ "PowellData.TARVTolerance" [] * $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )]) THEN
            WITH_STATEMENT (NUMERIC PowellnewTARV = "MaxItem"( { $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] + ReleaseAdjustment , NaNToZero ( $ "PowellData.UserInput_MinAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] ) , IF ( $ "PowellData.UpperElevBalBranch" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] == 1.27000000 OR $ "PowellData.UpperElevBalBranch" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] == 1.29000000 )
 THEN
  7000000.00000000 "acre-feet"
 ELSE
  8230000.00000000 "acre-feet"
 ENDIF COMMENTED_BY "If in UEB 1.2, the Min annual release is 7.0 MAF <br>" } )) DO
            $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] := PowellnewTARV;

          DESCRIPTION          "If TARV solved in this rule is equal to the previous TARV solved, then set the <br>ReleaseVolumeSetFlag. This allow carryover releases to be set if necessary.  <br>";
      IF_STATEMENT (PowellnewTARV == $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )]) THEN
            $ "PowellData.ReleaseVolumeSetFlag" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] := 1.00000000;

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

      ELSE
            $ "PowellData.ReleaseVolumeSetFlag" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] := 1.00000000;

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

          INACTIVE    DESCRIPTION          "MC, 20180111: This is now handled in ReleaseAdjustment function<br>If UEB Branch is 1.4, make sure release is within limits <br>";
      IF_STATEMENT ($ "PowellData.UpperElevBalBranch" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] == 1.40000000) THEN
            $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t" ) )] := "Max"( "EnsureReleaseLimits"( "EqualizationRelease"( "DateToCheckEOWYElevation"( @"t", TRUE ) ), 8230.00000000 "1000 acre-ft", 9000.00000000 "1000 acre-ft" ), NaNToZero ( $ "PowellData.UserInput_MinAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"Start Timestep" ) )] ) );

      END_IF_STATEMENT;

      END_IF_STATEMENT;

    DESCRIPTION          "Check in August timestep or StartMonth of September with UEBT or Equalization for outyear";
      IF_STATEMENT ("MonthIs"( { "August" } ) OR "StartMonthIsSeptember"(  )) THEN
            WITH_STATEMENT (NUMERIC VolumeDeviation = "VolumeDeviationFromEOWYTarget"( "RelativeEOWYDate"( @"t + 2" ) )) DO
            WITH_STATEMENT (NUMERIC ReleaseAdjustment = "ReleaseAdjustment"( VolumeDeviation, "RelativeEOWYDate"( @"t + 2" ) )) DO
            IF_STATEMENT ("Abs"( VolumeDeviation ) > 0.00000000 "acre-feet") THEN
            WITH_STATEMENT (NUMERIC CurrentAnnualRelease = FOR ( DATETIME dates IN "GetDates"( "OffsetDate"( @"24:00:00 September Max DayOfMonth, Next Year", - 11.00000000, "1 months" ), @"24:00:00 September Max DayOfMonth, Next Year", "1 months" ) ) STAT_SUM
  "FlowToVolume"( $ "Powell.Outflow" [dates], dates )
 ENDFOR) DO
          DESCRIPTION          "MC, 20171102: This version added to handle carryover situation by setting ReleaseVolumeSetFlag <br>";
      IF_STATEMENT ("Abs"( $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] - ( CurrentAnnualRelease + VolumeDeviation ) - NaNToZero ( $ "PowellToMeadData.CarryoverVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) + 1.00000000 "year" )] ) + NaNToZero ( $ "PowellToMeadData.CarryoverVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] ) ) > ( $ "PowellData.TARVTolerance" [] * $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] ) COMMENTED_BY "The tolerance of the TARV slot; if the proposed change is less than this value the slot value won't change <br>") THEN
            WITH_STATEMENT (NUMERIC PowellnewTARV = "MaxItem"( { IF ( "Abs"( ReleaseAdjustment ) > 0.00000000 "acre-ft" )
 THEN
  ( CurrentAnnualRelease - IF ( $ "PowellData.UpperElevBalBranch" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] == 999.00000000 )
  THEN
   0.00000000 "acre-ft"
  ELSE
   NaNToZero ( $ "PowellToMeadData.CarryoverVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] )
  ENDIF COMMENTED_BY "Remove the Carryover That has been Added from last year Unless an Equalization Tier is the <br>current tier. <br>" ) + ReleaseAdjustment + NaNToZero ( $ "PowellToMeadData.CarryoverVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) + 1.00000000 "year" )] )
 ELSE
  $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] + ReleaseAdjustment
 ENDIF , NaNToZero ( $ "PowellData.UserInput_MinAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] ) , IF ( $ "PowellData.UpperElevBalBranch" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] == 1.27000000 OR $ "PowellData.UpperElevBalBranch" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] == 1.29000000 )
 THEN
  7000000.00000000 "acre-feet"
 ELSE
  8230000.00000000 "acre-feet"
 ENDIF COMMENTED_BY "If in UEB 1.2, the Min annual release is 7.0 MAF <br>" } )) DO
            $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := PowellnewTARV;

            IF_STATEMENT (PowellnewTARV == $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )]) THEN
            $ "PowellData.ReleaseVolumeSetFlag" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := 1.00000000;

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

      ELSE
            $ "PowellData.ReleaseVolumeSetFlag" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := 1.00000000;

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

      ELSE
            $ "PowellData.ReleaseVolumeSetFlag" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := 1.00000000;

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

          INACTIVE    DESCRIPTION          "MC, 20180111: This is now handled in ReleaseAdjustment function<br>If UEB Branch is 1.4, make sure release is within limits <br>";
      IF_STATEMENT ($ "PowellData.UpperElevBalBranch" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] == 1.40000000) THEN
            $ "PowellData.TargetAnnualReleaseVolume" ["Dec31ofYear"( "RelativeEOWYDate"( @"t + 2" ) )] := "EnsureReleaseLimits"( "EqualizationRelease"( "DateToCheckEOWYElevation"( @"t", FALSE ) ), 8230.00000000 "1000 acre-ft", 9000.00000000 "1000 acre-ft" );

      END_IF_STATEMENT;

      END_IF_STATEMENT;

    END
    UUID "{004129ca-00d8-4c75-a919-5b276b24b972}";;

    RULE                 "Set Upper Balancing Release Volume";
    DESCRIPTION          "DESCRIPTION: This rule sets the Target Annual Release Volume (TARV) when the Release Tier is set to Upper Ele